%!PS-Adobe-2.0
%%Creator: dvips(k) 2023.1 (TeX Live 2023)  Copyright 2023 Radical Eye Software
%%Title: main.dvi
%%CreationDate: Fri Jun 16 16:43:48 2023
%%Pages: 1
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%DocumentFonts: CMMI10 CMR10
%%DocumentPaperSizes: Letter
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips main.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2023.06.17:0043
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 317 2021-11-16 20:47:25Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.41, 2021/11/16
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
revision 952 gt 
{
    systemdict /.setopacityalpha known not 
      { 
         (\n\n%%%% WARNING: Transparency operations ignored - need to use -dALLOWPSTRANSPARENCY\n\n) print flush
         /.setopacityalpha { pop } bind def 
         /.setshapealpha { pop } bind def 
         /.setfillconstantalpha { pop } bind def 
         /.setstrokeconstantalpha { pop } bind def 
      }
      {
        /.setopacityalpha /.setfillconstantalpha load def 
%        /.setblendmode { pop } def   %% works again    hv 20210825
        /.setshapealpha {dup .setfillconstantalpha .setstrokeconstantalpha true .setalphaisshape } def  
      } ifelse
}
{
  systemdict /.setopacityalpha known not 
  { 
    (\n\n%%%% WARNING: Transparency operations ignored - need to use -dNOSAFER\n\n) print flush
    /.setopacityalpha { pop } bind def 
    /.setshapealpha { pop } bind def 
  } if
} ifelse
%
%%<bool> .setalphaisshape -
%%    If true, the values set by setstrokeconstantalpha and setfillconstantalpha are interpreted as shape values. The initial value of the AIS flag is false. 
%
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/fill@Dict 30 dict def				% the fill dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/Power { %  a^b   latest ghostscript don't allow -4^-3.1
  2 dict begin	% hold all local
  /b ED
  /a ED
  a 0 lt % prevent something like (-4)^(-3.1)=> 1/(-4)^3
    { b 0 lt 
      { a b cvi exp }
      { a b exp } ifelse 
    }
    { a 0 eq { 0 }{ a b exp } ifelse
    } ifelse
  end
} def
%
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/addCoors { 
  3 -1 roll 		% xA xB yB yA
  add			% xA xB yB+yA
  3 1 roll 		% yB+yA xA xB
  add			% yB+yA xA+xB
  exch                  % xA+xB yA+yB
} def
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian (original)
/PtoCrel { pst@angleunit PtoC } def % Polar to Cartesian with \degrees[??]
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
/AnytoDeg { pst@angleunit } def 
/DegtoAny { 1 pst@angleunit div} def
/AnytoRad { AnytoDeg DegtoRad } def 
/RadtoAny { RadtoDeg DegtoAny } def
%
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
%
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  10 dict begin
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
  end
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  40 dict begin
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
    { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
  end % userdict
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  50 dict begin
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
  end % userdict
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/ArrowT { % like tikz
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
  w 2 mul /w exch def
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
%  w neg Inset neg rlineto % move to x=0 and inset
%  CLW SLW
%  1 0 0 setrgbcolor
  2 setlinejoin
  stroke
  0 0 moveto
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
%  5 dict begin
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
%  end
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
%  x1 y2 lineto 
%  x2 y2 lineto 
%  x2 y1 lineto
%  x1 y1 lineto 
  x1 y1 lineto  % counter clockwise path
  x2 y1 lineto 
  x2 y2 lineto
  x1 y2 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid {
  40 dict begin 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul         %	\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%    Helvetica findfont b scalefont setfont 
%    is set in pstricks.tex
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
%     /NimbusSanL-Regu findfont b scalefont setfont   
  /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  dup % run loop two times: lines and labels
  { i dx mul dup xGridOffset add y0 moveto % draw the lines
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  /i x1 def 
  GridDX div ceiling cvi 
  { i dx mul GridDX mul dup xGridOffset add y0 moveto % plot the labels
    b 0 gt 
      { gsave c i GridDX mul a cvs dup stringwidth pop /z2 ED  
        w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse exch GridDX div z2 2 div sub exch 
        rmoveto show grestore } if 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  dup % run loop two times: lines and labels
  { newpath i dy mul dup yGridOffset add x0 exch moveto 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  /i y1 def 
  GridDY div ceiling cvi
  { newpath i dy mul GridDY mul dup yGridOffset add x0 exch moveto 
    b 0 gt { gsave c i GridDY mul a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse GridDY div b 2 div sub
      rmoveto show grestore } if 
    /i i h add def 
  } repeat 
  grestore 
  end
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /RotAngle ED 
  RotAngle Rot /RAngle [ RAngle dup RotAngle add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 4 2020-06-09 08:32:19Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 249 2021-09-14 10:22:55Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.06, 2017/12/03
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
  4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
  end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/concatstrings{ % (a) (b) -> (ab)  
  exch dup length    
  2 index length add string    
  dup dup 4 2 roll copy length
  4 -1 roll putinterval
} def
%
/reversestring { % (aBC) -> (CBa)
  5 dict begin
  /str exch def
  /L str length def
  /strTemp L string def
  /i 0 def
  L { 
    /I L 1 sub i sub def
    strTemp i str I 1 getinterval putinterval
    /i i 1 add def
  } repeat
  strTemp
  end
} def
%
/concatarray{ % [a c] [b d] -> [a c b d]  
  2 dict begin
  /a2 exch def
  /a1 exch def
  [ a1 aload pop a2 aload pop ]
  end
} def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  1 dict begin
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
  end
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 291 2021-10-01 09:22:45Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 0.02,  2021/10/01
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
12 dict dup begin
/FontType 1 def
/FontName /PSTricksDotFont def
/FontInfo 9 dict dup begin
/version (001.000) def
/Notice (Timothy Van Zandt <tvz@Princeton.EDU>

This program can be redistributed and/or modified under the terms
of the LaTeX Project Public License Distributed from CTAN archives
in directory macros/latex/base/lppl.txt.

Modified by Etienne Riga  - Dec. 16, 1999
Modified by Etienne Riga  - 2005/01/01 (er) to add /Diamond, /SolidDiamond and /BoldDiamond
Modified by Herbert Voss (hv) - 2008/04/17 
Converted to OpenType by Marcel Krueger 2021
) def
/FullName (PSTricks Dots) def
/FamilyName (PSTricksDotFont) def
/Weight (Regular) def
/FSType 0 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put } for
dup 65 /BoldAdd put
dup 67 /BoldCircle put	% 67
dup 68 /BoldDiamond put
dup 69 /SolidOtimes put
dup 70 /BoldOctogon put
dup 71 /SolidHexagon put
dup 72 /BoldHexagon put
dup 73 /BoldBar put
dup 74 /SolidAsterisk put
dup 75 /BoldAsterisk put
dup 77 /BOplus put
dup 78 /BOtimes put
dup 80 /BoldPentagon put
dup 83 /BoldSquare put
dup 84 /BoldTriangle put
dup 88 /BoldMul put
dup 97 /Add put
dup 98 /Bullet put
dup 99 /Circle put
dup 100 /Diamond put
dup 101 /SolidOplus put
dup 102 /Octogon put
dup 103 /SolidOctogon put
dup 104 /Hexagon put
dup 105 /Bar put
dup 107 /Asterisk put
dup 108 /SolidDiamond put
dup 109 /Oplus put
dup 110 /Otimes put
dup 112 /Pentagon put
dup 113 /SolidPentagon put
dup 114 /SolidSquare put
dup 115 /Square put
dup 116 /Triangle put
dup 117 /SolidTriangle put
dup 120 /Mul put
readonly def
/FontBBox {-572 -743 572 743} def
end
currentfile eexec BAB431EA06BB0A1031E1AA11919E714AC69FC5B91315E2
3949B468EA8965C09E14B93FD8F0A9A9B4A0240775693C371C9F5E8CFB4752C5
B8C3907EB8B475C65DEE88EC0510BC599D0660C41C842A3CCA793376ECDB36BF
799EB8631B5A08846013BAF4256252AF16B24E3BEE4C45F8AE9AEC40351B49C3
CC0B1DFA717674CDC7A3BEA5CE689121348DBBD82720A92C2D68DB27F03F105D
87587E74605E01EDE24B0539FAACD5311070E7BE0BDC57182DA408ED060B7B6B
964AE3EED6C8F348F298B28987B635D1332B77CC33F0B6BF682193B93CE93416
64F638070894F299603700A95B876A3FE5CEFD5BD19928E5DB60E0FB25969A26
05A6651F04B60470D0CE8E37C50EF9350CE0A4EA9F5251F0E9A1B7ACEAE4DFF7
40578E61DA30D0C9067954E23DA81539D0601CCB3FB78040200CE8A1B1E2B4BE
E6BA8FC9121F04EB916D5F9D98C77AE10A51F451B440230C23077251E29FC6E4
2844FC17F11EE282266DEC3A15C96832E595773ADA1A48330AEE455DC4A2805A
C7C7CA085D16113F30AF3EFCFFE079C45CB512DBF81EBD6137314545CA6CE891
19B42A3518E28989CA7DB1DB6F28ED3CB0E9F227A023660A46D14CF05E197E23
3015D9046635F59924C00F5EBC3561132B94C23E91D3AA1EB997B9F486C8793C
E2B8B9224C2C13AEE4AF9AA6E2FF96FFE84223ED1A902C38AD739E0C863A3A37
0482E2F28EB620257113D8EFBE63FCCD181158CC92CFA474170798746B73808F
8D4CB2A16B5BED0ACE4673AACD1484A8CF1F437F58D478A2CFBDA394851AE87F
E8E488302B346131EE903FFF22B882624BD2EF1381761C1FE4BAD1E701CA9C4F
F34AC1E9F9EC27E673FA78703FFB2432FDCD62AE52DE02D55580636F347297C4
A74D04EB5FF11D31D3D04EB580E6C54F88A817049249B0749FAEBF78C4A3CE4A
3F375E7C57D35D8CCA7810BFC7C0F4D4F14F8A29EF000D2BA97AAB26D48D50D7
CFA8E3586105575D14DD80F3D2022373F802C98A78E465F7688C9952848876D4
D7BECAD0FAFBA4674944BEAFA75ED8A87873439FDA03B482FF60B84007FCA6C0
1A04B7C8BF346E30BB6D838EA08FAFF3A3D331527459C665264B9E07A7262419
E0AF9F0AB9897891BF0CB656FE222587FC8890C3FF9D848ED557732CBD2865E0
F4838A6C6E5D794F7781359855ABBD8B2BA63EF2190D930D20C74E9088BBB9BA
62865A174D03BF90A0959079C28DA220598AD0A960C66697A49513D3F152C306
0A9E3133F750EFCDD43E34492A65321EE3B08F904968BB642D3E46DFAF2697CF
52589695642631DEAC79C3B4DD9DE61885901D9465B538643F60FC1B46D83DC4
2D6AB7AEF088D43531C4CB5957A74FCEA04E4BB05B5AF68BCF316C62F7A26CB7
88C6CCFC7859DB9915626FEE3C95F6FA3777B3F6ACE5271BF3309B0A41AF9853
5866F4EBABF5CBFA2D3F411BFB2C3B66962102B183B281FABFF17CBE2A744CE6
A8CB6E1B3D624A68104A7E43F20483622B9C93D8803D71C5ABD930DA44DD6177
F6F411619A130954C54D3BDC24E66A4EE2B3F6C7EA40167FF6E21CA13DF3E903
3E88F8F46C5CDB75E816EA0235669625A772779079CABC8DA76AFBBBC1C15EF3
5695EB0FD46E34C3FE121CC29F7FDA3384B0F1292087CBCB9CBD7B2377AC0F76
5BE0CD3485F2FCD3C6C0012125C273B48900E5200008B21F6DB9F4D4E8027E7B
34265E1FFBC9666A2678CEBA46AE908BDADA630B135683D4F66934702F939912
EDFF3EE524B38F25A0E12239EA471DC4A90814D38747EEF125FA30BBA9998119
A1499E6E6BC26ED39814B64D04D500C2E14A062125A7E4AE9985BEDB6C4A800B
D37D8F13274B28F86D73600A165214E1A8F0F787C92B3ACFC274A34EE064732B
BAB298F0DD452B3DA4E230624FA5296C7ED8A464C5E7D31E0A9C88FD767D4C6F
E2348CE16CAAE803DBA21AF5B8A44ED8B92ADB9C07D422878C63EA6163DFFA5B
FD8AD97240D760FB6667DF08A0F16FB66B2934E64A39C0D82535FC1ABC3C28F6
DD83851928AE495312AFE7F0B7C3D0990D7725B54B0D8644C01CF2BD29340E92
FDCC5D221298669CBD1F842A1BF45D59D4BCC425E3D7FECB69AEF5FF54E86B80
A6011AA0ACD1D286F7BD2CC6F995355E214BEA9DA0696F3D436BAB29C2328173
4661158DBB87A777A8C0FECA5B1DEC07197BADE6B65EBC7152E119BD58204353
4C4793FA4566107EFFF912A0E03255C11824CD079923F7296DB156A8C9134BF4
E573795C7C720A3CDBFF693602A141D436B2F7495B01F6FBA43ED1CB444AEAD2
400638034AA4D95EF5849E61EF2068A4848A27FA16EC8931456000E61E1181BF
545AD271F9D10C60C6AE8616B12998B08270B9E29464DE2725F61EC431C7023D
FB012FFB2DB2EAA1C61C06519BCD8114331FF644B79E9E96E21720B38098D513
59BF4CA62716A9289C555C1B5C05D68F762B5B2E0B9BE7F67D9EFB20B8A0A898
4DE73C07853DAD10A8805E5844A36027E2AECF4F10CA66BFAFEC17DD1CC93373
547071168AF5018B0B6A40E606207ECFE146DE6F8881F969E06207A973DF290D
29E325B6D59F363A5F4105AFDDF24CD4FABAE1B5E784638F3EB2E67C88879F69
00101C3F6DF95D7F81E6E3FE732DCC175F1FEE41D87120F52AB5EA54FD2E1666
CFA5D665F9B97531D74B56CEB8A9E1417A58C1790ABEB68F2F1B49EEB34D24B2
855294A892EC5C92D090BB460AD8844E85E25094B7CE117F343A856F27CEEB36
1CC7AC29D4048E6ACC5947AE7FB937807AC29E65353D20A57E461AC33EEBC75C
24068278B586B33A5E534B1A9ABAAFF492250074EA4CF3EF0818D8F0BA0C7428
40BF46DFCC9711A0420413D0667C7361C8ED428BC510616C34AB28BCC9ABA6F2
43F08A2FCCFC5D1BAA77AE90BF0E296E2C3A99268D7906AE12CDCEA5CE8B5FC9
5A75526CC0B72C7E122C2ED67153BC9AE380DF04FE51E7B0C5AE4363D95DC730
AD0EF34542C179668A9D5807AA22256ADED921E8711E673C67CB5086D7563C98
2A6C681813E07A8E7440FE562EEF08661E1D9CB5761595B515DEC347F0DC84AA
1B3C272792F2D9B4B11C5EA50F7584C7D931BF5BA1A39F635C87CEC31BD22D64
10F7855D66EC86193FFA19ADD7880BCE5588D2322071D443F47D6B4F3F66CE68
4B87D99A5A0D375535D153353DA6E154FF78F458A671CBE1E7136C16435BF244
6E60705C79C82EB5D40934AD496FB08999EFC6E52E56C0106E39603F25D3B946
A7850B4A4EF56B1E5CA32021F191236EA0FB315DC37D708115765F85B668D051
D49167E374DFA9078D128E745F1583EF885F6614D0D1CE1F3F27571B5C68451F
38BDD4758A54A3C6F8ADB3DC20CE95DA5B22C77227CD8EA53C51A643250FA288
4DA7B6F3D93EA1C82B6639B6090352F6E4ACD6A478701D88F8591F71ECB15CEC
FE6FA0C4C049FE9F04612DEB944271F1EA167B2103D69C11E5B6C66CB8C859FE
8DBF7D2E4B26FDE68CFE085B61212906AB7B4E4DC2FB44E8B035DC6938B09632
5C2AFE3B1742756E1DDE8E2D16D957B07713C650928ABFD08BB5BA216086D699
797884E3D06F0096BDE68F929F9FCC4E5819320BF62AA75686A8EF7A11B33281
2477A82B9B0D3B71E8AD3CD41388A69C33B7A4482BF2345419DA669BB7544636
CEF7C14F8C55620724B05B7EDA33584D9CA46B697EFE6CF01B6152DAF28F42CD
DFABA3788B04D5A3AF493625E3387AFCAFE7EFDC62F4A31CA69E7563ECC5F919
91763C850EE7F7B6A979DB2955BA8E4BCA4039D2F083DB3B256F68BB34624CDE
2A745010D76C85300691A0DABBE33109721FAFF7C9BF7D9B2E0F1F9CF5C76676
02A9C95488976ED8956EC9C1B9A9F3CE3B0F7E2DF387DF831C855D9E21908376
BCEFB52FFBA0AD0F9B56CE4043643BC582750110B16399281C79183A8D693AD8
A961C6DE94A882D27A0D9806A5D0ACFC29180CC21E375BA98DAA4C6043EC4532
937C4870CB65365D2CF81C66A72841E189EE4BC12F8882AF0652D0EE3DA63D1F
010248A498F3809036D1FBB712F2D78CE71E0C9AA2BB3A55094E4FAAB574A474
5B153A3D4AD4ED347819033CD288FAD39E440D2FA03630F9529E50BF1E6A51CB
309A34CCCEAEE87C8B3DFDFB81A9B3F0D36DCA6AC69588F51F29BB83015E3244
5C666CC22DC85F7A86FD1D0311A8D8D1F399F87B2859E66C9432E8C14E04585C
A01642BEEAAA975AE4D7977D40FBC85D4B8F40646721A9F38E916C226EB2C045
04EEB6027C835EC0F0F8091EA0250404BE75563D44B40A5D67C1A122E9E9DF7A
5692F8902FDAEED37EB2C430AD36E021CF56CA560B77137710090D8685624CAD
9E6BFDF5BB2FF6147A65F164ED0490E1126D67FE1A93D5E77275FA925CE8666B
E8FF666F97E3101881467A955FDC9864C9B85E943918D4C22F84391D35DBBD14
2EE39F130DB83BA304C931113287A3F7CA042128135D9AF672319B1C3C1FBD59
80BE72F051D6A6FC34174C461A77F000F446E594CE046052A571505F0E4922EF
04A8185830D6D47E006F893973CE8740FC82F77CCD5B2CEF7DBAA9D2A0EFBFA3
2B0A73412A362977B01FCDC95FC8E0B920D884FF7E40FE9AFDB683776B95487B
F096B4BBBA2BED724ECE2CD766C8D83E28FD65924942AA4A3064AC3D5A322D86
3A4D41DBC2F5C6E21C2184CEECE1101A10F8290CBF0D4116EA1C1DB8988785FF
E50B066A4C21E99AA660872A5EEAC307C7794B303EE066C57594AE2389DBEA5E
85CDD9D314CF686811C2022E8E0EBBA0B699EB0405FD2426EA4D698CB4757B6C
53E65BB5D42C65C7A9DA515DA23CB3834C89F769154447BE2D92229016235658
4F40E982A14EB4E6BACC81313C8E0A74A19FD184B1364CA275FC6A62A8709428
BA35305F02331212B45B9268D582A8B638B430BD0A51C607D4C4FD862F0E591C
1A1273650BBE5DA16CE10C98F5209A7C998877BE8F57DEB4D9AA46CC2EF71588
0EDBD79F25594D516AD74C54762FD393D4810EBC8AAF10F821DCFE8D503B37D5
6AF14F0FA57DA3A3365EF38470C1F0BCD693378BA20DF34D263165841DF96F90
32FCB81A44BAF77D3C294697CC8CC971B555F94E768A275A154D63E71A1D6C67
CFDC729E86FB9315B9234D2AB1D6529BFD0D4C852C5438D368B350D8420DCD34
4A164EAC0AE99AC9A2D07A1F77D2E68255EC3F7448F10DABF969653D21590661
2B1DE5DF11BEFA41CECFB00C9A6A7AE3808009E41E2B933C6AA50E1E9BC8AE00
651C8AEFC9FCE6E647FB5D6032000CF87663510D97C12386227E58DD71FD4228
A070BE013F86155C46C8F96D3CF1DE07D60DA3D0E05C3B4A6B5FBAD168B06A50
30738754199245C8AF782F76C58A8F638A2D85CC51309C866729297E3CFC075D
6F9ABB484C5D1D307E06D6ADEFC769E5F51E389520288843F373B71B233E8B96
E59A7053D1D7E17972EDFCBD700A001EBE7759818EECC03353EB0B990EE6DA34
8C65B5092EF565AE325B00DFA892FF2E7217990F6020AEB57974D38E31F97183
FFB436B7DD8C18A80EB7D43D1EFB9A8D3EA99E77F65AD1443AB10857C44B7AB8
2EB0BE22CE0CDDE525B9DE03251E192A3B436C3907AC59EA40BBB63A5A7DC56B
DF08035260ADE398AD7ED78F895AE0CE0ADC74F4BCF4FD9ABEEBE132A537D788
B884084A69BEAD6791D7458A0BC58635A1576F368FA8D2D99DCB6C31BE97F432
5FF313DDA4B7411296716D32049D31F8E85C7D4B4DAE656AEFF8B7B8C1053A57
F13B93F29800E250C98BA58B6061AE740762F9202122F156852A326C13F3675A
4FE680CB4FD1B94C875840A97F2D14D6C1EFD4D4C37F39752572225377072C53
6854A002922441AF733B6F90EFF39E37E1605AC5A3F4B45F66DFC2357B57CF40
263D66A21EE0F0C1D1A0E4BA12454F9A252CAF55B46F5A907DF9D94650DA1D5C
4CBE7E65DE6BC996F52CEC6A02D4D987D99F7B66A1C786E9463A5628A50F5163
02A7F1CDDA1FB3337774AD640B02D504018E7C11267BEB7F51B8AC2FB3326EB5
1EF125B3AA855B3AF7891595077B9FD5960896A022BC3CB4F97F4CC175F09B81
128452C576CB26479E769DE0B75150360EF0C2AD3530A8A3B0C61005BD13EBB8
4F6A707A8D1565529BC1ABE78FBFBEBAB170ECD6908CCD31FA33368E485DCBF5
24DAC34619A38FBDA43C886FC6B4D58C7349C6D577D3AB8DF830F3DC3E06BE4F
8D1283533AE54551513735E278DC928869953AE85693870179055B8D953A8062
0339D4FC9D3DCE68C408FBDE261FAC68438ACFFC7E0F12168B91ECF56ADEEF93
FF6A2D2AE5D35CB0B49BCDED51EF5B16B6A7364D38592BE0EC092C66309F6D0E
E9E73D7AC69A9F9F8C83B5D7352E92D27751D149F552DF5ED5825A79507C5C8A
725E19E744631C96C74EC15829092BE11AB890C9AFBFF608B4F3B5FB42B29F1B
DA5436480A26657A2EBA297FD9933FC6B0071E62551C1A6398F82B097726E06F
4EAC8ECD5C4B316AF63B64A131F3EDFC50F1141E56EE81CB44A03B0CE8B6CC4C
B9E6DF9F47E957E47D4C5C51508C0825537EADCE33E9C3432AA0C0E7890FCFAA
54E1D95E922165EAECC89E7E18A7E36A269D68D918B4E64246066C88F009D478
D17DEAD4CE93F288531DA3CDD4F0B040CC82544B95E6EA26F002357CCF6E3D7D
F52FF5C84DB56CAE8F64D9DE498A54C28558E34F2EBCB8CD3F3F2AB2531D3D74
6A1DC97F93E312DC04158ABA06E9E55BE5A8DE5E0F3D8087188C8055B4C6B7F1
AC373AB1563F756E269BF3D90BDFB9EF3E62E610906E1928A4FF14665EC4DF2F
1703DEDC813E3BD7EFC9CDAD47E0DAF19D2C0701F2C027AE2986BE7715E0B0F4
15D4501FC252AB0608A9BF79FC085AE7F9340C073817296A900E1AB7033D4FD5
21AB67D4AD5E29DC4F20283A7864A4D6CA60908CE2D544E7C3C894A5635FDB42
989443A0DB0AC9281BA74DD27B1B573911DF90AE01984A865A3DB95125594779
C77DFFEB5699712598DD86F94CD032D14E0B71A92890D3EDE1443A3E30968AC6
33A004ACE18A56520853F64A4244C7B479530A8C5D18E47B38D67BB508A58710
6B5753081BF59EDC0793542987F1BC26553DC19CFC6EF456DA872DEAA95884C5
D4D8E503E6BFCF252AA8E144F2A24F21A08CBD05C4F65C9A9636B102ED4ED535
2A3C0A4FF4A039C3ED2C9E00C3E680C4A8FCFFBD90E871E5075FEB7661340E96
44DDBD719F2D4DD690457568802749D1E6A1EB15F64A85414B1680BCE311E8AC
1C08758B6453DD440D8A9816EDEA14E09224144E91276B842280E04A0BBA4E68
CEC5A9603A7F56551C2B11DADF1F4810C734BDEAE930B5DE4556DA67981B820B
CD2BC5A0FB8D8790D2666E0AE5558B1D2200534E83F7851F3D9482A2E8908F92
3BA87358A66968605B3D53DA4AB1D93389BB689B0822526D9F240952001DD054
09B9BE40559FA3FA4F216F022D50C408ACB34021AAE5F2B257DEF13A25F02701
234CA72E44287FA9D88D7EF4F768C35A65CDA6B411323A501BF3848AFE448DAC
2240C6CDB5208EB259D89A8F1BE43B39F911F55D88B5822E443C898E7ABC7EF5
B3953C2EC6DDAF174DCED0BF9353A2713774A8DF9A9091AA553D30361C9EA580
56F4993B29EDF2D3F3F1D6DBDB31728A84CB10019CE7407FE4201FC9A9D70F9E
8FF56B5CE83D2810A507AE941431A5D9B513A6F55FDD452D6309492C76D9C5C6
DD9D8F6CCD27BD71AFFF7FCE5D34DC355A066BCC3C9282EC971521260CF0E12E
936517B05ED0108AC13A671654A2EFD5FB71109B16B3B4274BCE4EBD624F288D
9E90D28D18D27FE4628444E76D3EEA619AE9476D181B4AC774AA62BC6D8AE5F0
84F90982D5EE1D24AFB37703671B2493AFFA4C51245086BE865627AE7D0E7759
179D509827104F840BD2C720F35D46D9C8338C0F8C03ECAC14E9BF044A04A96E
177D1C5CE74D34AFF22F3937F05A1B54F46CE9C5F2D60907DB971F5B2F8E5B9D
3ABA4ABA144209E6845B85A64F3A97CDC9B6AA5BD9E68F726F511255CDD9394C
0A0332C27139192F0C5D79668CA0CC0CBBB14E4CDD707F11F048CD6E0756D90A
F2EFCD882A296CF97148364A31FE8D7B5250C8BBC7E9F39EFC55B4662EC31535
416F2F90DDAC955FBB297FD4829BB73079FA91012386544B98E65BABA975C754
36B64848E3903D03C59BE0DB94E12E600E82A72EDCDEB4AB2260EE95F46568EB
D0A7002D21C9BAE538CF8A347A2751868343EE4FB3730984335FB2B5B88DFEE9
66A8062C26E4B834F568CA6164D6FE9AEB126502B943DD390A50B93D1CDABCD3
C96FACE03115D56C6BE19F06CF7DDC375238E238B448D27D64FA49ADCC0A5B24
AEF014B5D48F6CC493AD69E74DF47FEA376C6EF4B14C2FB71ED0F42E09F1651C
EAEE97341F26A6591B83FE723C448AA04AE504D6C34BCAECD27DE4B247678C7E
C51DBF53850EE7E615C7A01BC705F714B7B0C80B7AB79C42C24C036C6718E5A3
6E1475F07D9F7035866A73B4D0A67807A03FB61352F73A349AFFE3CCF566F457
6A62FA32004F3FE6A15E7B25C6E9AB2D1DBC9964E6903AEB408F09A0427933F3
4E92753419A9FE79513A2E39FAA295A92292D521E3A95FBBB77AD659D4E03D2B
39EE02738A10059514A8B51A35D3302C25891B90F74EBDB362E1017C676F0A0A
9CB67C9794A27FC7F0ACD189AE59C8A75A5E9BED84A5FB6EE5DC1F74A620E559
51D8C5CDDC4B37CAE2AF70C48B6C306BE826EBE8D22DF714D1F2FCA10369A266
F5DA86D65F730262B0035E5FF68817C93CE0FBBC201B593D955E40C99E235D45
7F70F497A8A11748AAA70FEA09AD8F5BD1A01E06D56BB6059DBEF8AC8AC5FB0C
59B5CA3C447022EA6AE6F928DA7C9A6A1F322C5D53CE905829C41408CF7449C2
69FF41A9B83869D7F230C78871C22933C991EAE40EBC97D8DB082B20E4895E49
6D6EE9D22FD9B395CA79073C08C0053E3C26124538544D9C68717076746A8D72
7DC34AE353D29983338A2D1998A0D62BFC296E433A8E48CA90B999B298609587
1164C2A65BC00D0F124A8EACCCCDA7A7F65D5AA4DBF70A273B6CB918B00F6ECC
0131BA9461BFC53357E09E0A3C615E79A26261D83F71B944DAAAE74A4B7484AB
D22B4BB40D4E9038E721EFB5F672796A3C961C298B29ED896A27E389D134C21E
7BED9DBB0FBB3AE2ED4A661992BCC8E4976F842785431AAD804360FBE8A134E4
3CA9D26F8571E18D0F27F70ECAF659A99FB7955E0F4D8690447CA37F42A05D15
E1D6559A1C95CA424A643DD58D0416A374091D94CD7A48859EEB4A461A6A436F
D07DD5A94E7D5B033D2AD99FDA4E7373A1D6CFD11DE94DF6537F25F5CFA1428F
9A126E21D819AE1A044510186FC8A9D51C20D922F3279A85E31C1F34B6B240C3
000775B140120C6E697D7BC14AE22F87EC6885C3CA40E718BAD7688C8A0B3E9F
49652FE7D0DE406B2EB70F039AA8B10C7601C4929B2971A9A3CF98F52F9FE122
CCD2D944BE6F68EF6F4F8EBEF51AEB1DFAC87C164F94B36511BF120D126D6824
01736A019ABF0BA4355854251D381828F2D5C8460F3B066EEA447009C01DB22E
33764CBBFDC5C74CB881098E7586725777144FC38DCBAB71413A26068EE3EC6E
53300BA5BEDBE53E5FD61E6D2E390C7E1D82454093264E8A2013AA0C91058031
B52A08D996CF2C82993DE9497AF91D4AF8C99E68577589F98564AB36FA448901
E671920A8DEC9535AFA9038AA1D528C4B31ECC27A505A5B83E4ACA119C6D3BF7
1AD9B21318030B2F1F69F132E3DBC5264A4AD516AD4736CED6E8CA4C3352C78B
2B836CA994A67BD63576593FAE07433051723DE3A67FEAEDA3CF10F66F7DB936
D96BD0A813A5C40B144EE897A5CC701B0297E190B6999EE9808A54F86AE2C05B
0FC4056944066CDBADCE78A0524D6F190B155120749CA84957FEBF447B748BC6
27B3AEE460D4D5FCF042B7CCF4A4DC92110AC09B16669CBFA4CDA713606FC086
97E8EF90EF2BFC8BF6C811FBEA5163C68B95C0B65EA87B9D12942EA0DE78FCCE
9DD86341497DF3F0CD388BB386658FB6D774A46E9857E0091F3B2C6E016BC24D
037FADA56418D223E672609C891E32E96BAEB77C7C568F26FE03B720F5F2D875
9F1C5BF185C4B1DB2E6BBA48F4BD5F6457D92B701E7DCDF0ABE154A9CDE3BC17
8F1F1CF521081036019C20E3A8AA6958D08C3EA3275CCE2F96F0FDACCB50ACB9
37204C55EC41CEDA3AF577FB778E606C7C2EE814E8D3E1C250DE4D3E587AFDFF
A1266218FC1D9A386D00BE86EB2433531F5A978031775862254994315B01C937
CCAF1C5DD69F96F5D64DD288087639B02BDD29F9B96C5B4F525DDABE245371DD
4717AC198F6477E1A2E6CA5CC2AC20FC94314212F5146721FF639C6CEB6936DA
A7ABE5348153D0DBEC6F96F61B6B7E53DD82107EB85F5D2FD094D82F4F446CEE
B64340FCE74AD83B2082952ECA69C53ED64B6F03FE3F54695FEEB8EE1D61C6DF
87F7214F97C165F4962E5B78500E7F4E684AD4F4F575F06FB275D449BAB97B06
BBC205D8FFE660C682A8CED9E1F7907214AB2E6BC7C830885EA32605B069ACE8
66EBFA95DA16774EDDCA73685D1B145770BABEBCFB3989284B27B7E698E12064
147A2EF3F2883F85C9C0E927DAFFBC9450E1B6E918726DD37B5CDA55E6D0D8A5
C3B5ED376F4772DF45D45C4CF18BEB4811CF1B9B3D920BA4A98A80F8DABC91BA
362EA6A74FA33DDF518B09564FED9F04D4312CD988EBA55DFD3145438A223943
488699B3D16846B51F2BB650790EB63BB9ABB2B3EE27C62B1B01FBA662B70542
DBB61743DC569337082176ECBAD417354A5F900EA0BB5479162ED7ECCCD71AE8
3B3EE296F3D14D289B
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%/PSTricksDotFont exch definefont
%
%% end

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 438 2022-01-31 17:45:26Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2018/12/16 $
% Version         : 0.65 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add Power mul ENeperian z 5.5 add neg Power mul % Power is controlled exp
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 216 2021-09-10 12:28:13Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def

/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: pst-3dplot.pro 0 0
%% $Id: pst-3dplot.pro 21 2020-08-04 12:53:07Z herbert $
%%
%% This is file `pst-3dplot.pro',
%%
%% IMPORTANT NOTICE:
%%
%% Package `pst-3dplot.tex'
%%
%% Herbert Voss <voss _at_ PSTricks.de>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% DESCRIPTION:
%%   `pst-3dplot' is a PSTricks package to draw 3d curves and graphical objects
%%
%%
%% version 0.33 / 2017-04-05  Herbert Voss <hvoss _at_ tug.org>
%% with contributions of Darrell Lamm <darrell.lamm _at_ gtri.gatech.edu<
%%            
%
/tx@3DPlotDict 200 dict def
tx@3DPlotDict begin
%
/printDot { gsave 2 copy 2 0 360 arc fill stroke grestore } def
%
/saveCoor { 
  dzUnit mul /z ED
  dyUnit mul /y ED
  dxUnit mul /x ED
} def
%
/3Dto2D { % true or false on stack
  { RotatePoint } if
  1 { %  dummy loop, will run only 1 time, allows exit 
    coorType 0 le {                                               % the default |
      /x2D x leftHanded not { neg } if Alpha cos mul y Alpha sin mul add def %  /\  co system
      /y2D x leftHanded { neg } if Alpha sin mul y Alpha cos mul add neg Beta sin mul z Beta cos mul add def
      exit } if
    coorType 1 le { 
      /x2D y x Alpha 90 sub sin mul sub def  %  |/_  co system, no shortened x axis
      /y2D z x Alpha 90 sub cos mul sub def 
      exit } if
    coorType 2 le { % coorType |/_ with a 1/sqrt(2) shortend x-axis and 135 degrees 
      /x2D y x 0.5 mul sub def
      /y2D z x 0.5 mul sub def 
      exit } if
    coorType 3 le { % coorType |/_ with a 1/sqrt(2) shortend x-axis and 135 degrees 
      /x2D y x -0.5 mul sub def
      /y2D z x -0.5 mul sub def 
      exit } if
    coorType 4 le { % Normalbild in Trimetrie Skalierung so, dass coorType2
       /x2D x -0.5 mul y 1 mul add def
       /y2D x -0.5 mul y -0.25 mul add z 1 mul add def
       exit } if
    coorType 5 le { % coorType |/_ with a 1/2 shortend x-axis and 135 degrees 
      /x2D x z 0.5 mul Alpha cos mul add def
      /y2D y z 0.5 mul Alpha sin mul add def 
      exit } if
    coorType 6 le { % coorType |/_ with a 1/2 shortend x-axis and 135 degrees and z into the front
      /x2D y x -0.559 mul Alpha cos mul add def
      /y2D z x -0.559 mul Alpha sin mul add def 
      exit } if
    coorType 7 le { % coorType |/_ with a 1/2 shortend x-axis and 135 degrees and z into the front
      /x2D y x -0.5 mul Alpha cos mul add def
      /y2D z x -0.5 mul Alpha sin mul add def 
      exit } if
  } repeat
} def
/ConvertTo2D { true 3Dto2D } def
/ConvertTo2DWithoutRotating { false 3Dto2D } def
%
/Conv3D2D { /z ED /y ED /x ED ConvertTo2D x2D y2D } def
%
/ConvertToCartesian {
  /latitude exch def
  /longitude exch def
  /Radius exch def
  1 { %  dummy loop, will run only 1 time, allows exit
    SphericalCoorType 0 le {                                               % the default |
     /z { Radius latitude sin mul } def
     /x { Radius longitude cos mul latitude cos mul } def
     /y { Radius longitude sin mul latitude cos mul } def
      exit } if
    SphericalCoorType 2 le {
     /z { Radius longitude cos mul } def
     /x { Radius longitude sin mul latitude cos mul} def
     /y { Radius longitude sin mul latitude sin mul } def
      exit } if
  } repeat
} def
%
/ConvCylToCartesian { % r phi h -> x y z
  3 1 roll			% h r phi
  /Phi ED
  /Radius ED			% h->z on stack
  Radius Phi cos mul exch 	% x z
  Radius Phi sin mul exch	% x y z
} def
%
/SphericalTo2D {
  x y z ConvertToCartesian ConvertTo2D
} def
%
/CylinderTo2D { %  r phi h
  x y z ConvCylToCartesian ConvertTo2D
} def
%
/convertStackTo2D {
  counttomark
  /n ED /n3 n 3 div cvi def
  n3 {
    n -3 roll
    SphericalCoor { ConvertToCartesian } { saveCoor } ifelse
    ConvertTo2D
    x2D xUnit y2D yUnit
    /n n 1 sub def
  } repeat
} def
%
% the angle in the parameter equation for an ellipse is not proportional to the real angle!
% phi=atan(b*tan(angle)/a)+floor(angle/180+0.5)*180
%
/getPhi { % on stack: vecA vecB angle 
  3 dict begin
  /angle exch def /vecB exch def /vecA exch def
  angle cvi 90 mod 0 eq { angle } { vecA angle tan mul vecB atan 
  angle 180 div .5 add floor 180 mul add } ifelse 
  end
} def
%
/RotSet (set ) def
%
/eulerRotation false def
% Matrix multiplication procedure
/matmul {

  /M@tMulDict 20 dict def
  M@tMulDict begin
  /m2 ED
  /m1 ED
  m1 dup length 2 sub 2 getinterval aload pop
  /col1max ED
  /row1max ED
  m2 dup length 2 sub 2 getinterval aload pop
  /col2max ED
  /row2max ED
  /m3 row1max col2max mul 2 add array def
  m3 dup length 2 sub row1max col2max 2 array astore putinterval
  0 1 row1max 1 sub {
   /row ED
   0 1 col2max 1 sub {
    /col ED
    /sum 0 def
    0 1 col1max 1 sub{
    /rowcol ED
    sum
    m1 row col1max mul rowcol add get
    m2 rowcol col2max mul col add get
    mul add 
    /sum ED
    } for
    m3 row col2max mul col add sum put
   } for
  } for
  m3
  end % end of M@tMulDict

} def
%
/SetMQuaternion {

  /MnewTOold 11 array def

  /Qu@ternionDict 30 dict def
  Qu@ternionDict begin

  /normRotVec  xRotVec yRotVec zRotVec 3 array astore VecNorm  def
  normRotVec 0 gt
  {/xRotVecNorm xRotVec normRotVec div def
   /yRotVecNorm yRotVec normRotVec div def
   /zRotVecNorm zRotVec normRotVec div def
   RotAngle}
  {/xRotVecNorm 1 def
   /yRotVecNorm 0 def
   /zRotVecNorm 0 def 
   0} ifelse

  2 div dup
  /q0 exch cos def
      sin dup dup
  /q1 exch xRotVecNorm mul def
  /q2 exch yRotVecNorm mul def
  /q3 exch zRotVecNorm mul def

  /q0q0 q0 q0 mul def
  /q0q1 q0 q1 mul def
  /q0q2 q0 q2 mul def
  /q0q3 q0 q3 mul def

  /q1q1 q1 q1 mul def
  /q1q2 q1 q2 mul def
  /q1q3 q1 q3 mul def

  /q2q2 q2 q2 mul def
  /q2q3 q2 q3 mul def

  /q3q3 q3 q3 mul def

  MnewTOold 0 q0q0 q1q1 add q2q2 sub q3q3 sub put
  MnewTOold 1 q1q2 q0q3 sub 2 mul put
  MnewTOold 2 q1q3 q0q2 add 2 mul put

  MnewTOold 3 q1q2 q0q3 add 2 mul put
  MnewTOold 4 q0q0 q1q1 sub q2q2 add q3q3 sub put
  MnewTOold 5 q2q3 q0q1 sub 2 mul put

  MnewTOold 6 q1q3 q0q2 sub 2 mul put
  MnewTOold 7 q2q3 q0q1 add 2 mul put
  MnewTOold 8 q0q0 q1q1 sub q2q2 sub q3q3 add put

  MnewTOold 9 3 put
  MnewTOold 10 3 put

  end % end of Qu@ternionDict

} def
%
/SetMxyz {
  1.0 0.0 0.0  0.0 1.0 0.0  0.0 0.0 1.0  3 3  11 array astore /MnewTOold ED
  RotSequence cvx exec % Now create a new MnewTOold using xyz, etc.
} def
%
/ConcatMQuaternion {
  MnewTOold % Push onto stack
  SetMQuaternion % Uses [xyz]RotVec and RotAngle to make MnewToOld 
  MnewTOold matmul /MnewTOold ED
} def
%
/ConcatMxyz {
  MnewTOold % Push onto stack
  SetMxyz % Uses RotX, etc. to set MnewTOold 
  MnewTOold matmul /MnewTOold ED
} def
%
/RotatePoint{
  MnewTOold x y z  3 1  5 array astore matmul
  0 3 getinterval aload pop 
  /z ED 
  /y ED 
  /x ED 
} def
%
/makeMoldTOnew {
  /MoldTOnew 11 array def
  MoldTOnew 0 MnewTOold 0 get put
  MoldTOnew 1 MnewTOold 3 get put
  MoldTOnew 2 MnewTOold 6 get put
  MoldTOnew 3 MnewTOold 1 get put
  MoldTOnew 4 MnewTOold 4 get put
  MoldTOnew 5 MnewTOold 7 get put
  MoldTOnew 6 MnewTOold 2 get put
  MoldTOnew 7 MnewTOold 5 get put
  MoldTOnew 8 MnewTOold 8 get put
  MoldTOnew 9               3 put
  MoldTOnew 10              3 put
} def
%
/RotXaxis { 
  eulerRotation 
  {1 0 0}
  {makeMoldTOnew MoldTOnew  1 0 0  3 1  5 array astore matmul
   0 3 getinterval aload pop} ifelse
  /zRotVec ED
  /yRotVec ED
  /xRotVec ED
  /RotAngle RotX def
  ConcatMQuaternion
} def
/RotYaxis { 
  eulerRotation 
  {0 1 0}
  {makeMoldTOnew MoldTOnew  0 1 0  3 1  5 array astore matmul
   0 3 getinterval aload pop} ifelse
  /zRotVec ED
  /yRotVec ED
  /xRotVec ED
  /RotAngle RotY def
  ConcatMQuaternion
} def
/RotZaxis { 
  eulerRotation 
  {0 0 1}
  {makeMoldTOnew MoldTOnew  0 0 1  3 1  5 array astore matmul
   0 3 getinterval aload pop} ifelse
  /zRotVec ED
  /yRotVec ED
  /xRotVec ED
  /RotAngle RotZ def
  ConcatMQuaternion
} def
/xyz { RotXaxis RotYaxis RotZaxis } def
/yxz { RotYaxis RotXaxis RotZaxis } def
/yzx { RotYaxis RotZaxis RotXaxis } def
/xzy { RotXaxis RotZaxis RotYaxis } def
/zxy { RotZaxis RotXaxis RotYaxis } def
/zyx { RotZaxis RotYaxis RotXaxis } def
/quaternion { } def % Null
%
/VecNorm { 0 exch { dup mul add } forall sqrt } def
%
/UnitVec {			% on stack is [a]; returns a vector with [a][a]/|a|=1 
  dup VecNorm /norm ED
  norm 0 lt {/norm 0 def} if
  { norm div } forall 3 array astore } def
%
/AxB {				% on the stack are the two vectors [a][b]
    aload pop /b3 ED /b2 ED /b1 ED
    aload pop /a3 ED /a2 ED /a1 ED
    a2 b3 mul a3 b2 mul sub
    a3 b1 mul a1 b3 mul sub
    a1 b2 mul a2 b1 mul sub
    3 array astore } def
%
/AaddB {			% on the stack are the two vectors [a][b]
    aload pop /b3 ED /b2 ED /b1 ED
    aload pop /a3 ED /a2 ED /a1 ED
    a1 b1 add a2 b2 add a3 b3 add
    3 array astore } def
%
/AmulC {			% on stack is [a] and c; returns [a] mul c
    /factor ED { factor mul } forall 3 array astore } def
%
%
/setColorLight { % expects 7 values on stack C M Y K xL yL zL
% les rayons de lumi�re
  xLight dup mul yLight dup mul zLight dup mul add add sqrt /NormeLight ED
% the color values
  /K ED
  /Yellow ED
  /Magenta ED
  /Cyan ED
} def
%
/facetteSphere {
  newpath
  /Xpoint Rsphere theta cos mul phi cos mul CX add def
  /Ypoint Rsphere theta sin mul phi cos mul CY add def
  /Zpoint Rsphere phi sin mul CZ add def
  Xpoint Ypoint Zpoint tx@3Ddict begin ProjThreeD end moveto
  theta 1 theta increment add {%
    /theta1 ED
    /Xpoint Rsphere theta1 cos mul phi cos mul CX add def
    /Ypoint Rsphere theta1 sin mul phi cos mul CY add def
    /Zpoint Rsphere phi sin mul CZ add def
    Xpoint Ypoint Zpoint tx@3Ddict begin ProjThreeD end  lineto
  } for
  phi 1 phi increment add {
    /phi1 ED
    /Xpoint Rsphere theta increment add cos mul phi1 cos mul CX add def
    /Ypoint Rsphere theta increment add sin mul phi1 cos mul CY add def
    /Zpoint Rsphere phi1 sin mul CZ add def
    Xpoint Ypoint Zpoint tx@3Ddict begin ProjThreeD end lineto
  } for
  theta increment add -1 theta {%
    /theta1 ED
    /Xpoint Rsphere theta1 cos mul phi increment add cos mul CX add def
    /Ypoint Rsphere theta1 sin mul phi increment add cos mul CY add def
    /Zpoint Rsphere phi increment add sin mul CZ add def
    Xpoint Ypoint Zpoint tx@3Ddict begin ProjThreeD end lineto
  } for
  phi increment add -1 phi {
    /phi1 ED
    /Xpoint Rsphere theta cos mul phi1 cos mul CX add def
    /Ypoint Rsphere theta sin mul phi1 cos mul CY add def
    /Zpoint Rsphere phi1 sin mul CZ add def
    Xpoint Ypoint Zpoint tx@3Ddict begin ProjThreeD end lineto
  } for
  closepath 
} def
%
/MaillageSphere { 
% on stack must be x y z Radius increment C M Y K 
  setColorLight
  /increment ED
  /Rsphere ED
  /CZ ED
  /CY ED
  /CX ED
  /StartTheta 0 def
  /condition { PSfacetteSphere 0 ge } def
  -90 increment 90 increment sub {%
    /phi ED
    StartTheta increment 360 StartTheta add increment sub {%
      /theta ED
      % Centre de la facette
      /Xpoint Rsphere theta increment 2 div add cos mul phi increment 2 div add cos mul CX add def
      /Ypoint Rsphere theta increment 2 div add sin mul phi increment 2 div add cos mul CY add def
      /Zpoint Rsphere phi increment 2 div add sin mul CZ add def
      % normale a la facette
      /nXfacette Xpoint CX sub def
      /nYfacette Ypoint CY sub def
      /nZfacette Zpoint CZ sub def
      % test de visibilite
      /PSfacetteSphere 
        vX nXfacette mul
        vY nYfacette mul add
        vZ nZfacette mul add
      def
      condition {
        gsave
        facetteSphere
        /cosV { 1 xLight nXfacette mul
          yLight nYfacette mul
          zLight nZfacette mul
          add add
          NormeLight
          nXfacette dup mul
          nYfacette dup mul
          nZfacette dup mul
          add add sqrt mul div sub } bind def
        Cyan cosV mul Magenta cosV mul Yellow cosV mul K cosV mul setcmykcolor fill 
	grestore
%	0 setgray
        showgrid { facetteSphere stroke } if
      } if 
    } for
    % /StartTheta StartTheta increment 2 div add def
  } for
} def
%
%---------------------- Cylinder ---------------------------
%
/PlanCoupeCylinder { %
  /TableauxPoints [
    0 1 359 { 
      /phi ED 
      [ Radius phi Height ConvCyl2d ] % on décrit le cercle
    } for
  ] def
  newpath
  TableauxPoints 0 get aload pop moveto
  1 1 359 { TableauxPoints exch get aload pop lineto } for
  closepath
} def
%
/facetteCylinder { % 
    newpath
    Radius phi currentHeight ConvCyl2d moveto
    phi 1 phi dAngle add  { % loop variable on stack
      Radius exch currentHeight ConvCyl2d lineto        
    } for
    phi dAngle add -1 phi { %	fill dHeight
      Radius exch currentHeight dHeight add ConvCyl2d lineto 
    } for
    closepath
  } def % facette
%
/MaillageCylinder { % on stack true or false for saving values
    { setColorLight  % expects 4 values on stack C M Y K
      /dHeight ED /dAngle ED /Height ED /Radius ED
      /CZ ED /CY ED /CX ED } if
%     
    0 dHeight Height dHeight sub {
      /currentHeight ED
      0 dAngle 360 dAngle sub {
        /phi ED
% Normal vector of the center
        /nXfacetteCylinder Radius phi dAngle 2 div add cos mul CX add def 
        /nYfacetteCylinder Radius phi dAngle 2 div add sin mul CY add def 
        /nZfacetteCylinder currentHeight dHeight 2 div add CZ add def 
        /NormeN 
          nXfacetteCylinder dup mul
          nYfacetteCylinder dup mul
          nZfacetteCylinder dup mul
          add add sqrt def
        NormeN 0 eq { /NormeN 1e-10 def } if
% test de visibilité
       /PSfacetteCylinder 
    	    vX nXfacetteCylinder mul
            vY nYfacetteCylinder mul add
            vZ nZfacetteCylinder mul add def
       condition {
         facetteCylinder
         /cosV 
	   1 xLight nXfacetteCylinder mul
           yLight nYfacetteCylinder mul
           zLight nZfacetteCylinder mul
           add add
	   NormeLight NormeN mul div sub def
         Cyan Magenta Yellow K
         cosV mul 4 1 roll cosV mul 4 1 roll 
	 cosV dup mul mul 4 1 roll cosV dup mul mul 4 1 roll
         setcmykcolor fill
          showgrid { 
            0 setgray
            facetteCylinder % drawing the segments
            stroke } if
       } if
     } for
    } for
} def
%
%------------------------ Cylinder type II -----------------------
%
/MoveTo { Conv3D2D moveto } def
/LineTo { Conv3D2D lineto } def

/IIIDEllipse { % x y z rA rB startAngle endAngle Wedge
  /dAngle 1 def
  /isWedge ED
  /endAngle ED
  /startAngle ED
  /radiusB ED
  /radiusA ED
  startAngle cos radiusA mul startAngle sin radiusB mul 0 
  isWedge { 0 0 moveto LineTo }{ MoveTo } ifelse
  /Angle startAngle def
  startAngle dAngle endAngle {
    /Angle ED
    Angle cos radiusA mul Angle sin radiusB mul 0 LineTo  
  } for
  isWedge { 0 0 lineto } if
} def

/IIIDCircle { % x y z r startAngle endAngle Wedge
  7 3 roll % startAngle endAngle Wedge x y z r
  dup      % startAngle endAngle Wedge x y z r r
  8 -3 roll
  IIIDEllipse 
} def

/IIIDWedge { % x y z r startAngle endAngle
  true IIIDCircle
} def

/IIIDCylinder {% x y z r h start end wedge
  /isWedge ED
  /increment ED
  /endAngle ED
  /startAngle ED
  /height ED
  /radius ED
  startAngle increment endAngle {
    /Angle ED
    radius Angle 0 ConvCylToCartesian MoveTo  
    radius Angle height ConvCylToCartesian LineTo  
  } for
  stroke
} def
%
%---------------------- Box ---------------------------
%
/PlanCoupeBox { % x y z
  /TableauxPoints [
      [ CX CY CZ Height add ConvBox2d ] % top or bottom
      [ CX CY Depth add CZ Height add ConvBox2d ]
      [ CX Width add CY Depth add CZ Height add ConvBox2d ] 
      [ CX Width add CY CZ Height add ConvBox2d ] 
      [ CX CY CZ Height add ConvBox2d ] % bottom
    ] def
    newpath
    TableauxPoints 0 get aload pop moveto
    0 1 3 {
      TableauxPoints exch get aload pop
      lineto } for
    closepath
} def
%
/facetteBox { % 
    newpath
    dup
    1 eq { % back
      CX CY CZ ConvBox2d moveto
      CX CY CZ Height add ConvBox2d lineto
      CX Width add CY CZ Height add ConvBox2d lineto
      CX Width add CY CZ ConvBox2d lineto
      CX CY CZ ConvBox2d lineto
    } if
    dup
    2 eq { % right
      CX CY CZ ConvBox2d moveto
      CX CY CZ Height add ConvBox2d lineto
      CX CY Depth add CZ Height add ConvBox2d lineto
      CX CY Depth add CZ ConvBox2d lineto
      CX CY CZ ConvBox2d lineto
    } if
    dup
    3 eq { % left
      CX Width add CY CZ ConvBox2d moveto
      CX Width add CY Depth add CZ ConvBox2d lineto
      CX Width add CY Depth add CZ Height add ConvBox2d lineto
      CX Width add CY CZ Height add ConvBox2d lineto
      CX Width add CY CZ ConvBox2d lineto
    } if
    4 eq { % front
      CX CY Depth add CZ ConvBox2d moveto
      CX CY Depth add CZ Height add ConvBox2d lineto
      CX Width add CY Depth add CZ Height add ConvBox2d lineto
      CX Width add CY Depth add CZ ConvBox2d lineto
      CX CY Depth add CZ ConvBox2d lineto
    } if
    closepath
  } def % facette
%
/TestPlane { % on stack x y z of the plane center and # of plane
  /nZfacetteBox ED /nYfacetteBox ED /nXfacetteBox ED
  /Plane ED
  /NormeN 
    nXfacetteBox dup mul
    nYfacetteBox dup mul
    nZfacetteBox dup mul
    add add sqrt def
  NormeN 0 eq { /NormeN 1e-10 def } if
% test de visibilite
  /PSfacetteBox 
    vX nXfacetteBox mul
    vY nYfacetteBox mul add
    vZ nZfacetteBox mul add def
  condition {
    Plane facetteBox
         /cosV 
	   1 xLight nXfacetteBox mul
           yLight nYfacetteBox mul
           zLight nZfacetteBox mul
           add add
	   NormeLight NormeN mul div sub def
         Cyan Magenta Yellow K
         cosV mul 4 1 roll cosV mul 4 1 roll 
	 cosV dup mul mul 4 1 roll cosV dup mul mul 4 1 roll
         setcmykcolor fill
         0 setgray
         Plane facetteBox % drawing the segments
         stroke
       } if
} def
%
/MaillageBox { % on stack true or false for saving values
    { setColorLight  % expects 4 values on stack C M Y K 
      /Depth ED /Height ED /Width ED
      /CZ ED /CY ED /CX ED } if
%
% Normal vector of the box center
  /PlaneSet [
    [ Width 2 div CX add 
      CY 
      Height 2 div CZ add ] % normal back
    [ CX 
      Depth 2 div CY add 
      Height 2 div CZ add ] % normal right
    [ Width CX add 
      Depth 2 div CY add 
      Height 2 div CZ add ] % normal left
    [ Width 2 div CX add 
      Depth CY add 
      Height 2 div CZ add ] % normal front
  ] def
  PlaneSequence length 0 eq { % user defined?
    Alpha abs cvi 360 mod /iAlpha ED
    iAlpha 90 lt { [ 1 2 3 4 ]  
      }{ iAlpha 180 lt { [ 2 4 1 3 ]  
        }{ iAlpha 270 lt { [ 3 4 1 2 ] }{ [ 3 1 4 2] } ifelse } ifelse } ifelse 
  }{ PlaneSequence } ifelse 
  { dup 1 sub PlaneSet exch get aload pop TestPlane } forall
} def
%
%--------------------------- Paraboloid -----------------------------
/PlanCoupeParaboloid {
    /Z height store
    /V {Z sqrt} bind def
    /TableauxPoints [
      0 1 359 { 
        /U ED [ U U Z V calculate2DPoint ] % on decrit le cercle
      } for
    ] def
    newpath
    TableauxPoints 0 get aload pop moveto
    0 1 359 {
      /compteur ED
      TableauxPoints compteur get aload pop
      lineto } for
    closepath
} def
%
/facetteParaboloid{
    newpath
    U U Z V calculate2DPoint moveto
    U 1 U increment add  {%
      /U1 ED
      U1 U1 Z V calculate2DPoint lineto
    } for
    Z pas10 Z pas add pas10 add{
      /Z1 ED
      /V {Z1 sqrt} bind def
      U1 U1 Z1 V calculate2DPoint lineto
    } for
    U increment add -1 U {%
      /U2 ED
      U2 U2 Z pas add V calculate2DPoint lineto
    } for
    Z pas add pas10 sub pas10 neg Z pas10 sub {
      /Z2 ED
      /V Z2 abs sqrt def
      U U Z2 V calculate2DPoint lineto
    } for
    closepath
} def % facette
%
/MaillageParaboloid {
  % on stack true or false for saving values
    { setColorLight  % expects 7 values on stack C M Y K xL yL zL 
%      /CZ ED /CY ED /CX ED 
    } if    
    0 pas height pas sub {%
      /Z ED
      /V Z sqrt def
      0 increment 360 increment sub {%
        /U ED
% Centre de la facette
        /Ucentre U increment 2 div add def
        /Vcentre Z pas 2 div add sqrt def
% normale à la facette
        /nXfacetteParaboloid 2 Vcentre dup mul mul Ucentre cos mul radius mul def
        /nYfacetteParaboloid 2 Vcentre dup mul mul Ucentre sin mul radius mul def
        /nZfacetteParaboloid Vcentre neg radius dup mul mul def
        /NormeN {
          nXfacetteParaboloid dup mul
          nYfacetteParaboloid dup mul
          nZfacetteParaboloid dup mul
          add add sqrt} bind def
        NormeN 0 eq {/NormeN 1e-10 def} if
% test de visibilit�
       /PSfacetteParaboloid vX nXfacetteParaboloid mul
                  vY nYfacetteParaboloid mul add
                  vZ nZfacetteParaboloid mul add def
       condition {
         facetteParaboloid
         /cosV 1 xLight nXfacetteParaboloid mul
           yLight nYfacetteParaboloid mul
           zLight nZfacetteParaboloid mul
           add add
           NormeLight
           NormeN mul div sub def
         Cyan Magenta Yellow K  
         cosV mul 4 1 roll cosV mul 4 1 roll cosV dup mul mul 4 1 roll cosV dup mul mul 4 1 roll
         setcmykcolor fill
         showgrid {
           0 setgray
           facetteParaboloid
           stroke } if
       } if
     } for
    } for
} def
%
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
% u -> e_u with |e_u|=1 
/vector-unit { 1 dict begin
  dup vector-length 1 exch div 
  vector-scale
  end 
} def
%
% u v -> u+v
/vector-add { 1 dict begin
  /v exch def
  [ exch
  0 	     	% u i
  exch { 	% i u[i]
    v 		% i u[i] v
    2 index get add 	% i u[i]+v[i]
    exch 1 add	% i
  } forall
  pop
  ]
  end 
} def
%
% u v -> u-v
/vector-sub { 1 dict begin
  /v exch def
  [ exch
  0 	     	% u i
  exch {	% i u[i]
    v 		% i u[i] v
    2 index get sub 	% i u[i]+v[i]
    exch 1 add	% i
  } forall
  pop
  ]
end } def
%
% [v] c -> [c.v]
/vector-scale { 1 dict begin
  /c exch def
  [ exch
  { 		% s i u[i]
    c mul	% s i u[i] v 
  } forall
  ]
  end } def
%
%
% [u] [v] -> [u x v]
/vector-prod { %% x1 y1 z1 x2 y2 z2
6 dict begin
  aload pop 
  /zp exch def /yp exch def /xp exch def
  aload pop 
  /z exch def /y exch def /x exch def
  [ y zp mul z yp mul sub
   z xp mul x zp mul sub
   x yp mul y xp mul sub ]
end
} def
%
% [u] [v] -> u.v
/vector-mul { %% x1 y1 z1 x2 y2 z2
6 dict begin
  aload pop 
  /zp exch def /yp exch def /xp exch def
  aload pop 
  /z exch def /y exch def /x exch def
  x xp mul y yp mul add z zp mul add
end
} def
%
% [x y z ... ] -> r
% watch out for overflow
/vector-length { 1 dict begin
dup
% find maximum entry
/max 0 def
{ % max 
  abs dup max gt {
    % if abs gt max
    /max exch def
  } {
    pop
  } ifelse
} forall
max 0 ne {
  0 exch 
  {  % 0 v[i]
    max div dup mul add
  } forall
  sqrt
  max mul
} {
  pop 0
} ifelse
end } def
%
end % tx@3DPlotDict
%

%%EndProcSet
%%BeginProcSet: pst-ode.pro 0 0
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% PostScript prologue for pst-ode.tex.
% Version 0.18, 2022/11/24
%
% Alexander Grahn (C) 2012--today
%
% This program can be redistributed and/or modified under the terms
% of the LaTeX Project Public License
%
% http://www.latex-project.org/lppl.txt
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/tx@odeDict 1 dict def
tx@odeDict begin
/ode@@dict 1 dict def
/ode@dict {ode@@dict begin} bind def
ode@dict
  %some constants for step size calculation
  /sfty 0.9 def /pgrow -0.2 def /pshrink -0.25 def
  %helper functions
  /addvect { % [1 2 3] [4 5 6] addvect => [5 7 9]
    ode@dict
      aload pop xlength1 -1 roll {xlength1 -1 roll add} forall
      xlength array astore
    end
  } bind def
  /subvect { % [1 2 3] [4 5 6] subvect => [-3 -3 -3]
    ode@dict
      aload pop xlength1 -1 roll {xlength1 -1 roll sub} forall
      xlength array astore
    end
  } bind def
  /mulvect { % [1 2 3] 4 mulvect => [4 8 12]
    ode@dict /mul cvx 2 array astore cvx forall xlength array astore end
  } bind def
  /edivvect { % [1 2 3] [4 5 6] edivvect => [0.25 0.4 0.5]
    ode@dict
      aload pop xlength1 -1 roll {xlength1 -1 roll div} forall
      xlength array astore
    end
  } bind def
  /eabsvect { % [-1 2 -3] eabsvect => [1 2 3]
    ode@dict {abs} forall xlength array astore end
  } bind def
  %/revstack { % (a) (b) (c) (d) 3 revstack => (a) (d) (c) (b)
  %  -1 2 {dup 1 sub neg roll} for
  %} bind def
  /min { 2 copy gt { exch } if pop } bind def
  /max { 2 copy lt { exch } if pop } bind def
  %coefficient table (Butcher table) of RKF45
  /c2 1 4 div def /c3 3 8 div def /c4 12 13 div def /c6 1 2 div def
  /a21 1 4 div def /a31 3 32 div def /a32 9 32 div def
  /a41 1932 2197 div def /a42 7200 2197 div neg def /a43 7296 2197 div def
  /a51 439 216 div def /a52 8 neg def /a53 3680 513 div def
  /a54 845 4104 div neg def /a61 8 27 div neg def /a62 2 def
  /a63 3544 2565 div neg def /a64 1859 4104 div def /a65 11 40 div neg def
  /b1 16 135 div def /b3 6656 12825 div def
  /b4 28561 56430 div def /b5 9 50 div neg def
  /b6 2 55 div def
  /b1* 25 216 div def /b3* 1408 2565 div def
  /b4* 2197 4104 div def /b5* 1 5 div neg def
end
%Runge-Kutta-Fehlberg (RKF45) method
%performs one integration step over tentative step size ddt
%[state vector x(t)] RKF45 => [x(t)] [x(t+ddt) by RKF4] errmax
/RKF45 {
  dup
  ode@dict tcur end /t exch def
  ODESET
  ode@dict
    ddt mulvect /k1 exch def
    dup k1 a21 mulvect addvect
    tcur ddt c2 mul add
  end
  /t exch def
  ODESET
  ode@dict
    ddt mulvect /k2 exch def
    dup k1 a31 mulvect addvect k2 a32 mulvect addvect
    tcur ddt c3 mul add
  end
  /t exch def
  ODESET
  ode@dict
    ddt mulvect /k3 exch def
    dup k1 a41 mulvect addvect k2 a42 mulvect addvect k3 a43 mulvect addvect
    tcur ddt c4 mul add
  end
  /t exch def
  ODESET
  ode@dict
    ddt mulvect /k4 exch def
    dup k1 a51 mulvect addvect k2 a52 mulvect addvect k3 a53 mulvect addvect
    k4 a54 mulvect addvect
    tcur ddt add
  end
  /t exch def
  ODESET
  ode@dict
    ddt mulvect /k5 exch def
    dup k1 a61 mulvect addvect k2 a62 mulvect addvect k3 a63 mulvect addvect
    k4 a64 mulvect addvect k5 a65 mulvect addvect
    tcur ddt c6 mul add
  end
  /t exch def
  ODESET
  ode@dict
    ddt mulvect /k6 exch def % => [x(t)]
    %fourth order solution (increment dx)
    dup dup k1 b1* mulvect k3 b3* mulvect addvect k4 b4* mulvect addvect
      k5 b5* mulvect addvect dup
      % => [x(t)] [x(t)] [x(t)] [dx by RKF4] [dx by RKF4]
    %fifth order solution (abs. error)
    k1 b1 mulvect k3 b3 mulvect addvect k4 b4 mulvect addvect
      k5 b5 mulvect addvect k6 b6 mulvect addvect subvect
      % => [x(t)] [x(t)] [x(t)] [dx by RKF4] [err]
    5 1 roll addvect 4 -2 roll % => [x(t)] [x(t+ddt) by RKF4] [err] [x(t)]
    %scaling vector for step size adjustment (Numerical Recipies)
    eabsvect k1 eabsvect addvect {1e-30 add} forall xlength array astore
    % => [x(t)] [x(t+ddt) by RKF4] [err] [xscale]
    edivvect eabsvect 1e-30 exch {max} forall %maximum rel. error
    % => [x(t)] [x(t+ddt) by RKF4] errmax
  end
} bind def
%classical Runge-Kutta (RK4) method
%one integration step over step size ddt; no error estimate
%[state vector x(t)] RK4 => [x(t+ddt) by RK4]
/RK4 {
  dup
  ode@dict tcur end /t exch def
  ODESET
  ode@dict
    ddt mulvect /k1 exch def
    dup k1 0.5 mulvect addvect
    tcur ddt 2 div add
  end
  /t exch def
  ODESET
  ode@dict
    ddt mulvect /k2 exch def
    dup k2 0.5 mulvect addvect
  end
  ODESET
  ode@dict
    ddt mulvect /k3 exch def
    dup k3 addvect
    tcur ddt add
  end
  /t exch def
  ODESET
  ode@dict
    ddt mulvect /k4 exch def % => [x(t)]
    k1 k2 k3 addvect 2 mulvect addvect k4 addvect 1 6 div mulvect addvect
    % => [x(t+ddt) by RK4]
  end
} bind def
/ODEINT { % performs integration over output step [t,t+dt]
          % [ state vector x(t) ] ODEINT => [ state vector x(t+dt) ]
  rk4 {
    RK4 (o) odeprint
    ode@dict
      /tcur tout def
      /outStepCnt outStepCnt 1 add def
      /tout tStart dt outStepCnt mul add def
    end
  }{
    %decrease overshooting step size
    ode@dict
      tout tcur sub dup abs ddt abs lt {/ddt exch def}{pop} ifelse
    end
    RKF45
    ode@tol div dup 1 gt {
      %failed step -> reduce step size
      ode@dict
        exch pop pshrink exp 0.1 max sfty mul ddt mul /ddt exch def
        ode@dict tcur ddt add tcur end eq {
          % error: step size underflow in ODEINT
          (! t=) odeprint tcur odeprint
          % print & remove previous state vector
          (, x=[) odeprint /ode@spc () def
          {ode@spc odeprint /ode@spc ( ) def odeprint} forall (]) odeprint
          true
        }{
          (-) odeprint
          false
        } ifelse
      end
      % on step size underflow, leave loop over output steps (pst-ode.tex)
      {exit} if
      ODEINT %repeat step with new ddt
    }{
      %success
      3 -1 roll pop % remove previous state vector
      ode@dict
        /tcur tcur ddt add def
        dup 0 ne {pgrow exp 5 min sfty mul ddt mul /ddt exch def}{pop} ifelse
        %output step completed?
        tcur tout sub
      end
      0 eq {
        (o) odeprint
        ode@dict
          /tcur tout def
          /outStepCnt outStepCnt 1 add def
          /tout tStart dt outStepCnt mul add def
        end
      }{
        (+) odeprint ODEINT %continue integration
      } ifelse
    } ifelse
  } ifelse
} bind def
/writeresult { %write output vector to file
  /loopproc load forall
  statefile (\n) writestring
} bind def
/loopproc {
  0 cvs statefile exch writestring
  statefile ( ) writestring
} bind def
/loopproc load 0 256 string put
/assembleresult { %assembles state vector for building table of results
  {
    dup (t) eq {
      pop ode@dict tcur end
    }{
      ode@laststate exch get
    } ifelse
  } forall
} bind def
end

%%EndProcSet
%%BeginProcSet: l3backend-dvips.pro 0 0
%%
%% This is file `l3backend-dvips.pro',
%% generated with the docstrip utility.
%%
%% The original source files were:
%%
%% l3backend-header.dtx  (with options: `header,dvips')
%% 
%% Copyright (C) 2019-2023 The LaTeX Project
%% 
%% It may be distributed and/or modified under the conditions of
%% the LaTeX Project Public License (LPPL), either version 1.3c of
%% this license or (at your option) any later version.  The latest
%% version of this license is in the file:
%% 
%%    https://www.latex-project.org/lppl.txt
%% 
%% This file is part of the "l3backend bundle" (The Work in LPPL)
%% and all files in that bundle must be distributed together.
%% 
%% File: l3backend-header.dtx
/color.sc { } def
TeXDict begin
/TeXcolorseparation { setcolor } def
end
true setglobal
/pdf.globaldict 4 dict def
false setglobal
/pdf.cvs { 65534 string cvs } def
/pdf.dvi.pt { 72.27 mul Resolution div } def
/pdf.pt.dvi { 72.27 div Resolution mul } def
/pdf.rect.ht { dup 1 get neg exch 3 get add } def
/pdf.linkmargin { 1 pdf.pt.dvi } def
/pdf.linkdp.pad { 0 } def
/pdf.linkht.pad { 0 } def
/pdf.rect
  { /Rect [ pdf.llx pdf.lly pdf.urx pdf.ury ] } def
/pdf.save.ll
  {
    currentpoint
    /pdf.lly exch def
    /pdf.llx exch def
  }
    def
/pdf.save.ur
  {
    currentpoint
    /pdf.ury exch def
    /pdf.urx exch def
  }
    def
/pdf.save.linkll
  {
    currentpoint
    pdf.linkmargin add
    pdf.linkdp.pad add
    /pdf.lly exch def
    pdf.linkmargin sub
    /pdf.llx exch def
  }
    def
/pdf.save.linkur
  {
    currentpoint
    pdf.linkmargin sub
    pdf.linkht.pad sub
    /pdf.ury exch def
    pdf.linkmargin add
    /pdf.urx exch def
  }
    def
/pdf.dest.anchor
  {
    currentpoint exch
    pdf.dvi.pt 72 add
    /pdf.dest.x exch def
    pdf.dvi.pt
    vsize 72 sub exch sub
    /pdf.dest.y exch def
  }
    def
/pdf.dest.point
  { pdf.dest.x pdf.dest.y } def
/pdf.dest2device
  {
    /pdf.dest.y exch def
    /pdf.dest.x exch def
    matrix currentmatrix
    matrix defaultmatrix
    matrix invertmatrix
    matrix concatmatrix
    cvx exec
    /pdf.dev.y exch def
    /pdf.dev.x exch def
    /pdf.tmpd exch def
    /pdf.tmpc exch def
    /pdf.tmpb exch def
    /pdf.tmpa exch def
    pdf.dest.x pdf.tmpa mul
      pdf.dest.y pdf.tmpc mul add
      pdf.dev.x add
    pdf.dest.x pdf.tmpb mul
     pdf.dest.y pdf.tmpd mul add
     pdf.dev.y add
  }
    def
/pdf.bordertracking false def
/pdf.bordertracking.begin
  {
    SDict /pdf.bordertracking true put
    SDict /pdf.leftboundary undef
    SDict /pdf.rightboundary undef
    /a where
      {
        /a
          {
            currentpoint pop
            SDict /pdf.rightboundary known dup
              {
                SDict /pdf.rightboundary get 2 index lt
                  { not }
                if
              }
            if
              { pop }
              { SDict exch /pdf.rightboundary exch put }
            ifelse
            moveto
            currentpoint pop
            SDict /pdf.leftboundary known dup
              {
                SDict /pdf.leftboundary get 2 index gt
                  { not }
                if
              }
            if
              { pop }
              { SDict exch /pdf.leftboundary exch put }
            ifelse
          }
        put
      }
    if
  }
    def
/pdf.bordertracking.end
  {
    /a where { /a { moveto } put } if
    /x where { /x { 0 exch rmoveto } put } if
    SDict /pdf.leftboundary known
      { pdf.outerbox 0 pdf.leftboundary put }
    if
    SDict /pdf.rightboundary known
      { pdf.outerbox 2 pdf.rightboundary put }
    if
    SDict /pdf.bordertracking false put
  }
    def
  /pdf.bordertracking.endpage
{
  pdf.bordertracking
    {
      pdf.bordertracking.end
      true setglobal
      pdf.globaldict
        /pdf.brokenlink.rect [ pdf.outerbox aload pop ] put
      pdf.globaldict
        /pdf.brokenlink.skip pdf.baselineskip put
      pdf.globaldict
        /pdf.brokenlink.dict
          pdf.link.dict pdf.cvs put
      false setglobal
      mark pdf.link.dict cvx exec /Rect
        [
          pdf.llx
          pdf.lly
          pdf.outerbox 2 get pdf.linkmargin add
          currentpoint exch pop
          pdf.outerbox pdf.rect.ht sub pdf.linkmargin sub
        ]
      /ANN pdf.pdfmark
    }
  if
}
  def
/pdf.bordertracking.continue
  {
    /pdf.link.dict pdf.globaldict
      /pdf.brokenlink.dict get def
    /pdf.outerbox pdf.globaldict
      /pdf.brokenlink.rect get def
    /pdf.baselineskip pdf.globaldict
      /pdf.brokenlink.skip get def
    pdf.globaldict dup dup
    /pdf.brokenlink.dict undef
    /pdf.brokenlink.skip undef
    /pdf.brokenlink.rect undef
    currentpoint
    /pdf.originy exch def
    /pdf.originx exch def
    /a where
      {
        /a
          {
            moveto
            SDict
            begin
            currentpoint pdf.originy ne exch
              pdf.originx ne or
              {
                pdf.save.linkll
                /pdf.lly
                  pdf.lly pdf.outerbox 1 get sub def
                pdf.bordertracking.begin
              }
            if
            end
          }
        put
      }
    if
    /x where
      {
        /x
          {
            0 exch rmoveto
            SDict
            begin
            currentpoint
            pdf.originy ne exch pdf.originx ne or
              {
                pdf.save.linkll
                /pdf.lly
                  pdf.lly pdf.outerbox 1 get sub def
                pdf.bordertracking.begin
              }
            if
            end
          }
        put
      }
    if
  }
    def
/pdf.breaklink
  {
    pop
    counttomark 2 mod 0 eq
      {
        counttomark /pdf.count exch def
          {
           pdf.count 0 eq { exit } if
           counttomark 2 roll
           1 index /Rect eq
             {
               dup 4 array copy
               dup dup
                 1 get
                 pdf.outerbox pdf.rect.ht
                 pdf.linkmargin 2 mul add sub
                 3 exch put
               dup
                 pdf.outerbox 2 get
                 pdf.linkmargin add
                 2 exch put
               dup dup
                 3 get
                 pdf.outerbox pdf.rect.ht
                 pdf.linkmargin 2 mul add add
                 1 exch put
               /pdf.currentrect exch  def
               pdf.breaklink.write
                 {
                   pdf.currentrect
                   dup
                     pdf.outerbox 0 get
                     pdf.linkmargin sub
                     0 exch put
                   dup
                     pdf.outerbox 2 get
                     pdf.linkmargin add
                     2 exch put
                   dup dup
                     1 get
                     pdf.baselineskip add
                     1 exch put
                   dup dup
                     3 get
                     pdf.baselineskip add
                     3 exch put
                   /pdf.currentrect exch def
                   pdf.breaklink.write
                  }
                1 index 3 get
                pdf.linkmargin 2 mul add
                pdf.outerbox pdf.rect.ht add
                2 index 1 get sub
                pdf.baselineskip div round cvi 1 sub
                exch
              repeat
              pdf.currentrect
              dup
                pdf.outerbox 0 get
                pdf.linkmargin sub
                0 exch put
              dup dup
                1 get
                pdf.baselineskip add
                1 exch put
              dup dup
                3 get
                pdf.baselineskip add
                3 exch put
              dup 2 index 2 get  2 exch put
              /pdf.currentrect exch def
              pdf.breaklink.write
              SDict /pdf.pdfmark.good false put
              exit
            }
            { pdf.count 2 sub /pdf.count exch def }
          ifelse
        }
      loop
    }
  if
  /ANN
}
  def
/pdf.breaklink.write
  {
    counttomark 1 sub
    index /_objdef eq
      {
        counttomark -2 roll
        dup wcheck
          {
            readonly
            counttomark 2 roll
          }
          { pop pop }
        ifelse
      }
    if
    counttomark 1 add copy
    pop pdf.currentrect
    /ANN pdfmark
  }
    def
/pdf.pdfmark
  {
    SDict /pdf.pdfmark.good true put
    dup /ANN eq
      {
        pdf.pdfmark.store
        pdf.pdfmark.dict
          begin
            Subtype /Link eq
            currentdict /Rect known and
            SDict /pdf.outerbox known and
            SDict /pdf.baselineskip known and
              {
                Rect 3 get
                pdf.linkmargin 2 mul add
                pdf.outerbox pdf.rect.ht add
                Rect 1 get sub
                pdf.baselineskip div round cvi 0 gt
                  { pdf.breaklink }
                if
              }
            if
          end
        SDict /pdf.outerbox undef
        SDict /pdf.baselineskip undef
        currentdict /pdf.pdfmark.dict undef
      }
    if
    pdf.pdfmark.good
      { pdfmark }
      { cleartomark }
    ifelse
  }
    def
/pdf.pdfmark.store
  {
    /pdf.pdfmark.dict 65534 dict def
    counttomark 1 add copy
    pop
      {
        dup mark eq
          {
            pop
            exit
          }
          {
            pdf.pdfmark.dict
            begin def end
          }
        ifelse
      }
    loop
}
  def
%% 
%%
%% End of file `l3backend-dvips.pro'.

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 systemdict /pdfmark known{userdict /?pdfmark systemdict /exec get
put}{userdict /?pdfmark systemdict /pop get put userdict /pdfmark systemdict
/cleartomark get put}ifelse

 /pbs@user2page {0 begin /y exch def /x exch def matrix currentmatrix
matrix defaultmatrix matrix invertmatrix matrix concatmatrix cvx exec
/ty exch def /tx exch def /d exch def /c exch def /b exch def /a exch
def x a mul y c mul add tx add x b mul y d mul add ty add end} def
/pbs@user2page load 0 1 dict put
 
@fedspecial end
%%BeginFont: CMR10
%!PS-AdobeFont-1.0: CMR10 003.002
%%Title: CMR10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR10 known{/CMR10 findfont dup/UniqueID known{dup
/UniqueID get 5000793 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR10 def
/FontBBox {-40 -250 1009 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR10.) readonly def
/FullName (CMR10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 49 /one put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9B8591E5F01442D8
569672CF86B91C3F79C5DDC97C190EE0082814A5B5A2A5E77C790F087E729079
24A5AC880DDED58334DD5E8DC6A0B2BD4F04B17334A74BF8FF5D88B7B678A04A
2255C050CB39A389106B0C672A1912AFA86A49EFD02E61E6509E50EE35E67944
8FC63D91C3D2794B49A0C2993832BC4CDC8F7BD7575AD61BCDF42E2E421AA93E
3FF9E4FAD980256D8B377043A07FC75D6169338028692CCA8CD1FE92FD60AD26
D57B7519B80A8F8DCE9CEE5CDF720AF268D3C14099498A843D76E3B6C0328F24
D36EFE7F5C4E5B5C612786200C8DE3A41EE5F1FFAF4097653CFCDC8F4FD32E0B
03EDB3E413283B9EFB0AC33B055617005BC9B0057FD68C52D1B0E67F0C571685
767F2AA85ADE4E0104A1C777733D5E318A22A9944336E5B98D965E50D31F357A
8B6EA5A0EA98E1B027CE68C2EDB149EDDD04ED74A1B3D206D471A0C11C11449B
DE190BBFEBC08C9E1B7513B43DA3134D6B11A2516E6E86B67F68C970A320D05E
94FEC57FB347606DF89989C33482BD09D011C55AA920319E7B26A205D3D0F004
22466F09C0482A164CFB27EF6ED2B040ECCC3DCAF345B5A73676F193D43123B7
72FD6CFC5E37930E61EBD5A6307E4DE70194E6384EC0D79DB6AD86D3B319A31C
8B0589D0FE28241D8ACE280D0530EE99C80723E560BB72AE9D53F4713181F491
344B06D3027BA4E9E94D4305BE1D817197C54C8FF56CD6964165F6448ECC8A8A
64B48B4F0FD69299A137589E2491A283509B21A3A5772F75B7602A9F60AE559B
07A58436D04222C73EAEA72DE9A5A441F88D27C11F4F91255EFE280E91A4ACAC
1E98A4E5E6C57B9AE86FD218C3CD8F24A4104156A80F13821384E529783C52C8
78B94AB3A0096090867ED32E8A30980E737922037F75F062BD83BF4F5929BC51
CC22AEE2DBBAAA001CFFBFF41D258424FAD888FFF1BEAB796A44E3126159E120
7E4025C676CF94888A1971AEF8B6764B3AF4A92D36FAF6FC56FD049710EE3782
BC2CD84FE2473F133BE03C1346B875463F126DCAB15C7A9BCC9A727D23611462
4E8D2BFD2466600285D79518712B8681ABCD69608E6AA9578F7BD771EC36E01A
5A17BC17E375020ECA59B43790ABEB9DF5F4FBBEF807E5699EFEAC563E1ACC5D
EFA336E75DE6D8248E9381BB110884FDC89C2F9A41EBBC9A8A1F98E6A41F68BE
EE30E25CA148C1EFF42DFF8C214A6537AB11F260B8C329A4947B5FC8DC9C5622
4DF7BF4FBFB00380D47BABB03BC30627AA74103E553F55278F538EDD8C1E64CE
0F1398CA0AB5A86630139B4A7E8FC02804CAFF3830114640AE50D2FDA3B561B5
C63AD7EE3347804CBB40FB1E77A6C89735DD870351C3A1811591AB493251B904
314F65791963C0412377C1D02362C5E9655F1C3D4803CD379A8EF24C48218C2E
DF1165840462BF37DDE1B8D5FF09FA2C3B261E2F1A65ECFBE5D4EAD43B52C029
EEB3948CB8A252CBAF545C8FA1C31E920E23A12DD7222CEF2D2A513BD758EA13
DA33BF5FBF1D734653EB83DA2D374A5B9A0CE316F24EE375D6DF6BDA49954C2E
DB25A88821193636119D469BA66E5DAA9C92520FD4F84426A4E54273FA469084
7517817A6EE3E21176D333825E88046F50B3CF6938AF9BA79A2F51398239EB91
1A2D07F7FCD948427FF62F40FF95E39FE1A1AA8451411563FD5388472251C155
69BDE9283B41900B21EB1190D06E6B13B7794FED020D2C1BDD205AE77B084BCE
EF628249398B496DE85B406FC2E1939EF00DFC84C07E26CF72EC401BAAE756E5
7F6673216E7560D1C2A723CB405EE5CA474A07F61B81F8836482F73DC9516D67
CE0CB770EAD755B6B356198B4B97EBB29C63456953270CCC8D5650C1D006E69D
38DE2DFEAB27DAD50A817F0D645D30AF5B75A7B53CBD3D2B8D87BD0A7E525AF3
22F7ADDFCE31716914C2318260C2E2B4664893921B68C5A93334A361D94A759C
0D7B146D6FD94F0442D672BDA0F6432E18F3C5DFA37ADA378D95B75F413C9ED1
BB5C606A3EC7DFB3F796F59B0478C13FD1900381EFE0BB5242D5B5D34D03AF1D
4BDC93EAF8020E26CA23C8B0E7DDEBBC6762A557067A4CE05A524188A8F02E2F
3625DA38DFCF381727887F5646A3995A8A38A5FB1E5D5EBB395FDD0B7C8E71AD
B48EEDB62AB2CE99D121435EFBBFCEEA69AE9ED8238B60CC7288DE33C766CDFE
15B767B4AE2E6CE0965E77272AC9F86023DA620548CFAC85BC751C44218A29C9
849F1C2DCBDFAD895B54E51A569952ED50F82DC8A19F367E7E44643854EFD6B3
FCAEB04E55E4661C82D31E2932611748480EF61FB2FBFB0CFB940BEA81AFCD84
4C6A6332D7A600170E38A8EAFCD4F93DC153C43175434C86BC747348FAC61B76
1FEC9027C1A193E55C80F1F20B5317AA0A05AAA36AE235F6E49F06E570FEE798
84857D7552EA92EF3EFAD52DE39C2F8F43C59E3A957B7B926FC95FC4B60186DF
7F3523EE2AB74E294C8C4BCD8B4975E84849E0FBDA6C0B0F24A636DFA578B122
CF97BC5089E21E9F5298D1C9F30CB8BAFF6A3A11BB4D9A0A5CF2B18D055C44CA
4FD4D8FE1AF3630907DE7E585AA811F9CD11FB2C8FC791851D651009FA5DF20B
3C33FD2FF848A9E3F5652BD294965A332DD3F246C91B0ADA34017FF2451D1394
F9C3C95AAC6EC8062BE98E8914D51DA6A164AD13938693D446044859D03A949D
F9AC5DF4A000CDA98BB516D762CB9F6D44B5268FD0C26E88BC4A760C0F75A140
DEBDECA4F511128B7D2805872160C55236F0A0FA7637FF0D4E94AC079CD3C8A7
D03A5A56F26B0438B577C46011A10532FEBCAD14FBD6032E224F45691A726886
56F305231EB2FCDF59C8BBFCB5DBD2D093A0E84D62AC93A2312CA69295E937C4
8DBA1802B85F54B5E7E6D6216A918F911FF705D3B5CF055F1D873B96283A0B53
59344D910CD396D883F6F7836BA65FAB4393A773A8F6BC298069E5BA38210EED
49C9D920F718E3FCE692527DC7CCE6963BF744F2C91BC5952564196D60574E86
87A0FAB21F2DB2BD5A51D7FBD8FC19946D24E5A228462C4772F978E650ADCE3B
8D66B9C21279C531CA1C3A8ECE3420BB65837287A7222CC3673A2A5F8BBFDB60
C719CD073EF9A23675198462C7C87B24CC92D6AEE5C25AC63855CC3281494342
D28F3D2FDE0C183486769A4FD5B0143193D31FCB2C2A14E487BBD96D0BADBB64
D1B56021C363A795BF10E2DB448261C363A54A4AC1182B470C457AA82DF3F5D1
F4B329806141EBD53CAE309319B94133D7EBDC2D0453A905ADD207364371E178
0A95C2686E3B34C4A978BFC0EE968C39ABA00889BC5149162C2B54483D44FD3B
5CFF41F611C7E03B94945F414560E874D7CF27FFD0630890D7D7EA66CBD15448
229059E1C436BB33D69552B5367AB5D53591C4678D0C704DD3EA23F5D9E8A7AC
17D003C19E333E726FFFA2961F33C70F429085F7BFE3E2510F59B78F58B19CB4
01B48E184BAD9020FECCE3AF52048A056981DAEA02AE78197E65855DDB170616
F54278395D9EA50DC83761AE759F9CDEF9E1948E7002414FC05286ED793E6662
3347F2A9AF8917493D7305B92CF93E8E9185F70015F5594084298A6C2F9FD3C0
689F262AC9FEDC9B89577ECDE92F08D3142209FBCE7B5C0A840CC767BCA56C20
4E4E545E2BE4D21C53855CEE4CD0AB35D1A604C0FFFF77DBAE4289752276559F
A05FEE65F45ECAF44E95E23FAB6052195C7948AF0B1126482D4E02D72BF8AB03
DE0F1A632F7672AD9DDE70EDC82AA993678A82BEAD0BC2649C4707FD8509810D
364B5C6FE0E10772E95288C622C2F06C634F4DF8C7FD1432BC9310D5F24FEE3F
7AB324863D6DABAA1576E70643CA79EF4D7DF4105093D66CEE0F3B87D2164A7F
26EA05F5C4645B22D3E1BFD2219657712C168FD90DE801FB0F32759E80DEC1E1
43CEEB19FED12D757205043FC98FEC62D6A8D8B97BC083B4A0E985AF7850D6FD
8716B9957C1C35A0675BC53DF672C425C79F43FDABAEE7D63F092CF271C9A9D7
C41F40C4189510987887942E60A412B3EEC84C9A6E1AC7D54D528F5604B72C08
94B7882621A5BF1F325B92FF96B80878CC550D1AE4D8196E41CB1251856609A5
C4D3BD05A922D0D45E039D9450DEF8490A3E924E41434194910BF60BA1B08BE1
B41824345627745541A4F1703E956328F6227D11C74946B38CFB096139979E56
4E723B889B44C6D78673868C89912F8B4F0B4B485F1587A637B630F92E6072D5
7F3B44EA6FD96BBD4FC28A6C1D90805E3BE3E42A7BC9C880762966C55BC04E01
204D083AE976FAE6F37C94F27E68F8C0F28D52B17F6C0FD7C9150701FD78F8CE
B8E8DC9260E3974005EB5CA728171F482D765016C94D4ADFE4A42EF42212BC56
7E4EEEE8B0D2A7856CD4E44F55C0BAB762F92CB8D64C17022D4BF3A47C12F5E6
279FC23101FEE93753653CE8CEDC3B75C9CCB29BF1D4554C6120DE8EE750FCBB
E38B5D915206974962E320362E59B3F21B3AB1875703191043D03284D4467346
CFF2F98CEB4845B73ED8E003E0DC94251B73E13A9B51A3F1430BCF6A21EB9B7A
65E17FA411F53BE6432F1506232B8159E008FA257F884A4A01AC53BE91754D78
BF14A5B0FBFB9C31BF4908355F8A762052968DF526D118708CCB0B7CB5BEE285
6DAB6CD2E3934178E60BECB11AAB5478623CF6C50C92F8BB5D1A583609028FA7
B8A53B791BDC9EF76A124F3F7641857E4BEA0837CB36176EC9A522EA7F41B8D3
63C37D1145367BD300F17B54522A834BBB74DE12BF9EB26ACE6F24A046D58F89
4D4B7DF74875F1A0C1C9D97BE0849593D7B398EB4B00BEBC8C8D1497B6EF831A
A35380FFB7F1AFA4D888AA52C9482E8B1755CC209905F98F40D95B44D4DCBCB6
67423D1BC2F3560FF0A8B4F0CAC352A4EE2C1D946E45AAEC8A6AD40303F3382C
DF0756BFA3B1ED64C169E56ED1C760F2FF0E24DC5C9F41306EF8D2628153D30A
5DCB0791126BEFD4947D7EF08301FE015F2B0008DFFCBF9F2D4D859FD43EC7D9
C5BE237E9BF6665B7B1BEBB362F0C0C3A8D86010B9C97FA741C97C2E0513386C
9C26C235B14DD2A58BFDAC7B5F63DB4DA6D5D37D0098175A9071590E1DF66A3D
B8173A047C29D7D35557F06132CC920B5460B8AFC11D23D09A4E45D089F5EB51
963FA1A6256E359D485107FD143B2BF21FDE9DA5744BC2615E86C31C89470CF0
D06C6397D9FCCB316EA9989430240759D2C4945D941F159FC02327F34B042BAB
B5C3A47C78E8C1A6FBCD396B1A51CC4B020B8AD401841EDABACECDB482D6EC5B
72D2BFEB4556720FADD49D07307C8B22ACB7E310CA4151A85C71EEF70E8D15DE
B3B00F26E0E166C14647A65ADA228A3D1C89025BE059306565DB1B1EFC37D358
8C1EB024254AFD049BA977BD4C2C605050E17940A89D0D4C5D963E792320F5DB
3706682E03D25D9E02487247819551465092CC22B6B56E93F3AB528038FEC3F0
668F866707A19B0463BE706EC729D2EE1653AAC7E29BD25BFB3241D4792F5152
ED415B4E7FA92C2EE5A22E27E8B75542C492E56D811C192E95542A6FE0BFE5A5
69273C2ABED4300D491B92D2AECDD278404CB84B1BB1BD7AFEC858215837D118
C0E928BE7E07CFEEB51A6D21375B772B8248C994564014015232A0DA4BEA1754
3274F407FED0837A236371F1A32056240F2015B1E7F4B2CA72C6B58610A66F13
407CFFBA5E0A2893C1F572D50F51286E9133B5A84239C9493B0574E77D281D01
11D00683354A000C9700EAFBC1FD104EA19DFCB87470190E7E2CE26E3A6FD0FF
2620B87B82AC8686B6206B530F17E9348BC7D04B948348802CE53A312443DB87
4DBBA5313A6A2A8DAB8A1CC9A594FF8C299281C0A261C8CB2226B732FBEEDE40
2C6ACC74A1A61379E2E1CD5548CD908268A32FA83D8504C442EA0E183ADBF7FF
9FD09C037AB03516ECCA93FF048235BD11A25DB07F164512A079C5392AC7F889
CE96AE5C8D9580BCAFCC087C35E76EED1A671E87C12E3045E15A687134736DF8
DA984772AFD189D68571A2ED7256F1E204230E41D3D9DD876F938951714A3973
0CA9310489F8E807C1C7A4E51AEA5BC030610A5D7263FF7E0F9FDE3E5E37A362
5B919000BD94D978583B942EB79CF2BEAC33FEBC9A67272EB10865BA8FB75FD7
9D280AB59F91B96C16C982DE848D76D8FA8620DFD7C80B7DEAE7264350D6FB3A
EF04794DA3305844A7CF718F6D1A4A3AFF6826173A076A1372ABFC54ED3AC6C2
09C9287FC830556CA694E21CA5342ECA7B10C90AFC4783D841D7B1E34FA3DB7A
2B706F3E21B0FBAB23E7257962FC3BC309CEA2C7239A9D6B44CC96825115ABD2
AF9A2566D2F3382C01569FBDB94C8D664A5DA0F7DC3DD140CA77C743D7BC1420
324ECF9E4780280EB119885E96A6C619CE3C0C8E1E264E2DEB137E5DC8149786
486D65667ECF47B1A1E20E9E6E4FC8323E0BC8E61BDD3BCDFC6575C69C03E31A
EFFC290472CBBD049DE3F840AEE37A2486034240F80E75D8A79E0762377DF660
52B12EAA16D678990B11A9BFBC03C1D4FCDA9FD4FFBB3E88352438102F10B7C5
9F04C013B6575B5E948FAB58EA691984A0E54E6B9F3F505FFFEF74D06FA1CDF3
4B8A95904C8A2763AA8AF5B71D00F5DE09DC1CDF87A08B6D181453063E14C12D
B7BB3775A6E2A901636273D9EEB833EA8CF20FD83AE899E28DADE10EEEC20BD7
BD93085A4B1AC80AC1AE8280C14767F1A487BD066007A0D050317BD081131A14
6EA0898ED59E46DA7B6254BDCCBC660686E2EDA0E77A705A653733BB5C5497D0
B130359F866CF293FB6EF0C2AC5BAA2DB0DED045E2DED3A2612D078333260359
16CF0CCB272D34767EA069E0F0B0D42327A18529D72E890EDA6195C2688438ED
E9ACDBEED41E81CA8EB5E43C2B09CE266EFCA03F2D7FF57F12B06F9E54FCC6A6
546676F6FFC5B8B7D3F0982B6FF0D21D949309F0C0B175CC1D0976F8C55C6AED
6E821C39041E22D91AB30922F2B2EC2746BC7DAB484991542FBC82D87B487507
559AB466F73EE23C2D3194DC5CE4C9AE66D3164613AC5CBB3DB501B64DA7C91B
C7ED2EE9027FC0906820B35D4F2CF66C4F9CE4A884B7C07155BCA884ECA5EB3A
ABB83F84DB1F5639599DC7D3F51241AB5D95C3BCB7AB1EC90B4BC989F74FB354
04B2D7366A34D335A47B8C00C05CB423482BF6C7970A95545424A08AFF9A035B
7F83F52B65A9799CE76E303B85664B624C65E9CA58184C7BE2BB9D9C86A4DE5A
8165EE3DA2E652B5022EE7893896BABD88931DE1D538F615787645DF5ACBBA0B
A8E5B899A37321AA7D4B283AC9234978C2DD81813A1EE5DB6EC170DAC1B6EF02
94892635B498765C07A38D2E9DB0B7581B11056C28278F89B0E60998379C07EB
C0EAEDC32AA69B8B836F92A61AFD35688315B2C3F860632FC13E4BDFB63214BC
41CC6859EAB3AC3034449213CAB99FA1D216563419CD6D6CE4E1B56F33E6C654
7AA9DCB5B05FC068DF02AC32408C8010AD004F6CCA9887830927F8CBCD49CDB5
18CAC1EAFF815FF2F6F527F936948201565003022C6C7390B4E3C2B219FB4F76
9F12BD25CA7B3B61D1A2F8DFEE795D04D5428B42FB66E0C254AF7B7A10CEF7FD
E0B5622DF6FC4BF52147208D9A91EB49B03BB40DE7F8FBFB566F251942C8FFB1
1DFA50465919400C21CE4724D12E4EB47AA5F392BA927329DBCA28A78FC1DF2E
6FF27F4E4E3F8971D7BCB5F3FBF8F30C214A26E5E32E0E8CBC71BF20AE573BBB
163DD66E89F2C4E2B1A1532AE81C060146F755A1ABA3F1365FEA30B403DE7B22
76F43EDDF7CB0C5D3E3F2B9043D33654BDE23221D16CABE4D559575AC8D01281
379FC2AD33242EDDECAABC38D94B5261FB3D7DB1805BF7487D1FEC7799AF3403
048EDD0FA38DFDC1FF377FC051F2DF0F3ABE714B6D635B39D758282B3B98104D
669CF20010A0EB51C89E1743CE629CC7416ED4BFD444E4E1AEAA4668F6BACDC2
E130A2C4CA27DF2A20389997AE29853C275546287018C03A28533D8F962DC24F
69B2AAE5213A8B8D341E0B420CD28F260F86D5AE0485AF3D5B2B9AA9AB524E07
AC49B087A1CB52043A3F15FACB897B46D91BD4D830AA50B8025C7E752884A6C5
34D474141D11434D00687E5151B17F2594284B2E8D4ADD9509DC7F0DDAF53899
D02C08F65ECC529834CF1BFF06
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMMI10
%!PS-AdobeFont-1.0: CMMI10 003.002
%%Title: CMMI10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI10 known{/CMMI10 findfont dup/UniqueID known{dup
/UniqueID get 5087385 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI10 def
/FontBBox {-32 -250 1048 750 }readonly def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI10.) readonly def
/FullName (CMMI10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 120 /x put
dup 121 /y put
dup 122 /z put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBC7878DFBD546AC2
1EF6CC527FEEA044B7C8E686367E920F575AD585387358FFF41BCB212922791C
7B0BD3BED7C6D8F3D9D52D0F181CD4D164E75851D04F64309D810A0DEA1E257B
0D7633CEFE93FEF9D2FB7901453A46F8ACA007358D904E0189AE7B7221545085
EDD3D5A3CEACD6023861F13C8A345A68115425E94B8FDCCEC1255454EC3E7A37
404F6C00A3BCCF851B929D4FE66B6D8FD1C0C80130541609759F18EF07BCD133
78CBC4A0D8A796A2574260C6A952CA73D9EB5C28356F5C90D1A59DC788762BFF
A1B6F0614958D09751C0DB2309406F6B4489125B31C5DD365B2F140CB5E42CEE
88BE11C7176E6BBC90D24E40956279FBDC9D89A6C4A1F4D27EC57F496602FBC4
C854143903A53EF1188D117C49F8B6F2498B4698C25F2C5E8D8BD833206F88FC
BD5B495EB993A26B6055BD0BBA2B3DDFD462C39E022D4A1760C845EA448DED88
98C44BAAB85CD0423E00154C4741240EB3A2290B67144A4C80C88BE3D59AD760
E553DAC4E8BA00B06398B1D0DFE96FB89449D4AE18CE8B27AFE75D2B84EFDB44
143FD887F8FB364D000651912E40B0BAEDDA5AD57A3BC0E411E1AD908C77DCE3
981985F98E258A9BB3A1B845FC4A21BCC54559E51BC0E6C22F0C38540F8C9490
88A0E23EA504FA79F8960CC9D58611C519D3ACDC63FB2FBCAE6674357D7F2285
4BCC9F54D3DA421D744D3A341DA3B494BB526C0734E1A8FC71501745399F7683
FD17EC3044419A88C3979FD2ABA5B0130907B145A8462AAF0A9B511D2C8A7C7F
347FF6AC057E6512902BFD2918E2CD31DE615F5D643764E900B60287670AE18F
FDE15545D8BC69591A8CBBB275AFFC9B14BD68DF0AAB32268FB84844D4DBC7BB
C591C1AC5102C50A9C7BAAA848DA88B0519F0F5F0813BF055CF0E3C86F633A04
B779D2E8E656DB1E09A66A85FE21CA8BA5523F472A229E83F2C4E91ABA46C733
F3C7B5775B06C97782BC225C46385BEBDC61572458EFC5CF4190AB7A9C1C92DA
29F84BAACF552089195966E3AD9E57CC914D20B6962BE80429A16D4DF1ECAA66
36C4343FADF0B2B48F12E2EB8443C4AA29D00949255F3968617F98B8ABD4CC12
048B838EE243A21AC808BD295195E4AE9027005F52258BFCA915C8D9AED9A2C0
80814F79CF943FBE3594C530A22A92E11BE80FCEC1684C4F56712D5846B0749C
9B54A979B315222F209DEE72583B03093EC38F7C5B9F9BCB21DBE8EDDAE9BE8B
75ACE6B12A31083AC8348EC84D1D29D2297A266284B7E9734E207DAF59A25F4E
4AA38509E993C5394FED76E6A2F25462685C4C86C6E8CFC9863338EC1428BDFC
74616BB1BC8948B0ED4C87C15B4405F3A7796F9DB3798FFFE8BD0A94E834817B
D5E9812E308D0CC920470A6F2CD088FCB80462BF7CB3F039A7DF3DAF5B2B5355
E083A385CD2EAF0FC181E40E96DD7E9AB9EF5C7E6866A13B8A54718E950FE097
EF0951A357114F18CE9933D28B3A77AA71E3CE884661F13284BCED5D5FD1A86D
543E588FF473DC2CF9A4DC312500135F29C2D0174B32018C8DBD40EF9A232883
710A1F2AB2CD11312300ACDF789A9B7B93D2035D81D1C84984D92D78A53A00C6
EDA94B24BBAC1AD17774A4E07E6F74ABD90415965616AD540C8ECD8C3A44EE4F
7F4F6BB6238C5062D63FA59B7BF08BE93FAEA70A2AB08FBEAAF7DBF56B95FD93
03CA406543BA6C9527D0DF01F5108D31A51778A5EB1C93F27B72B46146A353A2
01CACBC829603B9989A87CF64528682CCBA0562A8165B185C58A5C6BB72F5E89
500ACCAAB8ECEFBB2640E99EAEEC4EA979AA793D013D61D8ACF8784FF8D9398F
F6A252A709324FB39509F0B3A4E725E82F53543383C6765BE556CC897C758208
AA3AD37B0406E4A79F8F0A6C1983FC73E71CD858C0DB66ED66D5D992978614EE
1EA91EBE191E082EBA1FC040AF19A2202575C2EBEB8058833E3520FA03D2F915
85C1ED337E457B9FEEB0C6EF2735EFDA6E0D05FA641BCF698AC6B97751E8306C
4DF00A39B8581FF53DB8F8525FDB196D85950906CCB59B8EF171349AA3B567B1
6A00819947A995FB383C3C1709C9A2C113B2E40BB832B7D4A0FBA0B16A2C455F
55809CC425C403E9668DC66BE45B71A81C332FD4DB279D22A2959962304A8F18
085893DAC61317D24A8F198FDAB95F3B86F0AFD35047B868A9A17037A2829A02
BAB042F75F349E197A7EED41984C2859754CAFD0251439921C248B463B516951
2E1322C80D73F9CBCAA63A585450275AC2492E4D3FB78E800F788254DB5E610D
CF788DF5C70FF99892BCDF16133E34B24B77C8F097F546B87C603DDB8998B66E
BACB68BA27462AF54AA405682EC96D701F0D474DECD5F95CA2102DF639EB169E
D518162C2BAE45FF698B6DE15FC6E7DE48C336C40A670FD26952A6BAB09115E1
991F0073419F2CC2A1C08BE91096936AA0C37E4ED3CCCEE235476074B8FF1125
6BDE3701F85532D8BB64CCC927CC335281C95EA689706F0AC717DC2CF680C754
E5EFD7FA4BB8880B2B727A964C876D4A223069D4E6001771F0E23EAD2A4BBC80
E76675297B2EF05F52BF4E71B3EE2BE3048CF088C79540113C66AE98B2FD3CB1
B0741A215FD070882C52765009D7D711DAA2508F19AE7DDA15229A856AC49BC3
4DDF40814FF96500E4B9B02D412E94623C5FDCC76C0FB8E42DF56A904FE49D65
1DA7C53901B2EA71AB658A464D3ABDE27D9DB8D9E0B48F64E61A2495AD5D8DAB
B5E72424AD017DF37964AF911BD7FA21A5EB4775DC8E95EF0C0EB856B00D89D7
8172A1DE8530767D317B8256103E53CFB877E10686A04F5A08F8DC58D843DEBA
FD5F40597588663D103689F6EB3EB14D06E18C8078F2538B43E712DF491FC5C6
AF639256C8C6134B64D560D8476DEA6329D995E46CC4BC78841C59E73648B47E
BFA7DE0846422F738454AE77E822A083405289247BD7C478BE4974F742CD6051
E99FBB1D1B3FBABFEE855174734EE45E87D0AADF32B1283B911162A9955847FD
38944D70584FAA6B1A7191C5C134B73F98EB632B69E2F0C0F94156787C34C8A3
7622A029D58F9626B74F8A8A1F3803E0BC20E0EADEB1E99B70F1BD9F980FB751
2A842843DE42EB142A84D5D3138629AE9EAF6F3479C423E8829C8816FA6EFA27
DCE5580E65AA9854B1C64163DC318420CD993C15BFD76A8BA1182860A6B03D6D
22B8CF43CFE6C8AB27C64842E239CAE707D3086BADDE1D7C94E3BC96319470D6
8D26915C575CFDD03271D6BB9DE86A0EB6EEA6E768B224A626C62A9AB48A6EDB
44F70BB5AF991CDF9736D65933E81CC57A78F623F33EC9AF535F2F25FA4EEC90
D50DB7E87F31E971A75A33A301CA6013EEC5A4E179D695B33DADF2C98364434A
42926776000B610E17524162253F6FA638D6581C18F99EA0BD1D2E24D2424ADF
C05010D08192485153DD03930C7BF45237593E484F9851E6D464FA10FECA5D9E
0C8CCC97DE029030900CDBB491C5CF226DBF903CFE7735D939C3FDF3A20B70CE
66579B28B99313FEE914E295388C7BC8E055A2E54EA3A8206D3C8F4F7C0BA5E6
E519419FD8CE215F7B8E9BEC604A9E3FE272A0328A24E31997C8A91E0946BCF1
6943A97CBED2AB9FC636B49828BBB8B89E0BBC2653796431224895ABA5DAC41E
1854BD9764E86147FD7624F736F40DE3B7582EDDFD15C2BDE3F22B5A54D7DF10
B87A1301CE85CFC061689A890A321412A13314AE96DCD3EDA75035FDD8F4AB9B
897A2C68263A68457032C469987970648BA2D88B1C5375DFEAA35A917B8A952E
EE670427942AEDB3CB599C5746180E392837D371E15D860620ABDB6AA7772C40
A5E346661673ACA530BE3D8E3FFB895E5DA3DC23B1B43C080C77F7E47847F0F3
F3AA5CA9E4BF75FC5EBD18D19F21A7DAA3B11CABC6E4070A15F7DBC8B05EB6AA
A02EF1B078EB66D61D6AFE41DA9B36FE7EC9EF94D1EA26282A9871E2CACB3126
2AD49C2D9B50A6E47D8F2CCAD50992D1B430979A45FD9E76182A19964BB2A1F6
51779A2B258DC1DF4C2F3074621286831F3848AC152DDD2BA561E6586ADA88D3
598A2CE2CD048F027CE0008B828BD915887D7785341E8305DF2346ADB76BE99F
87B02173BDC334E9221C8DF54114A6B24C1C5340299512FA6C8C51AB4C8778CE
178CEF531C6D1B5FF0A1BE8EFF767F959BD4C345C52699A29A17B2A230842BF6
4B011217D6D24EDAC3F6D53482786F1CA33169B90ECD499407D37CE9B70DDF78
7B7547B32952535BA9ACD1E244447AE3FCED3AF28717083CF9590A09780984D6
AF0743C82AE4FB3E2BB2856A4153A3967A023FFC35382D6C22D84A924900B6A6
3DDD400E6D2418DA6C27F2FA34C075C902B89EBAE658B3C9A18EEE449DA5A379
337DE95CB7AB3F0970CF1A5D8FAD8090E495570FDFB2FBBA79244780D8035547
C5A55BB21A2270F724BF5D442CDC5BB9F09BE0CAE59B1C2270F0BDACE698F2C5
DE8F66BFB9634904B161F5BA2B1950048300D69BABD312D58D89C4ED527AF7BA
7DA2478EDC2CDEE3473DD8A8ED9D891CD1FC21F23013228BB3281B71FCE959BD
6F8E9059D682A7FCC5265A0620992D4FA8D78377EB34CE3ECA070EE3707239BC
98907DB0120CE42ABA32CF97127E28382BDDFD685674279F588D4F951216C355
821361790F64C2CC720DE97E8ECB57326C43EE47367628E05769E106868B54F4
C33C9951908DF6FC4F5ED2C7787BD8FA591BBB3E9C6C1DA94CC5E38D9B20C886
7D237572FF46DD896A4D6163408EA6CEFAC398EE041EAE29D577E75326CA17A6
B072D47A7B13EC441CE6DAA042ECD02134CBFA6809A435050413817193DAEB16
A5882C8AEA44BCF36E74E9ECCDFE7E19FF5A5DD7A94E5AB4F8702C3DA7F42325
23C808670A0490F5B373DADE40814FF9650241D3D69C91FBC5ECE728F827D9BF
C928602E05477903449E079164CA39859C4BCA60C579F490AA455F82B5050BB3
969AFB478E0D4A257B3356EA3CD62051FCE6C6B1929CFF85BFDF166BEF658E10
3A55E007F38EBBB248B3F0B8ED1925106B499B762E45113AE1AC9DE09644C84B
9C08034B297314EE69BC32DB6E7D7FB9913CE5AC17E7335979E9DCCE2BAB3725
1976155551F9706A576FE0E3ADCCF72C87683291528ECB749CB0ED291966E239
B5E3630676BD409E08F85BC1AEC9A2D4135376284A96EA24431243BD6FE8B966
95F11A4BB53F392E0AEFEA623064FF8A7002367B0A515635CB2D2DDFB9B4A8D7
FE721754E81BBA548848A235B91AD4E4F7DB19CCE2F61D277FC00AB956EB93BE
44AB4970CA56BF59506C94ED160FB1E25D3DF2988A532BDB787BFB8539D22986
FDC378AC31444E63C4727FEE121A43751043849E6DCAC5B59D0FC703AAFBBFD4
E8B7C268F21615AD02CE9DABEFA27B5FE6A6441B619539CAB1F810F1263447AA
633F5DAF483752EF1A0421740E3A811D2D2898CBF53E7F686C9223FD7235F02D
6F90D2D48CC20AB87778DE3C6FB335E0F0EC20B5DC5B65223FE117526DE2C72F
FE839DF93CB2A7D66CD900CB325F891E311BEC932F703FB4FEFA29DB8B9C88DD
375EC71B3D58C7BC59ADA91971A3BDA1ADEA629CE6CC92BD542CDDFAA7706FB2
6CDDE2DF07E56D6741916AE8E8744339816F3E6C38062747AA9FDA2A2678A6B7
EFEA870AA3A4D71B25EE3013EAB1DBA34401B867C7A41AE51E0421D41D3BB83C
E120C8FEABA6E5DEC53A689C21426D4BBCB68CB37568761C360E6D4E3596FB7D
F4DEC7918E58C0293D12D6DDA7E9DCDAAD7C939F55CD1BC4A228B31E9A904156
DA6B40B08E6ACE674618B768DD681C772A3E55FE096CF949CF3B0460ABDCD891
D17B37B355B29AB5137899C036F31DA026244FA25FB798FBE5105BDA29F46538
D3D3AC1001A7BCECE64DE94FFE6C354166A0F97256137BDFA07F6E22A3D1D2F4
9588DBAE95E895BC5E64DDCBBAA8D0A22C229B42CB717FC711E7E9DF793DF80B
9F14754585A3C7E17F37B32924B9F9870DA8635E3E18BD1DCD81EDF01834D9C6
B33F23C956C2FCBFA47D84422F583459D827D1E120B97694D12F1F54D02379C0
D288F7104F3FFCF4F76E3494F4ACBD1BE3A15543CC680924C78A473F8E311ADF
8FE00A04C6C393DE61AD3EDA5BC031E2353076A2489391B52632387CA28A7B93
FBB065A6EF3658AE80B1ADA47E9B2539E73A71FA75645F85ED8ECC257FB4CF26
B6C912DE9D0F9899E70BECCB934AD32CF49A093371A9F73DE6255EBC39DE1E7F
00D0CBDABD4D0383977E694890E71FBE5C376BE5F3A80C28987417504F515C50
909F3D31178BB9B1D085BE514F71B910A9085BD6122DDC72A150BFE266920E49
5661BCB4BAB51D6DEFE32B616963DBD989FCDD1637B294CE4E288655FBEFA1BF
7F25BBF8CF17C2D5FD161A7C2CC9CC7490D9BF15A1D35B3BFA43ADE256E88BDA
BD490D92907C57BAC408A575EC84D6AEE070148C7C9A91C03B09FDBD792E8FF0
C0B886AAD2EDD86541E5E579359D40E3AC312ACD3D8FD49F71BD533DDF8859B1
BAF17F1884E331DD07CEEF93B71D492AEBAADF7A263450A7A72210CE630A0D37
BF024BDC09ACC882816B8C22C62AE38A3A8D0F6EBC2B1B2C0B8161A8B076DD5D
4B779C0788546BB4CF57332230D237856B00D79C28A7C01D11F44B7304F69075
94B97A745DA43D1BE561372CE611C345A843834E46AD9DDB16CABCD3FA33D6F1
F6B5C0497F5EE5400B305CDC16A7EC286AA4D45D0EEBB9DA06AC9C5294D68EC9
E4DC3CA2B92CE8FC0526184A86EDC7AB34D67E60AC12D9CA8FD300235EC968BA
92C6FBDA47572BC5600F25249F60AD287CBDAE980E747FCBE7EE5CD323E733F0
63553B494D3DDEB9CC1480B5C3BB79A28E419AA65B18CB297AB383419E890E2A
CE6F98C9900CCB4675280A10CF060B8D220DDA1BE55DFA65715EABCC1AFAA271
B1F8732341613E17B231231A0D24D4D7FC198AE04D89A99C4536217769C6FBD9
5EE24A6302F97438F7C0E311C878F674B4477A5ADA3952CDE4055AC408B8174E
86F8FB797646DFFFE0ECA25D1BAB9A9F71F3926D3D85AA63E7A8C931D71E79E0
AF1EAC26FADE468F4FF7F3861D14C10E3BE1F9EAFD6D3A544E8108D5DAB5B180
3950C74818BC8AF4758A108F462EF1826647A49667F5E482038C54716856D9BC
35F29922846D2148F92F943E951D7438C73D6A60459A8003174036C64E1629CD
155D47FD04B03C023AD67CD5A70C98AB556EEAB8C48169706E5B352F6505D580
AC945171BFE62E81F8F500438AC3B64D857BA5BC54C2C4BBB237F8FA51296255
E66A92A61FE13FDE781D393557EB72CEBAD86511035F775FAC39A0479CCD400F
226709118F887F47CC2ECC8F79816D4A945B2845F50AFD62D8C9A9BBF4739496
9E644BC9F7B04803B7EE75A09EAE94365F6F374B4FCEB0B506C76297564B9B6B
8B812BC3A33929AA94692572B010E6210AEAA312BDFC88BF302244AB9D587A9B
919823FD01DE12438D960944D1977800FEB49E638C32E5B188B1CA033E0C37EE
A142F746367888AA119535F0CCAF7EAA461B790EB089D2D6962E28A398439BB7
9C9943654D7A2D765B46BC0DD1F915327F369162E1BA1BA83110B93F442905E0
523BFF5E279508A98568CD5CFD18FABBE9D17265A9081E7BF64155A2CE3C0DF7
88D00671AD65654709589BAD7EA65BBA811387ABA5CA0BC3F66D3D48597A0D1D
2C268375DF47CCF62166262AE4840AB03BF49BE67A05EF66328EC729F03CA5FF
AD3937FC053E223303565DC771ACF32E63DFB96D5030E787961D72D02C195C66
B48E9AF0309DC169CFE8D16E2818DA94693A18F027DEA0D91051800EE6C54285
AB0594D87D05EB4CB44FFC094DA0072AE7D4BF2F4F9BB812FED256B937BC2574
8C529F97ABA6DAD956BFFC367448EB7FE9D1975B82DF29D520370354429740FD
C55226BF63CA700BBB868F713AE6B4B891BF47CC2EAF14877F5FC21C72AE41F4
BEF155B28ACF0458F6D0913972E771285FA368EF7CD55F0E5E3B2B5BC4C9E8A7
CAC89667C966C7A0517B909E752ED2A2CD604BDCE93D2247D5A603D163CAA250
AEBF479535C34E5063E67207C507454F2A76A45B776B4B3C9916D9E8C94EC2FB
ABAE3552F71CE1FFE48C00554707A2604897546FDFBBE0F36410A80C6ED763BD
FE16CAD8A4692FC306F233975885DD6FA5DEEC88203E9221F67484DD83BDA8B1
09E906D0F26B9A904F60972705AB65BC5AFD9F9E350380FCB4B0276A0524535A
489B8F4E1ACA2ECBBA8EED513EFCC0E61882E371793A223DBBD5CFB45E4BBFB3
9D76E3373F09A57CB319998018CA7F1668CB52A00D2A330B3C0148E8CEE1746A
8BACFEB7CD75153978B12F6C833C529DAC0B63B24331CC999DA586BA10EAD9BF
226E611343378B8EE055FEFB398CF5A5215BC258199F98E594D65CAAF1DE621D
E4238BAFDE59DBC4AB69ADC77FB529BD2B1651BCF681AABE01A9189B4AC46955
DC0E8776A4C401B26E9253B2C5A07B4FC5CC72C9446AB884E2A350DE6F15EFAF
FB8F8510E2111E626F610EF1CC6911CFFAA0BFC434427B24FADC2B17906D07A1
FD6C56353A1F380F0DA2E05572DF4AFB3E28EC60E246D67A7ACD60B40ACA4D5B
5E7EABC6F39FAF23733D26E39CB1C7570338EF118DC382765090D6186886838A
9D1CD12830A595C27E93518B2E8DA5FAB0BE98975FC904616C05847C2F4A6836
319BAA06093DAD6DC72F947D4881E671220AC0DC04A8CE0DAA2C226030231690
AA1FCAC639911ED82336AC8F20AA5B3139D2E9F427B4ABD6F75964E494D79A5C
5D8D57C6E5BE66B0FF7B1AFA5DFB1E5D47A794303BADA2DA1D6E6BB5A5387F6A
FA7A5759A7C28A47E311C3769B5540215849F146C3466AF12B106F2476AFD38C
8C9AB214D0509089311B5D156D95730263D499ECB79D31BFAA80C64686F2C3DD
38AB1A4BA1D580785EFB26D4971EAEA6B8962EEEB18C028E667FE28460E92BFC
91FB7828FEAF29CEFC8E1983
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 40258437 52099151 1000 600 600 (main.dvi)
@start /Fa 206[42 49[{}1 83.022 /CMR10 rf /Fb 133[39
41 47 120[{}3 83.022 /CMMI10 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: Letter
/setpagedevice where
{ pop << /PageSize [612 792] >> setpagedevice }
{ /letter where { pop letter } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop -592 -567 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 -592 -567 a -567 -592
a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 -567 -592 a -592 -592 a
 SDict begin mark /_objdef {pbs@obj511}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Ff 65537/FT/Btn/Subtype/Widget/T (pbs@ARFix@1)/ANN pdfmark
end
 -592 -592 a 0 TeXcolorgray
Black 0 TeXcolorgray 515 440 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 515 440 a 515 440 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 515
440 a 515 440 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 515 440 a 515 440 a
0.8 setlinewidth 0 setgray
 515 440 a 515 440
a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 515 440 a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj0} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930
a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 120.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833
2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 120.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 33 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 120.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -1 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 120.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 33 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 120.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 -1 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 120.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 55 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833
2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@xMax known { /N@xMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@xMin known { /N@xMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@yMax known { /N@yMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@yMin known { /N@yMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@zMax known { /N@zMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@zMin known { /N@zMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial
1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 180.  def grestore  end
 1833 2454 a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@xMax known { /N@xMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833
2454 a
tx@Dict begin { 5.0 5.71527 4.30554 0.0 180.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1809 2472 a Fb(x)1833 2454 y
tx@Dict begin  PutEnd  end
 1833
2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 1833 2454
a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@yMax known { /N@yMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.2616 4.30554 1.94444 0.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1811
2464 a Fb(y)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833
2454 a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 90.  def grestore  end
 1833 2454 a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@zMax known { /N@zMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454
a 1833 2454 a
tx@Dict begin { 5.0 5.0903 4.30554 0.0 90.  Uput UUput } PutCoor PutBegin
 end
 1833 2454 a 1812 2472 a Fb(z)1833 2454
y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454 a 0 TeXcolorgray
515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj1} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray
1833 2454 a
/lorenzXYZall {} def
 1833 2454 a 1833 2454 a
 tx@odeDict begin /odeprint {0 cvs print flush} def /odeprint load
0 256 string put /ode@tol 1e-6 def /rk4 false def tx@Dict begin 1 dict
begin 0 end end ode@dict /tStart exch def end tx@Dict begin 1 dict
begin 0.25 end end ode@dict /tEnd exch def end tx@Dict begin 1 dict
begin 26 cvi end end ode@dict /N exch def end ode@dict /dt tEnd tStart
sub N 1 sub div def end true setglobal globaldict /ode@laststate [tx@Dict
begin 1 dict begin 10 10 30 end end] put false setglobal ode@dict /xlength
ode@laststate length def end ode@dict /xlength1 xlength 1 add def end
/ode@rpn tx@Dict begin (10*(x[1]-x[0])|x[0]*(28-x[2])-x[1]|x[0]*x[1]-8/3*x[2])
AlgParser end cvx bind def /ODESET {ode@dict /x exch def /y x def end
tx@Dict begin ode@dict ode@rpn end end ode@dict xlength end array astore
} bind def /formatoutput {[0 1 2] assembleresult} def rk4 { (\npstODEsolve (RK4),)
odeprint ( "o" output step:\n) odeprint }{ (\npstODEsolve (RKF45),\n)
odeprint (-/+ failed/successful step, "o" output step, "!" step size underflow (stop):\n)
odeprint } ifelse ode@dict /tcur tStart def /outStepCnt 1 def /tout
tStart dt add def 0 0 eq {/ddt dt def}{/ddt 0 def} ifelse rk4 {/ddt
dt def} if end [ [formatoutput] aload pop true setglobal ] globaldict
exch /lorenzXYZseg exch cvx put false setglobal (o) odeprint ode@dict
N end 1 sub { ode@laststate ODEINT [ exch aload pop true setglobal
] globaldict exch /ode@laststate exch put false setglobal [ lorenzXYZseg
[formatoutput] aload pop true setglobal ] globaldict exch /lorenzXYZseg
exch cvx put globaldict /ode@dt ode@dict dt end put globaldict /ode@ddt
ode@dict ddt end put globaldict /ode@tcur ode@dict tcur end put globaldict
/ode@tout ode@dict tout end put false setglobal } repeat (\n) odeprint
end
 1833 2454 a 1833
2454 a
/lorenzXYZall [lorenzXYZall lorenzXYZseg] aload astore cvx def
 1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZseg counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
0 TeXcolorgray 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj2} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray 1833 2454 a
 tx@odeDict begin /odeprint {0 cvs print flush} def /odeprint load
0 256 string put /ode@tol 1e-6 def /rk4 false def tx@Dict begin 1 dict
begin 0.25 end end ode@dict /tStart exch def end tx@Dict begin 1 dict
begin 0.5 end end ode@dict /tEnd exch def end tx@Dict begin 1 dict
begin 26 cvi end end ode@dict /N exch def end ode@dict /dt tEnd tStart
sub N 1 sub div def end ode@dict /xlength ode@laststate length def
end ode@dict /xlength1 xlength 1 add def end /ode@rpn tx@Dict begin
(10*(x[1]-x[0])|x[0]*(28-x[2])-x[1]|x[0]*x[1]-8/3*x[2]) AlgParser end
cvx bind def /ODESET {ode@dict /x exch def /y x def end tx@Dict begin
ode@dict ode@rpn end end ode@dict xlength end array astore } bind def
/formatoutput {[0 1 2] assembleresult} def rk4 { (\npstODEsolve (RK4),)
odeprint ( "o" output step:\n) odeprint }{ (\npstODEsolve (RKF45),\n)
odeprint (-/+ failed/successful step, "o" output step, "!" step size underflow (stop):\n)
odeprint } ifelse ode@dict /tcur tStart def /outStepCnt 1 def /tout
tStart dt add def 0 0 eq {/ddt ode@ddt def}{/ddt 0 def} ifelse rk4
{/ddt dt def} if end [ [formatoutput] aload pop true setglobal ] globaldict
exch /lorenzXYZseg exch cvx put false setglobal (o) odeprint ode@dict
N end 1 sub { ode@laststate ODEINT [ exch aload pop true setglobal
] globaldict exch /ode@laststate exch put false setglobal [ lorenzXYZseg
[formatoutput] aload pop true setglobal ] globaldict exch /lorenzXYZseg
exch cvx put globaldict /ode@dt ode@dict dt end put globaldict /ode@ddt
ode@dict ddt end put globaldict /ode@tcur ode@dict tcur end put globaldict
/ode@tout ode@dict tout end put false setglobal } repeat (\n) odeprint
end
 1833 2454 a 1833 2454 a
/lorenzXYZall [lorenzXYZall lorenzXYZseg] aload astore cvx def

1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZseg counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0
TeXcolorgray 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj3} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray 1833 2454 a
 tx@odeDict begin /odeprint {0 cvs print flush} def /odeprint load
0 256 string put /ode@tol 1e-6 def /rk4 false def tx@Dict begin 1 dict
begin 0.5 end end ode@dict /tStart exch def end tx@Dict begin 1 dict
begin 0.75 end end ode@dict /tEnd exch def end tx@Dict begin 1 dict
begin 26 cvi end end ode@dict /N exch def end ode@dict /dt tEnd tStart
sub N 1 sub div def end ode@dict /xlength ode@laststate length def
end ode@dict /xlength1 xlength 1 add def end /ode@rpn tx@Dict begin
(10*(x[1]-x[0])|x[0]*(28-x[2])-x[1]|x[0]*x[1]-8/3*x[2]) AlgParser end
cvx bind def /ODESET {ode@dict /x exch def /y x def end tx@Dict begin
ode@dict ode@rpn end end ode@dict xlength end array astore } bind def
/formatoutput {[0 1 2] assembleresult} def rk4 { (\npstODEsolve (RK4),)
odeprint ( "o" output step:\n) odeprint }{ (\npstODEsolve (RKF45),\n)
odeprint (-/+ failed/successful step, "o" output step, "!" step size underflow (stop):\n)
odeprint } ifelse ode@dict /tcur tStart def /outStepCnt 1 def /tout
tStart dt add def 0 0 eq {/ddt ode@ddt def}{/ddt 0 def} ifelse rk4
{/ddt dt def} if end [ [formatoutput] aload pop true setglobal ] globaldict
exch /lorenzXYZseg exch cvx put false setglobal (o) odeprint ode@dict
N end 1 sub { ode@laststate ODEINT [ exch aload pop true setglobal
] globaldict exch /ode@laststate exch put false setglobal [ lorenzXYZseg
[formatoutput] aload pop true setglobal ] globaldict exch /lorenzXYZseg
exch cvx put globaldict /ode@dt ode@dict dt end put globaldict /ode@ddt
ode@dict ddt end put globaldict /ode@tcur ode@dict tcur end put globaldict
/ode@tout ode@dict tout end put false setglobal } repeat (\n) odeprint
end
 1833 2454 a 1833 2454 a
/lorenzXYZall [lorenzXYZall lorenzXYZseg] aload astore cvx def

1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZseg counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0
TeXcolorgray 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj4} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray 1833 2454 a
 tx@odeDict begin /odeprint {0 cvs print flush} def /odeprint load
0 256 string put /ode@tol 1e-6 def /rk4 false def tx@Dict begin 1 dict
begin 0.75 end end ode@dict /tStart exch def end tx@Dict begin 1 dict
begin 1 end end ode@dict /tEnd exch def end tx@Dict begin 1 dict begin
26 cvi end end ode@dict /N exch def end ode@dict /dt tEnd tStart sub
N 1 sub div def end ode@dict /xlength ode@laststate length def end
ode@dict /xlength1 xlength 1 add def end /ode@rpn tx@Dict begin (10*(x[1]-x[0])|x[0]*(28-x[2])-x[1]|x[0]*x[1]-8/3*x[2])
AlgParser end cvx bind def /ODESET {ode@dict /x exch def /y x def end
tx@Dict begin ode@dict ode@rpn end end ode@dict xlength end array astore
} bind def /formatoutput {[0 1 2] assembleresult} def rk4 { (\npstODEsolve (RK4),)
odeprint ( "o" output step:\n) odeprint }{ (\npstODEsolve (RKF45),\n)
odeprint (-/+ failed/successful step, "o" output step, "!" step size underflow (stop):\n)
odeprint } ifelse ode@dict /tcur tStart def /outStepCnt 1 def /tout
tStart dt add def 0 0 eq {/ddt ode@ddt def}{/ddt 0 def} ifelse rk4
{/ddt dt def} if end [ [formatoutput] aload pop true setglobal ] globaldict
exch /lorenzXYZseg exch cvx put false setglobal (o) odeprint ode@dict
N end 1 sub { ode@laststate ODEINT [ exch aload pop true setglobal
] globaldict exch /ode@laststate exch put false setglobal [ lorenzXYZseg
[formatoutput] aload pop true setglobal ] globaldict exch /lorenzXYZseg
exch cvx put globaldict /ode@dt ode@dict dt end put globaldict /ode@ddt
ode@dict ddt end put globaldict /ode@tcur ode@dict tcur end put globaldict
/ode@tout ode@dict tout end put false setglobal } repeat (\n) odeprint
end
 1833 2454 a 1833 2454 a
/lorenzXYZall [lorenzXYZall lorenzXYZseg] aload astore cvx def

1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZseg counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0
TeXcolorgray 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj5} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray 1833 2454 a
 tx@odeDict begin /odeprint {0 cvs print flush} def /odeprint load
0 256 string put /ode@tol 1e-6 def /rk4 false def tx@Dict begin 1 dict
begin 1 end end ode@dict /tStart exch def end tx@Dict begin 1 dict
begin 1.25 end end ode@dict /tEnd exch def end tx@Dict begin 1 dict
begin 26 cvi end end ode@dict /N exch def end ode@dict /dt tEnd tStart
sub N 1 sub div def end ode@dict /xlength ode@laststate length def
end ode@dict /xlength1 xlength 1 add def end /ode@rpn tx@Dict begin
(10*(x[1]-x[0])|x[0]*(28-x[2])-x[1]|x[0]*x[1]-8/3*x[2]) AlgParser end
cvx bind def /ODESET {ode@dict /x exch def /y x def end tx@Dict begin
ode@dict ode@rpn end end ode@dict xlength end array astore } bind def
/formatoutput {[0 1 2] assembleresult} def rk4 { (\npstODEsolve (RK4),)
odeprint ( "o" output step:\n) odeprint }{ (\npstODEsolve (RKF45),\n)
odeprint (-/+ failed/successful step, "o" output step, "!" step size underflow (stop):\n)
odeprint } ifelse ode@dict /tcur tStart def /outStepCnt 1 def /tout
tStart dt add def 0 0 eq {/ddt ode@ddt def}{/ddt 0 def} ifelse rk4
{/ddt dt def} if end [ [formatoutput] aload pop true setglobal ] globaldict
exch /lorenzXYZseg exch cvx put false setglobal (o) odeprint ode@dict
N end 1 sub { ode@laststate ODEINT [ exch aload pop true setglobal
] globaldict exch /ode@laststate exch put false setglobal [ lorenzXYZseg
[formatoutput] aload pop true setglobal ] globaldict exch /lorenzXYZseg
exch cvx put globaldict /ode@dt ode@dict dt end put globaldict /ode@ddt
ode@dict ddt end put globaldict /ode@tcur ode@dict tcur end put globaldict
/ode@tout ode@dict tout end put false setglobal } repeat (\n) odeprint
end
 1833 2454 a 1833 2454 a
/lorenzXYZall [lorenzXYZall lorenzXYZseg] aload astore cvx def

1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZseg counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0
TeXcolorgray 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj6} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray 1833 2454 a
 tx@odeDict begin /odeprint {0 cvs print flush} def /odeprint load
0 256 string put /ode@tol 1e-6 def /rk4 false def tx@Dict begin 1 dict
begin 1.25 end end ode@dict /tStart exch def end tx@Dict begin 1 dict
begin 1.5 end end ode@dict /tEnd exch def end tx@Dict begin 1 dict
begin 26 cvi end end ode@dict /N exch def end ode@dict /dt tEnd tStart
sub N 1 sub div def end ode@dict /xlength ode@laststate length def
end ode@dict /xlength1 xlength 1 add def end /ode@rpn tx@Dict begin
(10*(x[1]-x[0])|x[0]*(28-x[2])-x[1]|x[0]*x[1]-8/3*x[2]) AlgParser end
cvx bind def /ODESET {ode@dict /x exch def /y x def end tx@Dict begin
ode@dict ode@rpn end end ode@dict xlength end array astore } bind def
/formatoutput {[0 1 2] assembleresult} def rk4 { (\npstODEsolve (RK4),)
odeprint ( "o" output step:\n) odeprint }{ (\npstODEsolve (RKF45),\n)
odeprint (-/+ failed/successful step, "o" output step, "!" step size underflow (stop):\n)
odeprint } ifelse ode@dict /tcur tStart def /outStepCnt 1 def /tout
tStart dt add def 0 0 eq {/ddt ode@ddt def}{/ddt 0 def} ifelse rk4
{/ddt dt def} if end [ [formatoutput] aload pop true setglobal ] globaldict
exch /lorenzXYZseg exch cvx put false setglobal (o) odeprint ode@dict
N end 1 sub { ode@laststate ODEINT [ exch aload pop true setglobal
] globaldict exch /ode@laststate exch put false setglobal [ lorenzXYZseg
[formatoutput] aload pop true setglobal ] globaldict exch /lorenzXYZseg
exch cvx put globaldict /ode@dt ode@dict dt end put globaldict /ode@ddt
ode@dict ddt end put globaldict /ode@tcur ode@dict tcur end put globaldict
/ode@tout ode@dict tout end put false setglobal } repeat (\n) odeprint
end
 1833 2454 a 1833 2454 a
/lorenzXYZall [lorenzXYZall lorenzXYZseg] aload astore cvx def

1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZseg counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0
TeXcolorgray 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj7} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray 1833 2454 a
 tx@odeDict begin /odeprint {0 cvs print flush} def /odeprint load
0 256 string put /ode@tol 1e-6 def /rk4 false def tx@Dict begin 1 dict
begin 1.5 end end ode@dict /tStart exch def end tx@Dict begin 1 dict
begin 1.75 end end ode@dict /tEnd exch def end tx@Dict begin 1 dict
begin 26 cvi end end ode@dict /N exch def end ode@dict /dt tEnd tStart
sub N 1 sub div def end ode@dict /xlength ode@laststate length def
end ode@dict /xlength1 xlength 1 add def end /ode@rpn tx@Dict begin
(10*(x[1]-x[0])|x[0]*(28-x[2])-x[1]|x[0]*x[1]-8/3*x[2]) AlgParser end
cvx bind def /ODESET {ode@dict /x exch def /y x def end tx@Dict begin
ode@dict ode@rpn end end ode@dict xlength end array astore } bind def
/formatoutput {[0 1 2] assembleresult} def rk4 { (\npstODEsolve (RK4),)
odeprint ( "o" output step:\n) odeprint }{ (\npstODEsolve (RKF45),\n)
odeprint (-/+ failed/successful step, "o" output step, "!" step size underflow (stop):\n)
odeprint } ifelse ode@dict /tcur tStart def /outStepCnt 1 def /tout
tStart dt add def 0 0 eq {/ddt ode@ddt def}{/ddt 0 def} ifelse rk4
{/ddt dt def} if end [ [formatoutput] aload pop true setglobal ] globaldict
exch /lorenzXYZseg exch cvx put false setglobal (o) odeprint ode@dict
N end 1 sub { ode@laststate ODEINT [ exch aload pop true setglobal
] globaldict exch /ode@laststate exch put false setglobal [ lorenzXYZseg
[formatoutput] aload pop true setglobal ] globaldict exch /lorenzXYZseg
exch cvx put globaldict /ode@dt ode@dict dt end put globaldict /ode@ddt
ode@dict ddt end put globaldict /ode@tcur ode@dict tcur end put globaldict
/ode@tout ode@dict tout end put false setglobal } repeat (\n) odeprint
end
 1833 2454 a 1833 2454 a
/lorenzXYZall [lorenzXYZall lorenzXYZseg] aload astore cvx def

1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZseg counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0
TeXcolorgray 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj8} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray 1833 2454 a
 tx@odeDict begin /odeprint {0 cvs print flush} def /odeprint load
0 256 string put /ode@tol 1e-6 def /rk4 false def tx@Dict begin 1 dict
begin 1.75 end end ode@dict /tStart exch def end tx@Dict begin 1 dict
begin 2 end end ode@dict /tEnd exch def end tx@Dict begin 1 dict begin
26 cvi end end ode@dict /N exch def end ode@dict /dt tEnd tStart sub
N 1 sub div def end ode@dict /xlength ode@laststate length def end
ode@dict /xlength1 xlength 1 add def end /ode@rpn tx@Dict begin (10*(x[1]-x[0])|x[0]*(28-x[2])-x[1]|x[0]*x[1]-8/3*x[2])
AlgParser end cvx bind def /ODESET {ode@dict /x exch def /y x def end
tx@Dict begin ode@dict ode@rpn end end ode@dict xlength end array astore
} bind def /formatoutput {[0 1 2] assembleresult} def rk4 { (\npstODEsolve (RK4),)
odeprint ( "o" output step:\n) odeprint }{ (\npstODEsolve (RKF45),\n)
odeprint (-/+ failed/successful step, "o" output step, "!" step size underflow (stop):\n)
odeprint } ifelse ode@dict /tcur tStart def /outStepCnt 1 def /tout
tStart dt add def 0 0 eq {/ddt ode@ddt def}{/ddt 0 def} ifelse rk4
{/ddt dt def} if end [ [formatoutput] aload pop true setglobal ] globaldict
exch /lorenzXYZseg exch cvx put false setglobal (o) odeprint ode@dict
N end 1 sub { ode@laststate ODEINT [ exch aload pop true setglobal
] globaldict exch /ode@laststate exch put false setglobal [ lorenzXYZseg
[formatoutput] aload pop true setglobal ] globaldict exch /lorenzXYZseg
exch cvx put globaldict /ode@dt ode@dict dt end put globaldict /ode@ddt
ode@dict ddt end put globaldict /ode@tcur ode@dict tcur end put globaldict
/ode@tout ode@dict tout end put false setglobal } repeat (\n) odeprint
end
 1833 2454 a 1833 2454 a
/lorenzXYZall [lorenzXYZall lorenzXYZseg] aload astore cvx def

1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZseg counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0
TeXcolorgray 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj9} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray 1833 2454 a
 tx@odeDict begin /odeprint {0 cvs print flush} def /odeprint load
0 256 string put /ode@tol 1e-6 def /rk4 false def tx@Dict begin 1 dict
begin 2 end end ode@dict /tStart exch def end tx@Dict begin 1 dict
begin 2.25 end end ode@dict /tEnd exch def end tx@Dict begin 1 dict
begin 26 cvi end end ode@dict /N exch def end ode@dict /dt tEnd tStart
sub N 1 sub div def end ode@dict /xlength ode@laststate length def
end ode@dict /xlength1 xlength 1 add def end /ode@rpn tx@Dict begin
(10*(x[1]-x[0])|x[0]*(28-x[2])-x[1]|x[0]*x[1]-8/3*x[2]) AlgParser end
cvx bind def /ODESET {ode@dict /x exch def /y x def end tx@Dict begin
ode@dict ode@rpn end end ode@dict xlength end array astore } bind def
/formatoutput {[0 1 2] assembleresult} def rk4 { (\npstODEsolve (RK4),)
odeprint ( "o" output step:\n) odeprint }{ (\npstODEsolve (RKF45),\n)
odeprint (-/+ failed/successful step, "o" output step, "!" step size underflow (stop):\n)
odeprint } ifelse ode@dict /tcur tStart def /outStepCnt 1 def /tout
tStart dt add def 0 0 eq {/ddt ode@ddt def}{/ddt 0 def} ifelse rk4
{/ddt dt def} if end [ [formatoutput] aload pop true setglobal ] globaldict
exch /lorenzXYZseg exch cvx put false setglobal (o) odeprint ode@dict
N end 1 sub { ode@laststate ODEINT [ exch aload pop true setglobal
] globaldict exch /ode@laststate exch put false setglobal [ lorenzXYZseg
[formatoutput] aload pop true setglobal ] globaldict exch /lorenzXYZseg
exch cvx put globaldict /ode@dt ode@dict dt end put globaldict /ode@ddt
ode@dict ddt end put globaldict /ode@tcur ode@dict tcur end put globaldict
/ode@tout ode@dict tout end put false setglobal } repeat (\n) odeprint
end
 1833 2454 a 1833 2454 a
/lorenzXYZall [lorenzXYZall lorenzXYZseg] aload astore cvx def

1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZseg counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0
TeXcolorgray 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj10} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray 1833 2454 a
 tx@odeDict begin /odeprint {0 cvs print flush} def /odeprint load
0 256 string put /ode@tol 1e-6 def /rk4 false def tx@Dict begin 1 dict
begin 2.25 end end ode@dict /tStart exch def end tx@Dict begin 1 dict
begin 2.5 end end ode@dict /tEnd exch def end tx@Dict begin 1 dict
begin 26 cvi end end ode@dict /N exch def end ode@dict /dt tEnd tStart
sub N 1 sub div def end ode@dict /xlength ode@laststate length def
end ode@dict /xlength1 xlength 1 add def end /ode@rpn tx@Dict begin
(10*(x[1]-x[0])|x[0]*(28-x[2])-x[1]|x[0]*x[1]-8/3*x[2]) AlgParser end
cvx bind def /ODESET {ode@dict /x exch def /y x def end tx@Dict begin
ode@dict ode@rpn end end ode@dict xlength end array astore } bind def
/formatoutput {[0 1 2] assembleresult} def rk4 { (\npstODEsolve (RK4),)
odeprint ( "o" output step:\n) odeprint }{ (\npstODEsolve (RKF45),\n)
odeprint (-/+ failed/successful step, "o" output step, "!" step size underflow (stop):\n)
odeprint } ifelse ode@dict /tcur tStart def /outStepCnt 1 def /tout
tStart dt add def 0 0 eq {/ddt ode@ddt def}{/ddt 0 def} ifelse rk4
{/ddt dt def} if end [ [formatoutput] aload pop true setglobal ] globaldict
exch /lorenzXYZseg exch cvx put false setglobal (o) odeprint ode@dict
N end 1 sub { ode@laststate ODEINT [ exch aload pop true setglobal
] globaldict exch /ode@laststate exch put false setglobal [ lorenzXYZseg
[formatoutput] aload pop true setglobal ] globaldict exch /lorenzXYZseg
exch cvx put globaldict /ode@dt ode@dict dt end put globaldict /ode@ddt
ode@dict ddt end put globaldict /ode@tcur ode@dict tcur end put globaldict
/ode@tout ode@dict tout end put false setglobal } repeat (\n) odeprint
end
 1833 2454 a 1833 2454 a
/lorenzXYZall [lorenzXYZall lorenzXYZseg] aload astore cvx def

1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZseg counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0
TeXcolorgray 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj11} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray 1833 2454 a
 tx@odeDict begin /odeprint {0 cvs print flush} def /odeprint load
0 256 string put /ode@tol 1e-6 def /rk4 false def tx@Dict begin 1 dict
begin 2.5 end end ode@dict /tStart exch def end tx@Dict begin 1 dict
begin 2.75 end end ode@dict /tEnd exch def end tx@Dict begin 1 dict
begin 26 cvi end end ode@dict /N exch def end ode@dict /dt tEnd tStart
sub N 1 sub div def end ode@dict /xlength ode@laststate length def
end ode@dict /xlength1 xlength 1 add def end /ode@rpn tx@Dict begin
(10*(x[1]-x[0])|x[0]*(28-x[2])-x[1]|x[0]*x[1]-8/3*x[2]) AlgParser end
cvx bind def /ODESET {ode@dict /x exch def /y x def end tx@Dict begin
ode@dict ode@rpn end end ode@dict xlength end array astore } bind def
/formatoutput {[0 1 2] assembleresult} def rk4 { (\npstODEsolve (RK4),)
odeprint ( "o" output step:\n) odeprint }{ (\npstODEsolve (RKF45),\n)
odeprint (-/+ failed/successful step, "o" output step, "!" step size underflow (stop):\n)
odeprint } ifelse ode@dict /tcur tStart def /outStepCnt 1 def /tout
tStart dt add def 0 0 eq {/ddt ode@ddt def}{/ddt 0 def} ifelse rk4
{/ddt dt def} if end [ [formatoutput] aload pop true setglobal ] globaldict
exch /lorenzXYZseg exch cvx put false setglobal (o) odeprint ode@dict
N end 1 sub { ode@laststate ODEINT [ exch aload pop true setglobal
] globaldict exch /ode@laststate exch put false setglobal [ lorenzXYZseg
[formatoutput] aload pop true setglobal ] globaldict exch /lorenzXYZseg
exch cvx put globaldict /ode@dt ode@dict dt end put globaldict /ode@ddt
ode@dict ddt end put globaldict /ode@tcur ode@dict tcur end put globaldict
/ode@tout ode@dict tout end put false setglobal } repeat (\n) odeprint
end
 1833 2454 a 1833 2454 a
/lorenzXYZall [lorenzXYZall lorenzXYZseg] aload astore cvx def

1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZseg counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0
TeXcolorgray 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj12} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray 1833 2454 a
 tx@odeDict begin /odeprint {0 cvs print flush} def /odeprint load
0 256 string put /ode@tol 1e-6 def /rk4 false def tx@Dict begin 1 dict
begin 2.75 end end ode@dict /tStart exch def end tx@Dict begin 1 dict
begin 3 end end ode@dict /tEnd exch def end tx@Dict begin 1 dict begin
26 cvi end end ode@dict /N exch def end ode@dict /dt tEnd tStart sub
N 1 sub div def end ode@dict /xlength ode@laststate length def end
ode@dict /xlength1 xlength 1 add def end /ode@rpn tx@Dict begin (10*(x[1]-x[0])|x[0]*(28-x[2])-x[1]|x[0]*x[1]-8/3*x[2])
AlgParser end cvx bind def /ODESET {ode@dict /x exch def /y x def end
tx@Dict begin ode@dict ode@rpn end end ode@dict xlength end array astore
} bind def /formatoutput {[0 1 2] assembleresult} def rk4 { (\npstODEsolve (RK4),)
odeprint ( "o" output step:\n) odeprint }{ (\npstODEsolve (RKF45),\n)
odeprint (-/+ failed/successful step, "o" output step, "!" step size underflow (stop):\n)
odeprint } ifelse ode@dict /tcur tStart def /outStepCnt 1 def /tout
tStart dt add def 0 0 eq {/ddt ode@ddt def}{/ddt 0 def} ifelse rk4
{/ddt dt def} if end [ [formatoutput] aload pop true setglobal ] globaldict
exch /lorenzXYZseg exch cvx put false setglobal (o) odeprint ode@dict
N end 1 sub { ode@laststate ODEINT [ exch aload pop true setglobal
] globaldict exch /ode@laststate exch put false setglobal [ lorenzXYZseg
[formatoutput] aload pop true setglobal ] globaldict exch /lorenzXYZseg
exch cvx put globaldict /ode@dt ode@dict dt end put globaldict /ode@ddt
ode@dict ddt end put globaldict /ode@tcur ode@dict tcur end put globaldict
/ode@tout ode@dict tout end put false setglobal } repeat (\n) odeprint
end
 1833 2454 a 1833 2454 a
/lorenzXYZall [lorenzXYZall lorenzXYZseg] aload astore cvx def

1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZseg counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0
TeXcolorgray 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj13} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray 1833 2454 a
 tx@odeDict begin /odeprint {0 cvs print flush} def /odeprint load
0 256 string put /ode@tol 1e-6 def /rk4 false def tx@Dict begin 1 dict
begin 3 end end ode@dict /tStart exch def end tx@Dict begin 1 dict
begin 3.25 end end ode@dict /tEnd exch def end tx@Dict begin 1 dict
begin 26 cvi end end ode@dict /N exch def end ode@dict /dt tEnd tStart
sub N 1 sub div def end ode@dict /xlength ode@laststate length def
end ode@dict /xlength1 xlength 1 add def end /ode@rpn tx@Dict begin
(10*(x[1]-x[0])|x[0]*(28-x[2])-x[1]|x[0]*x[1]-8/3*x[2]) AlgParser end
cvx bind def /ODESET {ode@dict /x exch def /y x def end tx@Dict begin
ode@dict ode@rpn end end ode@dict xlength end array astore } bind def
/formatoutput {[0 1 2] assembleresult} def rk4 { (\npstODEsolve (RK4),)
odeprint ( "o" output step:\n) odeprint }{ (\npstODEsolve (RKF45),\n)
odeprint (-/+ failed/successful step, "o" output step, "!" step size underflow (stop):\n)
odeprint } ifelse ode@dict /tcur tStart def /outStepCnt 1 def /tout
tStart dt add def 0 0 eq {/ddt ode@ddt def}{/ddt 0 def} ifelse rk4
{/ddt dt def} if end [ [formatoutput] aload pop true setglobal ] globaldict
exch /lorenzXYZseg exch cvx put false setglobal (o) odeprint ode@dict
N end 1 sub { ode@laststate ODEINT [ exch aload pop true setglobal
] globaldict exch /ode@laststate exch put false setglobal [ lorenzXYZseg
[formatoutput] aload pop true setglobal ] globaldict exch /lorenzXYZseg
exch cvx put globaldict /ode@dt ode@dict dt end put globaldict /ode@ddt
ode@dict ddt end put globaldict /ode@tcur ode@dict tcur end put globaldict
/ode@tout ode@dict tout end put false setglobal } repeat (\n) odeprint
end
 1833 2454 a 1833 2454 a
/lorenzXYZall [lorenzXYZall lorenzXYZseg] aload astore cvx def

1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZseg counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0
TeXcolorgray 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj14} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray 1833 2454 a
 tx@odeDict begin /odeprint {0 cvs print flush} def /odeprint load
0 256 string put /ode@tol 1e-6 def /rk4 false def tx@Dict begin 1 dict
begin 3.25 end end ode@dict /tStart exch def end tx@Dict begin 1 dict
begin 3.5 end end ode@dict /tEnd exch def end tx@Dict begin 1 dict
begin 26 cvi end end ode@dict /N exch def end ode@dict /dt tEnd tStart
sub N 1 sub div def end ode@dict /xlength ode@laststate length def
end ode@dict /xlength1 xlength 1 add def end /ode@rpn tx@Dict begin
(10*(x[1]-x[0])|x[0]*(28-x[2])-x[1]|x[0]*x[1]-8/3*x[2]) AlgParser end
cvx bind def /ODESET {ode@dict /x exch def /y x def end tx@Dict begin
ode@dict ode@rpn end end ode@dict xlength end array astore } bind def
/formatoutput {[0 1 2] assembleresult} def rk4 { (\npstODEsolve (RK4),)
odeprint ( "o" output step:\n) odeprint }{ (\npstODEsolve (RKF45),\n)
odeprint (-/+ failed/successful step, "o" output step, "!" step size underflow (stop):\n)
odeprint } ifelse ode@dict /tcur tStart def /outStepCnt 1 def /tout
tStart dt add def 0 0 eq {/ddt ode@ddt def}{/ddt 0 def} ifelse rk4
{/ddt dt def} if end [ [formatoutput] aload pop true setglobal ] globaldict
exch /lorenzXYZseg exch cvx put false setglobal (o) odeprint ode@dict
N end 1 sub { ode@laststate ODEINT [ exch aload pop true setglobal
] globaldict exch /ode@laststate exch put false setglobal [ lorenzXYZseg
[formatoutput] aload pop true setglobal ] globaldict exch /lorenzXYZseg
exch cvx put globaldict /ode@dt ode@dict dt end put globaldict /ode@ddt
ode@dict ddt end put globaldict /ode@tcur ode@dict tcur end put globaldict
/ode@tout ode@dict tout end put false setglobal } repeat (\n) odeprint
end
 1833 2454 a 1833 2454 a
/lorenzXYZall [lorenzXYZall lorenzXYZseg] aload astore cvx def

1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZseg counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0
TeXcolorgray 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj15} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray 1833 2454 a
 tx@odeDict begin /odeprint {0 cvs print flush} def /odeprint load
0 256 string put /ode@tol 1e-6 def /rk4 false def tx@Dict begin 1 dict
begin 3.5 end end ode@dict /tStart exch def end tx@Dict begin 1 dict
begin 3.75 end end ode@dict /tEnd exch def end tx@Dict begin 1 dict
begin 26 cvi end end ode@dict /N exch def end ode@dict /dt tEnd tStart
sub N 1 sub div def end ode@dict /xlength ode@laststate length def
end ode@dict /xlength1 xlength 1 add def end /ode@rpn tx@Dict begin
(10*(x[1]-x[0])|x[0]*(28-x[2])-x[1]|x[0]*x[1]-8/3*x[2]) AlgParser end
cvx bind def /ODESET {ode@dict /x exch def /y x def end tx@Dict begin
ode@dict ode@rpn end end ode@dict xlength end array astore } bind def
/formatoutput {[0 1 2] assembleresult} def rk4 { (\npstODEsolve (RK4),)
odeprint ( "o" output step:\n) odeprint }{ (\npstODEsolve (RKF45),\n)
odeprint (-/+ failed/successful step, "o" output step, "!" step size underflow (stop):\n)
odeprint } ifelse ode@dict /tcur tStart def /outStepCnt 1 def /tout
tStart dt add def 0 0 eq {/ddt ode@ddt def}{/ddt 0 def} ifelse rk4
{/ddt dt def} if end [ [formatoutput] aload pop true setglobal ] globaldict
exch /lorenzXYZseg exch cvx put false setglobal (o) odeprint ode@dict
N end 1 sub { ode@laststate ODEINT [ exch aload pop true setglobal
] globaldict exch /ode@laststate exch put false setglobal [ lorenzXYZseg
[formatoutput] aload pop true setglobal ] globaldict exch /lorenzXYZseg
exch cvx put globaldict /ode@dt ode@dict dt end put globaldict /ode@ddt
ode@dict ddt end put globaldict /ode@tcur ode@dict tcur end put globaldict
/ode@tout ode@dict tout end put false setglobal } repeat (\n) odeprint
end
 1833 2454 a 1833 2454 a
/lorenzXYZall [lorenzXYZall lorenzXYZseg] aload astore cvx def

1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZseg counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0
TeXcolorgray 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj16} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray 1833 2454 a
 tx@odeDict begin /odeprint {0 cvs print flush} def /odeprint load
0 256 string put /ode@tol 1e-6 def /rk4 false def tx@Dict begin 1 dict
begin 3.75 end end ode@dict /tStart exch def end tx@Dict begin 1 dict
begin 4 end end ode@dict /tEnd exch def end tx@Dict begin 1 dict begin
26 cvi end end ode@dict /N exch def end ode@dict /dt tEnd tStart sub
N 1 sub div def end ode@dict /xlength ode@laststate length def end
ode@dict /xlength1 xlength 1 add def end /ode@rpn tx@Dict begin (10*(x[1]-x[0])|x[0]*(28-x[2])-x[1]|x[0]*x[1]-8/3*x[2])
AlgParser end cvx bind def /ODESET {ode@dict /x exch def /y x def end
tx@Dict begin ode@dict ode@rpn end end ode@dict xlength end array astore
} bind def /formatoutput {[0 1 2] assembleresult} def rk4 { (\npstODEsolve (RK4),)
odeprint ( "o" output step:\n) odeprint }{ (\npstODEsolve (RKF45),\n)
odeprint (-/+ failed/successful step, "o" output step, "!" step size underflow (stop):\n)
odeprint } ifelse ode@dict /tcur tStart def /outStepCnt 1 def /tout
tStart dt add def 0 0 eq {/ddt ode@ddt def}{/ddt 0 def} ifelse rk4
{/ddt dt def} if end [ [formatoutput] aload pop true setglobal ] globaldict
exch /lorenzXYZseg exch cvx put false setglobal (o) odeprint ode@dict
N end 1 sub { ode@laststate ODEINT [ exch aload pop true setglobal
] globaldict exch /ode@laststate exch put false setglobal [ lorenzXYZseg
[formatoutput] aload pop true setglobal ] globaldict exch /lorenzXYZseg
exch cvx put globaldict /ode@dt ode@dict dt end put globaldict /ode@ddt
ode@dict ddt end put globaldict /ode@tcur ode@dict tcur end put globaldict
/ode@tout ode@dict tout end put false setglobal } repeat (\n) odeprint
end
 1833 2454 a 1833 2454 a
/lorenzXYZall [lorenzXYZall lorenzXYZseg] aload astore cvx def

1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZseg counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0
TeXcolorgray 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj17} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray 1833 2454 a
 tx@odeDict begin /odeprint {0 cvs print flush} def /odeprint load
0 256 string put /ode@tol 1e-6 def /rk4 false def tx@Dict begin 1 dict
begin 4 end end ode@dict /tStart exch def end tx@Dict begin 1 dict
begin 4.25 end end ode@dict /tEnd exch def end tx@Dict begin 1 dict
begin 26 cvi end end ode@dict /N exch def end ode@dict /dt tEnd tStart
sub N 1 sub div def end ode@dict /xlength ode@laststate length def
end ode@dict /xlength1 xlength 1 add def end /ode@rpn tx@Dict begin
(10*(x[1]-x[0])|x[0]*(28-x[2])-x[1]|x[0]*x[1]-8/3*x[2]) AlgParser end
cvx bind def /ODESET {ode@dict /x exch def /y x def end tx@Dict begin
ode@dict ode@rpn end end ode@dict xlength end array astore } bind def
/formatoutput {[0 1 2] assembleresult} def rk4 { (\npstODEsolve (RK4),)
odeprint ( "o" output step:\n) odeprint }{ (\npstODEsolve (RKF45),\n)
odeprint (-/+ failed/successful step, "o" output step, "!" step size underflow (stop):\n)
odeprint } ifelse ode@dict /tcur tStart def /outStepCnt 1 def /tout
tStart dt add def 0 0 eq {/ddt ode@ddt def}{/ddt 0 def} ifelse rk4
{/ddt dt def} if end [ [formatoutput] aload pop true setglobal ] globaldict
exch /lorenzXYZseg exch cvx put false setglobal (o) odeprint ode@dict
N end 1 sub { ode@laststate ODEINT [ exch aload pop true setglobal
] globaldict exch /ode@laststate exch put false setglobal [ lorenzXYZseg
[formatoutput] aload pop true setglobal ] globaldict exch /lorenzXYZseg
exch cvx put globaldict /ode@dt ode@dict dt end put globaldict /ode@ddt
ode@dict ddt end put globaldict /ode@tcur ode@dict tcur end put globaldict
/ode@tout ode@dict tout end put false setglobal } repeat (\n) odeprint
end
 1833 2454 a 1833 2454 a
/lorenzXYZall [lorenzXYZall lorenzXYZseg] aload astore cvx def

1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZseg counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0
TeXcolorgray 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj18} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray 1833 2454 a
 tx@odeDict begin /odeprint {0 cvs print flush} def /odeprint load
0 256 string put /ode@tol 1e-6 def /rk4 false def tx@Dict begin 1 dict
begin 4.25 end end ode@dict /tStart exch def end tx@Dict begin 1 dict
begin 4.5 end end ode@dict /tEnd exch def end tx@Dict begin 1 dict
begin 26 cvi end end ode@dict /N exch def end ode@dict /dt tEnd tStart
sub N 1 sub div def end ode@dict /xlength ode@laststate length def
end ode@dict /xlength1 xlength 1 add def end /ode@rpn tx@Dict begin
(10*(x[1]-x[0])|x[0]*(28-x[2])-x[1]|x[0]*x[1]-8/3*x[2]) AlgParser end
cvx bind def /ODESET {ode@dict /x exch def /y x def end tx@Dict begin
ode@dict ode@rpn end end ode@dict xlength end array astore } bind def
/formatoutput {[0 1 2] assembleresult} def rk4 { (\npstODEsolve (RK4),)
odeprint ( "o" output step:\n) odeprint }{ (\npstODEsolve (RKF45),\n)
odeprint (-/+ failed/successful step, "o" output step, "!" step size underflow (stop):\n)
odeprint } ifelse ode@dict /tcur tStart def /outStepCnt 1 def /tout
tStart dt add def 0 0 eq {/ddt ode@ddt def}{/ddt 0 def} ifelse rk4
{/ddt dt def} if end [ [formatoutput] aload pop true setglobal ] globaldict
exch /lorenzXYZseg exch cvx put false setglobal (o) odeprint ode@dict
N end 1 sub { ode@laststate ODEINT [ exch aload pop true setglobal
] globaldict exch /ode@laststate exch put false setglobal [ lorenzXYZseg
[formatoutput] aload pop true setglobal ] globaldict exch /lorenzXYZseg
exch cvx put globaldict /ode@dt ode@dict dt end put globaldict /ode@ddt
ode@dict ddt end put globaldict /ode@tcur ode@dict tcur end put globaldict
/ode@tout ode@dict tout end put false setglobal } repeat (\n) odeprint
end
 1833 2454 a 1833 2454 a
/lorenzXYZall [lorenzXYZall lorenzXYZseg] aload astore cvx def

1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZseg counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0
TeXcolorgray 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj19} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray 1833 2454 a
 tx@odeDict begin /odeprint {0 cvs print flush} def /odeprint load
0 256 string put /ode@tol 1e-6 def /rk4 false def tx@Dict begin 1 dict
begin 4.5 end end ode@dict /tStart exch def end tx@Dict begin 1 dict
begin 4.75 end end ode@dict /tEnd exch def end tx@Dict begin 1 dict
begin 26 cvi end end ode@dict /N exch def end ode@dict /dt tEnd tStart
sub N 1 sub div def end ode@dict /xlength ode@laststate length def
end ode@dict /xlength1 xlength 1 add def end /ode@rpn tx@Dict begin
(10*(x[1]-x[0])|x[0]*(28-x[2])-x[1]|x[0]*x[1]-8/3*x[2]) AlgParser end
cvx bind def /ODESET {ode@dict /x exch def /y x def end tx@Dict begin
ode@dict ode@rpn end end ode@dict xlength end array astore } bind def
/formatoutput {[0 1 2] assembleresult} def rk4 { (\npstODEsolve (RK4),)
odeprint ( "o" output step:\n) odeprint }{ (\npstODEsolve (RKF45),\n)
odeprint (-/+ failed/successful step, "o" output step, "!" step size underflow (stop):\n)
odeprint } ifelse ode@dict /tcur tStart def /outStepCnt 1 def /tout
tStart dt add def 0 0 eq {/ddt ode@ddt def}{/ddt 0 def} ifelse rk4
{/ddt dt def} if end [ [formatoutput] aload pop true setglobal ] globaldict
exch /lorenzXYZseg exch cvx put false setglobal (o) odeprint ode@dict
N end 1 sub { ode@laststate ODEINT [ exch aload pop true setglobal
] globaldict exch /ode@laststate exch put false setglobal [ lorenzXYZseg
[formatoutput] aload pop true setglobal ] globaldict exch /lorenzXYZseg
exch cvx put globaldict /ode@dt ode@dict dt end put globaldict /ode@ddt
ode@dict ddt end put globaldict /ode@tcur ode@dict tcur end put globaldict
/ode@tout ode@dict tout end put false setglobal } repeat (\n) odeprint
end
 1833 2454 a 1833 2454 a
/lorenzXYZall [lorenzXYZall lorenzXYZseg] aload astore cvx def

1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZseg counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0
TeXcolorgray 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj20} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray 1833 2454 a
 tx@odeDict begin /odeprint {0 cvs print flush} def /odeprint load
0 256 string put /ode@tol 1e-6 def /rk4 false def tx@Dict begin 1 dict
begin 4.75 end end ode@dict /tStart exch def end tx@Dict begin 1 dict
begin 5 end end ode@dict /tEnd exch def end tx@Dict begin 1 dict begin
26 cvi end end ode@dict /N exch def end ode@dict /dt tEnd tStart sub
N 1 sub div def end ode@dict /xlength ode@laststate length def end
ode@dict /xlength1 xlength 1 add def end /ode@rpn tx@Dict begin (10*(x[1]-x[0])|x[0]*(28-x[2])-x[1]|x[0]*x[1]-8/3*x[2])
AlgParser end cvx bind def /ODESET {ode@dict /x exch def /y x def end
tx@Dict begin ode@dict ode@rpn end end ode@dict xlength end array astore
} bind def /formatoutput {[0 1 2] assembleresult} def rk4 { (\npstODEsolve (RK4),)
odeprint ( "o" output step:\n) odeprint }{ (\npstODEsolve (RKF45),\n)
odeprint (-/+ failed/successful step, "o" output step, "!" step size underflow (stop):\n)
odeprint } ifelse ode@dict /tcur tStart def /outStepCnt 1 def /tout
tStart dt add def 0 0 eq {/ddt ode@ddt def}{/ddt 0 def} ifelse rk4
{/ddt dt def} if end [ [formatoutput] aload pop true setglobal ] globaldict
exch /lorenzXYZseg exch cvx put false setglobal (o) odeprint ode@dict
N end 1 sub { ode@laststate ODEINT [ exch aload pop true setglobal
] globaldict exch /ode@laststate exch put false setglobal [ lorenzXYZseg
[formatoutput] aload pop true setglobal ] globaldict exch /lorenzXYZseg
exch cvx put globaldict /ode@dt ode@dict dt end put globaldict /ode@ddt
ode@dict ddt end put globaldict /ode@tcur ode@dict tcur end put globaldict
/ode@tout ode@dict tout end put false setglobal } repeat (\n) odeprint
end
 1833 2454 a 1833 2454 a
/lorenzXYZall [lorenzXYZall lorenzXYZseg] aload astore cvx def

1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZseg counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0
TeXcolorgray 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj21} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray 1833 2454 a
 tx@odeDict begin /odeprint {0 cvs print flush} def /odeprint load
0 256 string put /ode@tol 1e-6 def /rk4 false def tx@Dict begin 1 dict
begin 5 end end ode@dict /tStart exch def end tx@Dict begin 1 dict
begin 5.25 end end ode@dict /tEnd exch def end tx@Dict begin 1 dict
begin 26 cvi end end ode@dict /N exch def end ode@dict /dt tEnd tStart
sub N 1 sub div def end ode@dict /xlength ode@laststate length def
end ode@dict /xlength1 xlength 1 add def end /ode@rpn tx@Dict begin
(10*(x[1]-x[0])|x[0]*(28-x[2])-x[1]|x[0]*x[1]-8/3*x[2]) AlgParser end
cvx bind def /ODESET {ode@dict /x exch def /y x def end tx@Dict begin
ode@dict ode@rpn end end ode@dict xlength end array astore } bind def
/formatoutput {[0 1 2] assembleresult} def rk4 { (\npstODEsolve (RK4),)
odeprint ( "o" output step:\n) odeprint }{ (\npstODEsolve (RKF45),\n)
odeprint (-/+ failed/successful step, "o" output step, "!" step size underflow (stop):\n)
odeprint } ifelse ode@dict /tcur tStart def /outStepCnt 1 def /tout
tStart dt add def 0 0 eq {/ddt ode@ddt def}{/ddt 0 def} ifelse rk4
{/ddt dt def} if end [ [formatoutput] aload pop true setglobal ] globaldict
exch /lorenzXYZseg exch cvx put false setglobal (o) odeprint ode@dict
N end 1 sub { ode@laststate ODEINT [ exch aload pop true setglobal
] globaldict exch /ode@laststate exch put false setglobal [ lorenzXYZseg
[formatoutput] aload pop true setglobal ] globaldict exch /lorenzXYZseg
exch cvx put globaldict /ode@dt ode@dict dt end put globaldict /ode@ddt
ode@dict ddt end put globaldict /ode@tcur ode@dict tcur end put globaldict
/ode@tout ode@dict tout end put false setglobal } repeat (\n) odeprint
end
 1833 2454 a 1833 2454 a
/lorenzXYZall [lorenzXYZall lorenzXYZseg] aload astore cvx def

1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZseg counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0
TeXcolorgray 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj22} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray 1833 2454 a
 tx@odeDict begin /odeprint {0 cvs print flush} def /odeprint load
0 256 string put /ode@tol 1e-6 def /rk4 false def tx@Dict begin 1 dict
begin 5.25 end end ode@dict /tStart exch def end tx@Dict begin 1 dict
begin 5.5 end end ode@dict /tEnd exch def end tx@Dict begin 1 dict
begin 26 cvi end end ode@dict /N exch def end ode@dict /dt tEnd tStart
sub N 1 sub div def end ode@dict /xlength ode@laststate length def
end ode@dict /xlength1 xlength 1 add def end /ode@rpn tx@Dict begin
(10*(x[1]-x[0])|x[0]*(28-x[2])-x[1]|x[0]*x[1]-8/3*x[2]) AlgParser end
cvx bind def /ODESET {ode@dict /x exch def /y x def end tx@Dict begin
ode@dict ode@rpn end end ode@dict xlength end array astore } bind def
/formatoutput {[0 1 2] assembleresult} def rk4 { (\npstODEsolve (RK4),)
odeprint ( "o" output step:\n) odeprint }{ (\npstODEsolve (RKF45),\n)
odeprint (-/+ failed/successful step, "o" output step, "!" step size underflow (stop):\n)
odeprint } ifelse ode@dict /tcur tStart def /outStepCnt 1 def /tout
tStart dt add def 0 0 eq {/ddt ode@ddt def}{/ddt 0 def} ifelse rk4
{/ddt dt def} if end [ [formatoutput] aload pop true setglobal ] globaldict
exch /lorenzXYZseg exch cvx put false setglobal (o) odeprint ode@dict
N end 1 sub { ode@laststate ODEINT [ exch aload pop true setglobal
] globaldict exch /ode@laststate exch put false setglobal [ lorenzXYZseg
[formatoutput] aload pop true setglobal ] globaldict exch /lorenzXYZseg
exch cvx put globaldict /ode@dt ode@dict dt end put globaldict /ode@ddt
ode@dict ddt end put globaldict /ode@tcur ode@dict tcur end put globaldict
/ode@tout ode@dict tout end put false setglobal } repeat (\n) odeprint
end
 1833 2454 a 1833 2454 a
/lorenzXYZall [lorenzXYZall lorenzXYZseg] aload astore cvx def

1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZseg counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0
TeXcolorgray 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj23} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray 1833 2454 a
 tx@odeDict begin /odeprint {0 cvs print flush} def /odeprint load
0 256 string put /ode@tol 1e-6 def /rk4 false def tx@Dict begin 1 dict
begin 5.5 end end ode@dict /tStart exch def end tx@Dict begin 1 dict
begin 5.75 end end ode@dict /tEnd exch def end tx@Dict begin 1 dict
begin 26 cvi end end ode@dict /N exch def end ode@dict /dt tEnd tStart
sub N 1 sub div def end ode@dict /xlength ode@laststate length def
end ode@dict /xlength1 xlength 1 add def end /ode@rpn tx@Dict begin
(10*(x[1]-x[0])|x[0]*(28-x[2])-x[1]|x[0]*x[1]-8/3*x[2]) AlgParser end
cvx bind def /ODESET {ode@dict /x exch def /y x def end tx@Dict begin
ode@dict ode@rpn end end ode@dict xlength end array astore } bind def
/formatoutput {[0 1 2] assembleresult} def rk4 { (\npstODEsolve (RK4),)
odeprint ( "o" output step:\n) odeprint }{ (\npstODEsolve (RKF45),\n)
odeprint (-/+ failed/successful step, "o" output step, "!" step size underflow (stop):\n)
odeprint } ifelse ode@dict /tcur tStart def /outStepCnt 1 def /tout
tStart dt add def 0 0 eq {/ddt ode@ddt def}{/ddt 0 def} ifelse rk4
{/ddt dt def} if end [ [formatoutput] aload pop true setglobal ] globaldict
exch /lorenzXYZseg exch cvx put false setglobal (o) odeprint ode@dict
N end 1 sub { ode@laststate ODEINT [ exch aload pop true setglobal
] globaldict exch /ode@laststate exch put false setglobal [ lorenzXYZseg
[formatoutput] aload pop true setglobal ] globaldict exch /lorenzXYZseg
exch cvx put globaldict /ode@dt ode@dict dt end put globaldict /ode@ddt
ode@dict ddt end put globaldict /ode@tcur ode@dict tcur end put globaldict
/ode@tout ode@dict tout end put false setglobal } repeat (\n) odeprint
end
 1833 2454 a 1833 2454 a
/lorenzXYZall [lorenzXYZall lorenzXYZseg] aload astore cvx def

1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZseg counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0
TeXcolorgray 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj24} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray 1833 2454 a
 tx@odeDict begin /odeprint {0 cvs print flush} def /odeprint load
0 256 string put /ode@tol 1e-6 def /rk4 false def tx@Dict begin 1 dict
begin 5.75 end end ode@dict /tStart exch def end tx@Dict begin 1 dict
begin 6 end end ode@dict /tEnd exch def end tx@Dict begin 1 dict begin
26 cvi end end ode@dict /N exch def end ode@dict /dt tEnd tStart sub
N 1 sub div def end ode@dict /xlength ode@laststate length def end
ode@dict /xlength1 xlength 1 add def end /ode@rpn tx@Dict begin (10*(x[1]-x[0])|x[0]*(28-x[2])-x[1]|x[0]*x[1]-8/3*x[2])
AlgParser end cvx bind def /ODESET {ode@dict /x exch def /y x def end
tx@Dict begin ode@dict ode@rpn end end ode@dict xlength end array astore
} bind def /formatoutput {[0 1 2] assembleresult} def rk4 { (\npstODEsolve (RK4),)
odeprint ( "o" output step:\n) odeprint }{ (\npstODEsolve (RKF45),\n)
odeprint (-/+ failed/successful step, "o" output step, "!" step size underflow (stop):\n)
odeprint } ifelse ode@dict /tcur tStart def /outStepCnt 1 def /tout
tStart dt add def 0 0 eq {/ddt ode@ddt def}{/ddt 0 def} ifelse rk4
{/ddt dt def} if end [ [formatoutput] aload pop true setglobal ] globaldict
exch /lorenzXYZseg exch cvx put false setglobal (o) odeprint ode@dict
N end 1 sub { ode@laststate ODEINT [ exch aload pop true setglobal
] globaldict exch /ode@laststate exch put false setglobal [ lorenzXYZseg
[formatoutput] aload pop true setglobal ] globaldict exch /lorenzXYZseg
exch cvx put globaldict /ode@dt ode@dict dt end put globaldict /ode@ddt
ode@dict ddt end put globaldict /ode@tcur ode@dict tcur end put globaldict
/ode@tout ode@dict tout end put false setglobal } repeat (\n) odeprint
end
 1833 2454 a 1833 2454 a
/lorenzXYZall [lorenzXYZall lorenzXYZseg] aload astore cvx def

1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZseg counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0
TeXcolorgray 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj25} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray 1833 2454 a
 tx@odeDict begin /odeprint {0 cvs print flush} def /odeprint load
0 256 string put /ode@tol 1e-6 def /rk4 false def tx@Dict begin 1 dict
begin 6 end end ode@dict /tStart exch def end tx@Dict begin 1 dict
begin 6.25 end end ode@dict /tEnd exch def end tx@Dict begin 1 dict
begin 26 cvi end end ode@dict /N exch def end ode@dict /dt tEnd tStart
sub N 1 sub div def end ode@dict /xlength ode@laststate length def
end ode@dict /xlength1 xlength 1 add def end /ode@rpn tx@Dict begin
(10*(x[1]-x[0])|x[0]*(28-x[2])-x[1]|x[0]*x[1]-8/3*x[2]) AlgParser end
cvx bind def /ODESET {ode@dict /x exch def /y x def end tx@Dict begin
ode@dict ode@rpn end end ode@dict xlength end array astore } bind def
/formatoutput {[0 1 2] assembleresult} def rk4 { (\npstODEsolve (RK4),)
odeprint ( "o" output step:\n) odeprint }{ (\npstODEsolve (RKF45),\n)
odeprint (-/+ failed/successful step, "o" output step, "!" step size underflow (stop):\n)
odeprint } ifelse ode@dict /tcur tStart def /outStepCnt 1 def /tout
tStart dt add def 0 0 eq {/ddt ode@ddt def}{/ddt 0 def} ifelse rk4
{/ddt dt def} if end [ [formatoutput] aload pop true setglobal ] globaldict
exch /lorenzXYZseg exch cvx put false setglobal (o) odeprint ode@dict
N end 1 sub { ode@laststate ODEINT [ exch aload pop true setglobal
] globaldict exch /ode@laststate exch put false setglobal [ lorenzXYZseg
[formatoutput] aload pop true setglobal ] globaldict exch /lorenzXYZseg
exch cvx put globaldict /ode@dt ode@dict dt end put globaldict /ode@ddt
ode@dict ddt end put globaldict /ode@tcur ode@dict tcur end put globaldict
/ode@tout ode@dict tout end put false setglobal } repeat (\n) odeprint
end
 1833 2454 a 1833 2454 a
/lorenzXYZall [lorenzXYZall lorenzXYZseg] aload astore cvx def

1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZseg counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0
TeXcolorgray 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj26} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray 1833 2454 a
 tx@odeDict begin /odeprint {0 cvs print flush} def /odeprint load
0 256 string put /ode@tol 1e-6 def /rk4 false def tx@Dict begin 1 dict
begin 6.25 end end ode@dict /tStart exch def end tx@Dict begin 1 dict
begin 6.5 end end ode@dict /tEnd exch def end tx@Dict begin 1 dict
begin 26 cvi end end ode@dict /N exch def end ode@dict /dt tEnd tStart
sub N 1 sub div def end ode@dict /xlength ode@laststate length def
end ode@dict /xlength1 xlength 1 add def end /ode@rpn tx@Dict begin
(10*(x[1]-x[0])|x[0]*(28-x[2])-x[1]|x[0]*x[1]-8/3*x[2]) AlgParser end
cvx bind def /ODESET {ode@dict /x exch def /y x def end tx@Dict begin
ode@dict ode@rpn end end ode@dict xlength end array astore } bind def
/formatoutput {[0 1 2] assembleresult} def rk4 { (\npstODEsolve (RK4),)
odeprint ( "o" output step:\n) odeprint }{ (\npstODEsolve (RKF45),\n)
odeprint (-/+ failed/successful step, "o" output step, "!" step size underflow (stop):\n)
odeprint } ifelse ode@dict /tcur tStart def /outStepCnt 1 def /tout
tStart dt add def 0 0 eq {/ddt ode@ddt def}{/ddt 0 def} ifelse rk4
{/ddt dt def} if end [ [formatoutput] aload pop true setglobal ] globaldict
exch /lorenzXYZseg exch cvx put false setglobal (o) odeprint ode@dict
N end 1 sub { ode@laststate ODEINT [ exch aload pop true setglobal
] globaldict exch /ode@laststate exch put false setglobal [ lorenzXYZseg
[formatoutput] aload pop true setglobal ] globaldict exch /lorenzXYZseg
exch cvx put globaldict /ode@dt ode@dict dt end put globaldict /ode@ddt
ode@dict ddt end put globaldict /ode@tcur ode@dict tcur end put globaldict
/ode@tout ode@dict tout end put false setglobal } repeat (\n) odeprint
end
 1833 2454 a 1833 2454 a
/lorenzXYZall [lorenzXYZall lorenzXYZseg] aload astore cvx def

1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZseg counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0
TeXcolorgray 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj27} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray 1833 2454 a
 tx@odeDict begin /odeprint {0 cvs print flush} def /odeprint load
0 256 string put /ode@tol 1e-6 def /rk4 false def tx@Dict begin 1 dict
begin 6.5 end end ode@dict /tStart exch def end tx@Dict begin 1 dict
begin 6.75 end end ode@dict /tEnd exch def end tx@Dict begin 1 dict
begin 26 cvi end end ode@dict /N exch def end ode@dict /dt tEnd tStart
sub N 1 sub div def end ode@dict /xlength ode@laststate length def
end ode@dict /xlength1 xlength 1 add def end /ode@rpn tx@Dict begin
(10*(x[1]-x[0])|x[0]*(28-x[2])-x[1]|x[0]*x[1]-8/3*x[2]) AlgParser end
cvx bind def /ODESET {ode@dict /x exch def /y x def end tx@Dict begin
ode@dict ode@rpn end end ode@dict xlength end array astore } bind def
/formatoutput {[0 1 2] assembleresult} def rk4 { (\npstODEsolve (RK4),)
odeprint ( "o" output step:\n) odeprint }{ (\npstODEsolve (RKF45),\n)
odeprint (-/+ failed/successful step, "o" output step, "!" step size underflow (stop):\n)
odeprint } ifelse ode@dict /tcur tStart def /outStepCnt 1 def /tout
tStart dt add def 0 0 eq {/ddt ode@ddt def}{/ddt 0 def} ifelse rk4
{/ddt dt def} if end [ [formatoutput] aload pop true setglobal ] globaldict
exch /lorenzXYZseg exch cvx put false setglobal (o) odeprint ode@dict
N end 1 sub { ode@laststate ODEINT [ exch aload pop true setglobal
] globaldict exch /ode@laststate exch put false setglobal [ lorenzXYZseg
[formatoutput] aload pop true setglobal ] globaldict exch /lorenzXYZseg
exch cvx put globaldict /ode@dt ode@dict dt end put globaldict /ode@ddt
ode@dict ddt end put globaldict /ode@tcur ode@dict tcur end put globaldict
/ode@tout ode@dict tout end put false setglobal } repeat (\n) odeprint
end
 1833 2454 a 1833 2454 a
/lorenzXYZall [lorenzXYZall lorenzXYZseg] aload astore cvx def

1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZseg counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0
TeXcolorgray 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj28} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray 1833 2454 a
 tx@odeDict begin /odeprint {0 cvs print flush} def /odeprint load
0 256 string put /ode@tol 1e-6 def /rk4 false def tx@Dict begin 1 dict
begin 6.75 end end ode@dict /tStart exch def end tx@Dict begin 1 dict
begin 7 end end ode@dict /tEnd exch def end tx@Dict begin 1 dict begin
26 cvi end end ode@dict /N exch def end ode@dict /dt tEnd tStart sub
N 1 sub div def end ode@dict /xlength ode@laststate length def end
ode@dict /xlength1 xlength 1 add def end /ode@rpn tx@Dict begin (10*(x[1]-x[0])|x[0]*(28-x[2])-x[1]|x[0]*x[1]-8/3*x[2])
AlgParser end cvx bind def /ODESET {ode@dict /x exch def /y x def end
tx@Dict begin ode@dict ode@rpn end end ode@dict xlength end array astore
} bind def /formatoutput {[0 1 2] assembleresult} def rk4 { (\npstODEsolve (RK4),)
odeprint ( "o" output step:\n) odeprint }{ (\npstODEsolve (RKF45),\n)
odeprint (-/+ failed/successful step, "o" output step, "!" step size underflow (stop):\n)
odeprint } ifelse ode@dict /tcur tStart def /outStepCnt 1 def /tout
tStart dt add def 0 0 eq {/ddt ode@ddt def}{/ddt 0 def} ifelse rk4
{/ddt dt def} if end [ [formatoutput] aload pop true setglobal ] globaldict
exch /lorenzXYZseg exch cvx put false setglobal (o) odeprint ode@dict
N end 1 sub { ode@laststate ODEINT [ exch aload pop true setglobal
] globaldict exch /ode@laststate exch put false setglobal [ lorenzXYZseg
[formatoutput] aload pop true setglobal ] globaldict exch /lorenzXYZseg
exch cvx put globaldict /ode@dt ode@dict dt end put globaldict /ode@ddt
ode@dict ddt end put globaldict /ode@tcur ode@dict tcur end put globaldict
/ode@tout ode@dict tout end put false setglobal } repeat (\n) odeprint
end
 1833 2454 a 1833 2454 a
/lorenzXYZall [lorenzXYZall lorenzXYZseg] aload astore cvx def

1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZseg counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0
TeXcolorgray 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj29} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray 1833 2454 a
 tx@odeDict begin /odeprint {0 cvs print flush} def /odeprint load
0 256 string put /ode@tol 1e-6 def /rk4 false def tx@Dict begin 1 dict
begin 7 end end ode@dict /tStart exch def end tx@Dict begin 1 dict
begin 7.25 end end ode@dict /tEnd exch def end tx@Dict begin 1 dict
begin 26 cvi end end ode@dict /N exch def end ode@dict /dt tEnd tStart
sub N 1 sub div def end ode@dict /xlength ode@laststate length def
end ode@dict /xlength1 xlength 1 add def end /ode@rpn tx@Dict begin
(10*(x[1]-x[0])|x[0]*(28-x[2])-x[1]|x[0]*x[1]-8/3*x[2]) AlgParser end
cvx bind def /ODESET {ode@dict /x exch def /y x def end tx@Dict begin
ode@dict ode@rpn end end ode@dict xlength end array astore } bind def
/formatoutput {[0 1 2] assembleresult} def rk4 { (\npstODEsolve (RK4),)
odeprint ( "o" output step:\n) odeprint }{ (\npstODEsolve (RKF45),\n)
odeprint (-/+ failed/successful step, "o" output step, "!" step size underflow (stop):\n)
odeprint } ifelse ode@dict /tcur tStart def /outStepCnt 1 def /tout
tStart dt add def 0 0 eq {/ddt ode@ddt def}{/ddt 0 def} ifelse rk4
{/ddt dt def} if end [ [formatoutput] aload pop true setglobal ] globaldict
exch /lorenzXYZseg exch cvx put false setglobal (o) odeprint ode@dict
N end 1 sub { ode@laststate ODEINT [ exch aload pop true setglobal
] globaldict exch /ode@laststate exch put false setglobal [ lorenzXYZseg
[formatoutput] aload pop true setglobal ] globaldict exch /lorenzXYZseg
exch cvx put globaldict /ode@dt ode@dict dt end put globaldict /ode@ddt
ode@dict ddt end put globaldict /ode@tcur ode@dict tcur end put globaldict
/ode@tout ode@dict tout end put false setglobal } repeat (\n) odeprint
end
 1833 2454 a 1833 2454 a
/lorenzXYZall [lorenzXYZall lorenzXYZseg] aload astore cvx def

1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZseg counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0
TeXcolorgray 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj30} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray 1833 2454 a
 tx@odeDict begin /odeprint {0 cvs print flush} def /odeprint load
0 256 string put /ode@tol 1e-6 def /rk4 false def tx@Dict begin 1 dict
begin 7.25 end end ode@dict /tStart exch def end tx@Dict begin 1 dict
begin 7.5 end end ode@dict /tEnd exch def end tx@Dict begin 1 dict
begin 26 cvi end end ode@dict /N exch def end ode@dict /dt tEnd tStart
sub N 1 sub div def end ode@dict /xlength ode@laststate length def
end ode@dict /xlength1 xlength 1 add def end /ode@rpn tx@Dict begin
(10*(x[1]-x[0])|x[0]*(28-x[2])-x[1]|x[0]*x[1]-8/3*x[2]) AlgParser end
cvx bind def /ODESET {ode@dict /x exch def /y x def end tx@Dict begin
ode@dict ode@rpn end end ode@dict xlength end array astore } bind def
/formatoutput {[0 1 2] assembleresult} def rk4 { (\npstODEsolve (RK4),)
odeprint ( "o" output step:\n) odeprint }{ (\npstODEsolve (RKF45),\n)
odeprint (-/+ failed/successful step, "o" output step, "!" step size underflow (stop):\n)
odeprint } ifelse ode@dict /tcur tStart def /outStepCnt 1 def /tout
tStart dt add def 0 0 eq {/ddt ode@ddt def}{/ddt 0 def} ifelse rk4
{/ddt dt def} if end [ [formatoutput] aload pop true setglobal ] globaldict
exch /lorenzXYZseg exch cvx put false setglobal (o) odeprint ode@dict
N end 1 sub { ode@laststate ODEINT [ exch aload pop true setglobal
] globaldict exch /ode@laststate exch put false setglobal [ lorenzXYZseg
[formatoutput] aload pop true setglobal ] globaldict exch /lorenzXYZseg
exch cvx put globaldict /ode@dt ode@dict dt end put globaldict /ode@ddt
ode@dict ddt end put globaldict /ode@tcur ode@dict tcur end put globaldict
/ode@tout ode@dict tout end put false setglobal } repeat (\n) odeprint
end
 1833 2454 a 1833 2454 a
/lorenzXYZall [lorenzXYZall lorenzXYZseg] aload astore cvx def

1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZseg counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0
TeXcolorgray 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj31} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray 1833 2454 a
 tx@odeDict begin /odeprint {0 cvs print flush} def /odeprint load
0 256 string put /ode@tol 1e-6 def /rk4 false def tx@Dict begin 1 dict
begin 7.5 end end ode@dict /tStart exch def end tx@Dict begin 1 dict
begin 7.75 end end ode@dict /tEnd exch def end tx@Dict begin 1 dict
begin 26 cvi end end ode@dict /N exch def end ode@dict /dt tEnd tStart
sub N 1 sub div def end ode@dict /xlength ode@laststate length def
end ode@dict /xlength1 xlength 1 add def end /ode@rpn tx@Dict begin
(10*(x[1]-x[0])|x[0]*(28-x[2])-x[1]|x[0]*x[1]-8/3*x[2]) AlgParser end
cvx bind def /ODESET {ode@dict /x exch def /y x def end tx@Dict begin
ode@dict ode@rpn end end ode@dict xlength end array astore } bind def
/formatoutput {[0 1 2] assembleresult} def rk4 { (\npstODEsolve (RK4),)
odeprint ( "o" output step:\n) odeprint }{ (\npstODEsolve (RKF45),\n)
odeprint (-/+ failed/successful step, "o" output step, "!" step size underflow (stop):\n)
odeprint } ifelse ode@dict /tcur tStart def /outStepCnt 1 def /tout
tStart dt add def 0 0 eq {/ddt ode@ddt def}{/ddt 0 def} ifelse rk4
{/ddt dt def} if end [ [formatoutput] aload pop true setglobal ] globaldict
exch /lorenzXYZseg exch cvx put false setglobal (o) odeprint ode@dict
N end 1 sub { ode@laststate ODEINT [ exch aload pop true setglobal
] globaldict exch /ode@laststate exch put false setglobal [ lorenzXYZseg
[formatoutput] aload pop true setglobal ] globaldict exch /lorenzXYZseg
exch cvx put globaldict /ode@dt ode@dict dt end put globaldict /ode@ddt
ode@dict ddt end put globaldict /ode@tcur ode@dict tcur end put globaldict
/ode@tout ode@dict tout end put false setglobal } repeat (\n) odeprint
end
 1833 2454 a 1833 2454 a
/lorenzXYZall [lorenzXYZall lorenzXYZseg] aload astore cvx def

1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZseg counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0
TeXcolorgray 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj32} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray 1833 2454 a
 tx@odeDict begin /odeprint {0 cvs print flush} def /odeprint load
0 256 string put /ode@tol 1e-6 def /rk4 false def tx@Dict begin 1 dict
begin 7.75 end end ode@dict /tStart exch def end tx@Dict begin 1 dict
begin 8 end end ode@dict /tEnd exch def end tx@Dict begin 1 dict begin
26 cvi end end ode@dict /N exch def end ode@dict /dt tEnd tStart sub
N 1 sub div def end ode@dict /xlength ode@laststate length def end
ode@dict /xlength1 xlength 1 add def end /ode@rpn tx@Dict begin (10*(x[1]-x[0])|x[0]*(28-x[2])-x[1]|x[0]*x[1]-8/3*x[2])
AlgParser end cvx bind def /ODESET {ode@dict /x exch def /y x def end
tx@Dict begin ode@dict ode@rpn end end ode@dict xlength end array astore
} bind def /formatoutput {[0 1 2] assembleresult} def rk4 { (\npstODEsolve (RK4),)
odeprint ( "o" output step:\n) odeprint }{ (\npstODEsolve (RKF45),\n)
odeprint (-/+ failed/successful step, "o" output step, "!" step size underflow (stop):\n)
odeprint } ifelse ode@dict /tcur tStart def /outStepCnt 1 def /tout
tStart dt add def 0 0 eq {/ddt ode@ddt def}{/ddt 0 def} ifelse rk4
{/ddt dt def} if end [ [formatoutput] aload pop true setglobal ] globaldict
exch /lorenzXYZseg exch cvx put false setglobal (o) odeprint ode@dict
N end 1 sub { ode@laststate ODEINT [ exch aload pop true setglobal
] globaldict exch /ode@laststate exch put false setglobal [ lorenzXYZseg
[formatoutput] aload pop true setglobal ] globaldict exch /lorenzXYZseg
exch cvx put globaldict /ode@dt ode@dict dt end put globaldict /ode@ddt
ode@dict ddt end put globaldict /ode@tcur ode@dict tcur end put globaldict
/ode@tout ode@dict tout end put false setglobal } repeat (\n) odeprint
end
 1833 2454 a 1833 2454 a
/lorenzXYZall [lorenzXYZall lorenzXYZseg] aload astore cvx def

1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZseg counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0
TeXcolorgray 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj33} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray 1833 2454 a
 tx@odeDict begin /odeprint {0 cvs print flush} def /odeprint load
0 256 string put /ode@tol 1e-6 def /rk4 false def tx@Dict begin 1 dict
begin 8 end end ode@dict /tStart exch def end tx@Dict begin 1 dict
begin 8.25 end end ode@dict /tEnd exch def end tx@Dict begin 1 dict
begin 26 cvi end end ode@dict /N exch def end ode@dict /dt tEnd tStart
sub N 1 sub div def end ode@dict /xlength ode@laststate length def
end ode@dict /xlength1 xlength 1 add def end /ode@rpn tx@Dict begin
(10*(x[1]-x[0])|x[0]*(28-x[2])-x[1]|x[0]*x[1]-8/3*x[2]) AlgParser end
cvx bind def /ODESET {ode@dict /x exch def /y x def end tx@Dict begin
ode@dict ode@rpn end end ode@dict xlength end array astore } bind def
/formatoutput {[0 1 2] assembleresult} def rk4 { (\npstODEsolve (RK4),)
odeprint ( "o" output step:\n) odeprint }{ (\npstODEsolve (RKF45),\n)
odeprint (-/+ failed/successful step, "o" output step, "!" step size underflow (stop):\n)
odeprint } ifelse ode@dict /tcur tStart def /outStepCnt 1 def /tout
tStart dt add def 0 0 eq {/ddt ode@ddt def}{/ddt 0 def} ifelse rk4
{/ddt dt def} if end [ [formatoutput] aload pop true setglobal ] globaldict
exch /lorenzXYZseg exch cvx put false setglobal (o) odeprint ode@dict
N end 1 sub { ode@laststate ODEINT [ exch aload pop true setglobal
] globaldict exch /ode@laststate exch put false setglobal [ lorenzXYZseg
[formatoutput] aload pop true setglobal ] globaldict exch /lorenzXYZseg
exch cvx put globaldict /ode@dt ode@dict dt end put globaldict /ode@ddt
ode@dict ddt end put globaldict /ode@tcur ode@dict tcur end put globaldict
/ode@tout ode@dict tout end put false setglobal } repeat (\n) odeprint
end
 1833 2454 a 1833 2454 a
/lorenzXYZall [lorenzXYZall lorenzXYZseg] aload astore cvx def

1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZseg counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0
TeXcolorgray 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj34} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray 1833 2454 a
 tx@odeDict begin /odeprint {0 cvs print flush} def /odeprint load
0 256 string put /ode@tol 1e-6 def /rk4 false def tx@Dict begin 1 dict
begin 8.25 end end ode@dict /tStart exch def end tx@Dict begin 1 dict
begin 8.5 end end ode@dict /tEnd exch def end tx@Dict begin 1 dict
begin 26 cvi end end ode@dict /N exch def end ode@dict /dt tEnd tStart
sub N 1 sub div def end ode@dict /xlength ode@laststate length def
end ode@dict /xlength1 xlength 1 add def end /ode@rpn tx@Dict begin
(10*(x[1]-x[0])|x[0]*(28-x[2])-x[1]|x[0]*x[1]-8/3*x[2]) AlgParser end
cvx bind def /ODESET {ode@dict /x exch def /y x def end tx@Dict begin
ode@dict ode@rpn end end ode@dict xlength end array astore } bind def
/formatoutput {[0 1 2] assembleresult} def rk4 { (\npstODEsolve (RK4),)
odeprint ( "o" output step:\n) odeprint }{ (\npstODEsolve (RKF45),\n)
odeprint (-/+ failed/successful step, "o" output step, "!" step size underflow (stop):\n)
odeprint } ifelse ode@dict /tcur tStart def /outStepCnt 1 def /tout
tStart dt add def 0 0 eq {/ddt ode@ddt def}{/ddt 0 def} ifelse rk4
{/ddt dt def} if end [ [formatoutput] aload pop true setglobal ] globaldict
exch /lorenzXYZseg exch cvx put false setglobal (o) odeprint ode@dict
N end 1 sub { ode@laststate ODEINT [ exch aload pop true setglobal
] globaldict exch /ode@laststate exch put false setglobal [ lorenzXYZseg
[formatoutput] aload pop true setglobal ] globaldict exch /lorenzXYZseg
exch cvx put globaldict /ode@dt ode@dict dt end put globaldict /ode@ddt
ode@dict ddt end put globaldict /ode@tcur ode@dict tcur end put globaldict
/ode@tout ode@dict tout end put false setglobal } repeat (\n) odeprint
end
 1833 2454 a 1833 2454 a
/lorenzXYZall [lorenzXYZall lorenzXYZseg] aload astore cvx def

1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZseg counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0
TeXcolorgray 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj35} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray 1833 2454 a
 tx@odeDict begin /odeprint {0 cvs print flush} def /odeprint load
0 256 string put /ode@tol 1e-6 def /rk4 false def tx@Dict begin 1 dict
begin 8.5 end end ode@dict /tStart exch def end tx@Dict begin 1 dict
begin 8.75 end end ode@dict /tEnd exch def end tx@Dict begin 1 dict
begin 26 cvi end end ode@dict /N exch def end ode@dict /dt tEnd tStart
sub N 1 sub div def end ode@dict /xlength ode@laststate length def
end ode@dict /xlength1 xlength 1 add def end /ode@rpn tx@Dict begin
(10*(x[1]-x[0])|x[0]*(28-x[2])-x[1]|x[0]*x[1]-8/3*x[2]) AlgParser end
cvx bind def /ODESET {ode@dict /x exch def /y x def end tx@Dict begin
ode@dict ode@rpn end end ode@dict xlength end array astore } bind def
/formatoutput {[0 1 2] assembleresult} def rk4 { (\npstODEsolve (RK4),)
odeprint ( "o" output step:\n) odeprint }{ (\npstODEsolve (RKF45),\n)
odeprint (-/+ failed/successful step, "o" output step, "!" step size underflow (stop):\n)
odeprint } ifelse ode@dict /tcur tStart def /outStepCnt 1 def /tout
tStart dt add def 0 0 eq {/ddt ode@ddt def}{/ddt 0 def} ifelse rk4
{/ddt dt def} if end [ [formatoutput] aload pop true setglobal ] globaldict
exch /lorenzXYZseg exch cvx put false setglobal (o) odeprint ode@dict
N end 1 sub { ode@laststate ODEINT [ exch aload pop true setglobal
] globaldict exch /ode@laststate exch put false setglobal [ lorenzXYZseg
[formatoutput] aload pop true setglobal ] globaldict exch /lorenzXYZseg
exch cvx put globaldict /ode@dt ode@dict dt end put globaldict /ode@ddt
ode@dict ddt end put globaldict /ode@tcur ode@dict tcur end put globaldict
/ode@tout ode@dict tout end put false setglobal } repeat (\n) odeprint
end
 1833 2454 a 1833 2454 a
/lorenzXYZall [lorenzXYZall lorenzXYZseg] aload astore cvx def

1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZseg counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0
TeXcolorgray 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj36} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray 1833 2454 a
 tx@odeDict begin /odeprint {0 cvs print flush} def /odeprint load
0 256 string put /ode@tol 1e-6 def /rk4 false def tx@Dict begin 1 dict
begin 8.75 end end ode@dict /tStart exch def end tx@Dict begin 1 dict
begin 9 end end ode@dict /tEnd exch def end tx@Dict begin 1 dict begin
26 cvi end end ode@dict /N exch def end ode@dict /dt tEnd tStart sub
N 1 sub div def end ode@dict /xlength ode@laststate length def end
ode@dict /xlength1 xlength 1 add def end /ode@rpn tx@Dict begin (10*(x[1]-x[0])|x[0]*(28-x[2])-x[1]|x[0]*x[1]-8/3*x[2])
AlgParser end cvx bind def /ODESET {ode@dict /x exch def /y x def end
tx@Dict begin ode@dict ode@rpn end end ode@dict xlength end array astore
} bind def /formatoutput {[0 1 2] assembleresult} def rk4 { (\npstODEsolve (RK4),)
odeprint ( "o" output step:\n) odeprint }{ (\npstODEsolve (RKF45),\n)
odeprint (-/+ failed/successful step, "o" output step, "!" step size underflow (stop):\n)
odeprint } ifelse ode@dict /tcur tStart def /outStepCnt 1 def /tout
tStart dt add def 0 0 eq {/ddt ode@ddt def}{/ddt 0 def} ifelse rk4
{/ddt dt def} if end [ [formatoutput] aload pop true setglobal ] globaldict
exch /lorenzXYZseg exch cvx put false setglobal (o) odeprint ode@dict
N end 1 sub { ode@laststate ODEINT [ exch aload pop true setglobal
] globaldict exch /ode@laststate exch put false setglobal [ lorenzXYZseg
[formatoutput] aload pop true setglobal ] globaldict exch /lorenzXYZseg
exch cvx put globaldict /ode@dt ode@dict dt end put globaldict /ode@ddt
ode@dict ddt end put globaldict /ode@tcur ode@dict tcur end put globaldict
/ode@tout ode@dict tout end put false setglobal } repeat (\n) odeprint
end
 1833 2454 a 1833 2454 a
/lorenzXYZall [lorenzXYZall lorenzXYZseg] aload astore cvx def

1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZseg counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0
TeXcolorgray 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj37} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray 1833 2454 a
 tx@odeDict begin /odeprint {0 cvs print flush} def /odeprint load
0 256 string put /ode@tol 1e-6 def /rk4 false def tx@Dict begin 1 dict
begin 9 end end ode@dict /tStart exch def end tx@Dict begin 1 dict
begin 9.25 end end ode@dict /tEnd exch def end tx@Dict begin 1 dict
begin 26 cvi end end ode@dict /N exch def end ode@dict /dt tEnd tStart
sub N 1 sub div def end ode@dict /xlength ode@laststate length def
end ode@dict /xlength1 xlength 1 add def end /ode@rpn tx@Dict begin
(10*(x[1]-x[0])|x[0]*(28-x[2])-x[1]|x[0]*x[1]-8/3*x[2]) AlgParser end
cvx bind def /ODESET {ode@dict /x exch def /y x def end tx@Dict begin
ode@dict ode@rpn end end ode@dict xlength end array astore } bind def
/formatoutput {[0 1 2] assembleresult} def rk4 { (\npstODEsolve (RK4),)
odeprint ( "o" output step:\n) odeprint }{ (\npstODEsolve (RKF45),\n)
odeprint (-/+ failed/successful step, "o" output step, "!" step size underflow (stop):\n)
odeprint } ifelse ode@dict /tcur tStart def /outStepCnt 1 def /tout
tStart dt add def 0 0 eq {/ddt ode@ddt def}{/ddt 0 def} ifelse rk4
{/ddt dt def} if end [ [formatoutput] aload pop true setglobal ] globaldict
exch /lorenzXYZseg exch cvx put false setglobal (o) odeprint ode@dict
N end 1 sub { ode@laststate ODEINT [ exch aload pop true setglobal
] globaldict exch /ode@laststate exch put false setglobal [ lorenzXYZseg
[formatoutput] aload pop true setglobal ] globaldict exch /lorenzXYZseg
exch cvx put globaldict /ode@dt ode@dict dt end put globaldict /ode@ddt
ode@dict ddt end put globaldict /ode@tcur ode@dict tcur end put globaldict
/ode@tout ode@dict tout end put false setglobal } repeat (\n) odeprint
end
 1833 2454 a 1833 2454 a
/lorenzXYZall [lorenzXYZall lorenzXYZseg] aload astore cvx def

1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZseg counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0
TeXcolorgray 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj38} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray 1833 2454 a
 tx@odeDict begin /odeprint {0 cvs print flush} def /odeprint load
0 256 string put /ode@tol 1e-6 def /rk4 false def tx@Dict begin 1 dict
begin 9.25 end end ode@dict /tStart exch def end tx@Dict begin 1 dict
begin 9.5 end end ode@dict /tEnd exch def end tx@Dict begin 1 dict
begin 26 cvi end end ode@dict /N exch def end ode@dict /dt tEnd tStart
sub N 1 sub div def end ode@dict /xlength ode@laststate length def
end ode@dict /xlength1 xlength 1 add def end /ode@rpn tx@Dict begin
(10*(x[1]-x[0])|x[0]*(28-x[2])-x[1]|x[0]*x[1]-8/3*x[2]) AlgParser end
cvx bind def /ODESET {ode@dict /x exch def /y x def end tx@Dict begin
ode@dict ode@rpn end end ode@dict xlength end array astore } bind def
/formatoutput {[0 1 2] assembleresult} def rk4 { (\npstODEsolve (RK4),)
odeprint ( "o" output step:\n) odeprint }{ (\npstODEsolve (RKF45),\n)
odeprint (-/+ failed/successful step, "o" output step, "!" step size underflow (stop):\n)
odeprint } ifelse ode@dict /tcur tStart def /outStepCnt 1 def /tout
tStart dt add def 0 0 eq {/ddt ode@ddt def}{/ddt 0 def} ifelse rk4
{/ddt dt def} if end [ [formatoutput] aload pop true setglobal ] globaldict
exch /lorenzXYZseg exch cvx put false setglobal (o) odeprint ode@dict
N end 1 sub { ode@laststate ODEINT [ exch aload pop true setglobal
] globaldict exch /ode@laststate exch put false setglobal [ lorenzXYZseg
[formatoutput] aload pop true setglobal ] globaldict exch /lorenzXYZseg
exch cvx put globaldict /ode@dt ode@dict dt end put globaldict /ode@ddt
ode@dict ddt end put globaldict /ode@tcur ode@dict tcur end put globaldict
/ode@tout ode@dict tout end put false setglobal } repeat (\n) odeprint
end
 1833 2454 a 1833 2454 a
/lorenzXYZall [lorenzXYZall lorenzXYZseg] aload astore cvx def

1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZseg counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0
TeXcolorgray 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj39} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray 1833 2454 a
 tx@odeDict begin /odeprint {0 cvs print flush} def /odeprint load
0 256 string put /ode@tol 1e-6 def /rk4 false def tx@Dict begin 1 dict
begin 9.5 end end ode@dict /tStart exch def end tx@Dict begin 1 dict
begin 9.75 end end ode@dict /tEnd exch def end tx@Dict begin 1 dict
begin 26 cvi end end ode@dict /N exch def end ode@dict /dt tEnd tStart
sub N 1 sub div def end ode@dict /xlength ode@laststate length def
end ode@dict /xlength1 xlength 1 add def end /ode@rpn tx@Dict begin
(10*(x[1]-x[0])|x[0]*(28-x[2])-x[1]|x[0]*x[1]-8/3*x[2]) AlgParser end
cvx bind def /ODESET {ode@dict /x exch def /y x def end tx@Dict begin
ode@dict ode@rpn end end ode@dict xlength end array astore } bind def
/formatoutput {[0 1 2] assembleresult} def rk4 { (\npstODEsolve (RK4),)
odeprint ( "o" output step:\n) odeprint }{ (\npstODEsolve (RKF45),\n)
odeprint (-/+ failed/successful step, "o" output step, "!" step size underflow (stop):\n)
odeprint } ifelse ode@dict /tcur tStart def /outStepCnt 1 def /tout
tStart dt add def 0 0 eq {/ddt ode@ddt def}{/ddt 0 def} ifelse rk4
{/ddt dt def} if end [ [formatoutput] aload pop true setglobal ] globaldict
exch /lorenzXYZseg exch cvx put false setglobal (o) odeprint ode@dict
N end 1 sub { ode@laststate ODEINT [ exch aload pop true setglobal
] globaldict exch /ode@laststate exch put false setglobal [ lorenzXYZseg
[formatoutput] aload pop true setglobal ] globaldict exch /lorenzXYZseg
exch cvx put globaldict /ode@dt ode@dict dt end put globaldict /ode@ddt
ode@dict ddt end put globaldict /ode@tcur ode@dict tcur end put globaldict
/ode@tout ode@dict tout end put false setglobal } repeat (\n) odeprint
end
 1833 2454 a 1833 2454 a
/lorenzXYZall [lorenzXYZall lorenzXYZseg] aload astore cvx def

1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZseg counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0
TeXcolorgray 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj40} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray 1833 2454 a
 tx@odeDict begin /odeprint {0 cvs print flush} def /odeprint load
0 256 string put /ode@tol 1e-6 def /rk4 false def tx@Dict begin 1 dict
begin 9.75 end end ode@dict /tStart exch def end tx@Dict begin 1 dict
begin 10 end end ode@dict /tEnd exch def end tx@Dict begin 1 dict begin
26 cvi end end ode@dict /N exch def end ode@dict /dt tEnd tStart sub
N 1 sub div def end ode@dict /xlength ode@laststate length def end
ode@dict /xlength1 xlength 1 add def end /ode@rpn tx@Dict begin (10*(x[1]-x[0])|x[0]*(28-x[2])-x[1]|x[0]*x[1]-8/3*x[2])
AlgParser end cvx bind def /ODESET {ode@dict /x exch def /y x def end
tx@Dict begin ode@dict ode@rpn end end ode@dict xlength end array astore
} bind def /formatoutput {[0 1 2] assembleresult} def rk4 { (\npstODEsolve (RK4),)
odeprint ( "o" output step:\n) odeprint }{ (\npstODEsolve (RKF45),\n)
odeprint (-/+ failed/successful step, "o" output step, "!" step size underflow (stop):\n)
odeprint } ifelse ode@dict /tcur tStart def /outStepCnt 1 def /tout
tStart dt add def 0 0 eq {/ddt ode@ddt def}{/ddt 0 def} ifelse rk4
{/ddt dt def} if end [ [formatoutput] aload pop true setglobal ] globaldict
exch /lorenzXYZseg exch cvx put false setglobal (o) odeprint ode@dict
N end 1 sub { ode@laststate ODEINT [ exch aload pop true setglobal
] globaldict exch /ode@laststate exch put false setglobal [ lorenzXYZseg
[formatoutput] aload pop true setglobal ] globaldict exch /lorenzXYZseg
exch cvx put globaldict /ode@dt ode@dict dt end put globaldict /ode@ddt
ode@dict ddt end put globaldict /ode@tcur ode@dict tcur end put globaldict
/ode@tout ode@dict tout end put false setglobal } repeat (\n) odeprint
end
 1833 2454 a 1833 2454 a
/lorenzXYZall [lorenzXYZall lorenzXYZseg] aload astore cvx def

1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZseg counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0
TeXcolorgray 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj41} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray 1833 2454 a
 tx@odeDict begin /odeprint {0 cvs print flush} def /odeprint load
0 256 string put /ode@tol 1e-6 def /rk4 false def tx@Dict begin 1 dict
begin 10 end end ode@dict /tStart exch def end tx@Dict begin 1 dict
begin 10.25 end end ode@dict /tEnd exch def end tx@Dict begin 1 dict
begin 26 cvi end end ode@dict /N exch def end ode@dict /dt tEnd tStart
sub N 1 sub div def end ode@dict /xlength ode@laststate length def
end ode@dict /xlength1 xlength 1 add def end /ode@rpn tx@Dict begin
(10*(x[1]-x[0])|x[0]*(28-x[2])-x[1]|x[0]*x[1]-8/3*x[2]) AlgParser end
cvx bind def /ODESET {ode@dict /x exch def /y x def end tx@Dict begin
ode@dict ode@rpn end end ode@dict xlength end array astore } bind def
/formatoutput {[0 1 2] assembleresult} def rk4 { (\npstODEsolve (RK4),)
odeprint ( "o" output step:\n) odeprint }{ (\npstODEsolve (RKF45),\n)
odeprint (-/+ failed/successful step, "o" output step, "!" step size underflow (stop):\n)
odeprint } ifelse ode@dict /tcur tStart def /outStepCnt 1 def /tout
tStart dt add def 0 0 eq {/ddt ode@ddt def}{/ddt 0 def} ifelse rk4
{/ddt dt def} if end [ [formatoutput] aload pop true setglobal ] globaldict
exch /lorenzXYZseg exch cvx put false setglobal (o) odeprint ode@dict
N end 1 sub { ode@laststate ODEINT [ exch aload pop true setglobal
] globaldict exch /ode@laststate exch put false setglobal [ lorenzXYZseg
[formatoutput] aload pop true setglobal ] globaldict exch /lorenzXYZseg
exch cvx put globaldict /ode@dt ode@dict dt end put globaldict /ode@ddt
ode@dict ddt end put globaldict /ode@tcur ode@dict tcur end put globaldict
/ode@tout ode@dict tout end put false setglobal } repeat (\n) odeprint
end
 1833 2454 a 1833 2454 a
/lorenzXYZall [lorenzXYZall lorenzXYZseg] aload astore cvx def

1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZseg counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0
TeXcolorgray 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj42} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray 1833 2454 a
 tx@odeDict begin /odeprint {0 cvs print flush} def /odeprint load
0 256 string put /ode@tol 1e-6 def /rk4 false def tx@Dict begin 1 dict
begin 10.25 end end ode@dict /tStart exch def end tx@Dict begin 1 dict
begin 10.5 end end ode@dict /tEnd exch def end tx@Dict begin 1 dict
begin 26 cvi end end ode@dict /N exch def end ode@dict /dt tEnd tStart
sub N 1 sub div def end ode@dict /xlength ode@laststate length def
end ode@dict /xlength1 xlength 1 add def end /ode@rpn tx@Dict begin
(10*(x[1]-x[0])|x[0]*(28-x[2])-x[1]|x[0]*x[1]-8/3*x[2]) AlgParser end
cvx bind def /ODESET {ode@dict /x exch def /y x def end tx@Dict begin
ode@dict ode@rpn end end ode@dict xlength end array astore } bind def
/formatoutput {[0 1 2] assembleresult} def rk4 { (\npstODEsolve (RK4),)
odeprint ( "o" output step:\n) odeprint }{ (\npstODEsolve (RKF45),\n)
odeprint (-/+ failed/successful step, "o" output step, "!" step size underflow (stop):\n)
odeprint } ifelse ode@dict /tcur tStart def /outStepCnt 1 def /tout
tStart dt add def 0 0 eq {/ddt ode@ddt def}{/ddt 0 def} ifelse rk4
{/ddt dt def} if end [ [formatoutput] aload pop true setglobal ] globaldict
exch /lorenzXYZseg exch cvx put false setglobal (o) odeprint ode@dict
N end 1 sub { ode@laststate ODEINT [ exch aload pop true setglobal
] globaldict exch /ode@laststate exch put false setglobal [ lorenzXYZseg
[formatoutput] aload pop true setglobal ] globaldict exch /lorenzXYZseg
exch cvx put globaldict /ode@dt ode@dict dt end put globaldict /ode@ddt
ode@dict ddt end put globaldict /ode@tcur ode@dict tcur end put globaldict
/ode@tout ode@dict tout end put false setglobal } repeat (\n) odeprint
end
 1833 2454 a 1833 2454 a
/lorenzXYZall [lorenzXYZall lorenzXYZseg] aload astore cvx def

1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZseg counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0
TeXcolorgray 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj43} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray 1833 2454 a
 tx@odeDict begin /odeprint {0 cvs print flush} def /odeprint load
0 256 string put /ode@tol 1e-6 def /rk4 false def tx@Dict begin 1 dict
begin 10.5 end end ode@dict /tStart exch def end tx@Dict begin 1 dict
begin 10.75 end end ode@dict /tEnd exch def end tx@Dict begin 1 dict
begin 26 cvi end end ode@dict /N exch def end ode@dict /dt tEnd tStart
sub N 1 sub div def end ode@dict /xlength ode@laststate length def
end ode@dict /xlength1 xlength 1 add def end /ode@rpn tx@Dict begin
(10*(x[1]-x[0])|x[0]*(28-x[2])-x[1]|x[0]*x[1]-8/3*x[2]) AlgParser end
cvx bind def /ODESET {ode@dict /x exch def /y x def end tx@Dict begin
ode@dict ode@rpn end end ode@dict xlength end array astore } bind def
/formatoutput {[0 1 2] assembleresult} def rk4 { (\npstODEsolve (RK4),)
odeprint ( "o" output step:\n) odeprint }{ (\npstODEsolve (RKF45),\n)
odeprint (-/+ failed/successful step, "o" output step, "!" step size underflow (stop):\n)
odeprint } ifelse ode@dict /tcur tStart def /outStepCnt 1 def /tout
tStart dt add def 0 0 eq {/ddt ode@ddt def}{/ddt 0 def} ifelse rk4
{/ddt dt def} if end [ [formatoutput] aload pop true setglobal ] globaldict
exch /lorenzXYZseg exch cvx put false setglobal (o) odeprint ode@dict
N end 1 sub { ode@laststate ODEINT [ exch aload pop true setglobal
] globaldict exch /ode@laststate exch put false setglobal [ lorenzXYZseg
[formatoutput] aload pop true setglobal ] globaldict exch /lorenzXYZseg
exch cvx put globaldict /ode@dt ode@dict dt end put globaldict /ode@ddt
ode@dict ddt end put globaldict /ode@tcur ode@dict tcur end put globaldict
/ode@tout ode@dict tout end put false setglobal } repeat (\n) odeprint
end
 1833 2454 a 1833 2454 a
/lorenzXYZall [lorenzXYZall lorenzXYZseg] aload astore cvx def

1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZseg counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0
TeXcolorgray 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj44} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray 1833 2454 a
 tx@odeDict begin /odeprint {0 cvs print flush} def /odeprint load
0 256 string put /ode@tol 1e-6 def /rk4 false def tx@Dict begin 1 dict
begin 10.75 end end ode@dict /tStart exch def end tx@Dict begin 1 dict
begin 11 end end ode@dict /tEnd exch def end tx@Dict begin 1 dict begin
26 cvi end end ode@dict /N exch def end ode@dict /dt tEnd tStart sub
N 1 sub div def end ode@dict /xlength ode@laststate length def end
ode@dict /xlength1 xlength 1 add def end /ode@rpn tx@Dict begin (10*(x[1]-x[0])|x[0]*(28-x[2])-x[1]|x[0]*x[1]-8/3*x[2])
AlgParser end cvx bind def /ODESET {ode@dict /x exch def /y x def end
tx@Dict begin ode@dict ode@rpn end end ode@dict xlength end array astore
} bind def /formatoutput {[0 1 2] assembleresult} def rk4 { (\npstODEsolve (RK4),)
odeprint ( "o" output step:\n) odeprint }{ (\npstODEsolve (RKF45),\n)
odeprint (-/+ failed/successful step, "o" output step, "!" step size underflow (stop):\n)
odeprint } ifelse ode@dict /tcur tStart def /outStepCnt 1 def /tout
tStart dt add def 0 0 eq {/ddt ode@ddt def}{/ddt 0 def} ifelse rk4
{/ddt dt def} if end [ [formatoutput] aload pop true setglobal ] globaldict
exch /lorenzXYZseg exch cvx put false setglobal (o) odeprint ode@dict
N end 1 sub { ode@laststate ODEINT [ exch aload pop true setglobal
] globaldict exch /ode@laststate exch put false setglobal [ lorenzXYZseg
[formatoutput] aload pop true setglobal ] globaldict exch /lorenzXYZseg
exch cvx put globaldict /ode@dt ode@dict dt end put globaldict /ode@ddt
ode@dict ddt end put globaldict /ode@tcur ode@dict tcur end put globaldict
/ode@tout ode@dict tout end put false setglobal } repeat (\n) odeprint
end
 1833 2454 a 1833 2454 a
/lorenzXYZall [lorenzXYZall lorenzXYZseg] aload astore cvx def

1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZseg counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0
TeXcolorgray 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj45} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray 1833 2454 a
 tx@odeDict begin /odeprint {0 cvs print flush} def /odeprint load
0 256 string put /ode@tol 1e-6 def /rk4 false def tx@Dict begin 1 dict
begin 11 end end ode@dict /tStart exch def end tx@Dict begin 1 dict
begin 11.25 end end ode@dict /tEnd exch def end tx@Dict begin 1 dict
begin 26 cvi end end ode@dict /N exch def end ode@dict /dt tEnd tStart
sub N 1 sub div def end ode@dict /xlength ode@laststate length def
end ode@dict /xlength1 xlength 1 add def end /ode@rpn tx@Dict begin
(10*(x[1]-x[0])|x[0]*(28-x[2])-x[1]|x[0]*x[1]-8/3*x[2]) AlgParser end
cvx bind def /ODESET {ode@dict /x exch def /y x def end tx@Dict begin
ode@dict ode@rpn end end ode@dict xlength end array astore } bind def
/formatoutput {[0 1 2] assembleresult} def rk4 { (\npstODEsolve (RK4),)
odeprint ( "o" output step:\n) odeprint }{ (\npstODEsolve (RKF45),\n)
odeprint (-/+ failed/successful step, "o" output step, "!" step size underflow (stop):\n)
odeprint } ifelse ode@dict /tcur tStart def /outStepCnt 1 def /tout
tStart dt add def 0 0 eq {/ddt ode@ddt def}{/ddt 0 def} ifelse rk4
{/ddt dt def} if end [ [formatoutput] aload pop true setglobal ] globaldict
exch /lorenzXYZseg exch cvx put false setglobal (o) odeprint ode@dict
N end 1 sub { ode@laststate ODEINT [ exch aload pop true setglobal
] globaldict exch /ode@laststate exch put false setglobal [ lorenzXYZseg
[formatoutput] aload pop true setglobal ] globaldict exch /lorenzXYZseg
exch cvx put globaldict /ode@dt ode@dict dt end put globaldict /ode@ddt
ode@dict ddt end put globaldict /ode@tcur ode@dict tcur end put globaldict
/ode@tout ode@dict tout end put false setglobal } repeat (\n) odeprint
end
 1833 2454 a 1833 2454 a
/lorenzXYZall [lorenzXYZall lorenzXYZseg] aload astore cvx def

1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZseg counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0
TeXcolorgray 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj46} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray 1833 2454 a
 tx@odeDict begin /odeprint {0 cvs print flush} def /odeprint load
0 256 string put /ode@tol 1e-6 def /rk4 false def tx@Dict begin 1 dict
begin 11.25 end end ode@dict /tStart exch def end tx@Dict begin 1 dict
begin 11.5 end end ode@dict /tEnd exch def end tx@Dict begin 1 dict
begin 26 cvi end end ode@dict /N exch def end ode@dict /dt tEnd tStart
sub N 1 sub div def end ode@dict /xlength ode@laststate length def
end ode@dict /xlength1 xlength 1 add def end /ode@rpn tx@Dict begin
(10*(x[1]-x[0])|x[0]*(28-x[2])-x[1]|x[0]*x[1]-8/3*x[2]) AlgParser end
cvx bind def /ODESET {ode@dict /x exch def /y x def end tx@Dict begin
ode@dict ode@rpn end end ode@dict xlength end array astore } bind def
/formatoutput {[0 1 2] assembleresult} def rk4 { (\npstODEsolve (RK4),)
odeprint ( "o" output step:\n) odeprint }{ (\npstODEsolve (RKF45),\n)
odeprint (-/+ failed/successful step, "o" output step, "!" step size underflow (stop):\n)
odeprint } ifelse ode@dict /tcur tStart def /outStepCnt 1 def /tout
tStart dt add def 0 0 eq {/ddt ode@ddt def}{/ddt 0 def} ifelse rk4
{/ddt dt def} if end [ [formatoutput] aload pop true setglobal ] globaldict
exch /lorenzXYZseg exch cvx put false setglobal (o) odeprint ode@dict
N end 1 sub { ode@laststate ODEINT [ exch aload pop true setglobal
] globaldict exch /ode@laststate exch put false setglobal [ lorenzXYZseg
[formatoutput] aload pop true setglobal ] globaldict exch /lorenzXYZseg
exch cvx put globaldict /ode@dt ode@dict dt end put globaldict /ode@ddt
ode@dict ddt end put globaldict /ode@tcur ode@dict tcur end put globaldict
/ode@tout ode@dict tout end put false setglobal } repeat (\n) odeprint
end
 1833 2454 a 1833 2454 a
/lorenzXYZall [lorenzXYZall lorenzXYZseg] aload astore cvx def

1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZseg counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0
TeXcolorgray 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj47} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray 1833 2454 a
 tx@odeDict begin /odeprint {0 cvs print flush} def /odeprint load
0 256 string put /ode@tol 1e-6 def /rk4 false def tx@Dict begin 1 dict
begin 11.5 end end ode@dict /tStart exch def end tx@Dict begin 1 dict
begin 11.75 end end ode@dict /tEnd exch def end tx@Dict begin 1 dict
begin 26 cvi end end ode@dict /N exch def end ode@dict /dt tEnd tStart
sub N 1 sub div def end ode@dict /xlength ode@laststate length def
end ode@dict /xlength1 xlength 1 add def end /ode@rpn tx@Dict begin
(10*(x[1]-x[0])|x[0]*(28-x[2])-x[1]|x[0]*x[1]-8/3*x[2]) AlgParser end
cvx bind def /ODESET {ode@dict /x exch def /y x def end tx@Dict begin
ode@dict ode@rpn end end ode@dict xlength end array astore } bind def
/formatoutput {[0 1 2] assembleresult} def rk4 { (\npstODEsolve (RK4),)
odeprint ( "o" output step:\n) odeprint }{ (\npstODEsolve (RKF45),\n)
odeprint (-/+ failed/successful step, "o" output step, "!" step size underflow (stop):\n)
odeprint } ifelse ode@dict /tcur tStart def /outStepCnt 1 def /tout
tStart dt add def 0 0 eq {/ddt ode@ddt def}{/ddt 0 def} ifelse rk4
{/ddt dt def} if end [ [formatoutput] aload pop true setglobal ] globaldict
exch /lorenzXYZseg exch cvx put false setglobal (o) odeprint ode@dict
N end 1 sub { ode@laststate ODEINT [ exch aload pop true setglobal
] globaldict exch /ode@laststate exch put false setglobal [ lorenzXYZseg
[formatoutput] aload pop true setglobal ] globaldict exch /lorenzXYZseg
exch cvx put globaldict /ode@dt ode@dict dt end put globaldict /ode@ddt
ode@dict ddt end put globaldict /ode@tcur ode@dict tcur end put globaldict
/ode@tout ode@dict tout end put false setglobal } repeat (\n) odeprint
end
 1833 2454 a 1833 2454 a
/lorenzXYZall [lorenzXYZall lorenzXYZseg] aload astore cvx def

1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZseg counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0
TeXcolorgray 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj48} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray 1833 2454 a
 tx@odeDict begin /odeprint {0 cvs print flush} def /odeprint load
0 256 string put /ode@tol 1e-6 def /rk4 false def tx@Dict begin 1 dict
begin 11.75 end end ode@dict /tStart exch def end tx@Dict begin 1 dict
begin 12 end end ode@dict /tEnd exch def end tx@Dict begin 1 dict begin
26 cvi end end ode@dict /N exch def end ode@dict /dt tEnd tStart sub
N 1 sub div def end ode@dict /xlength ode@laststate length def end
ode@dict /xlength1 xlength 1 add def end /ode@rpn tx@Dict begin (10*(x[1]-x[0])|x[0]*(28-x[2])-x[1]|x[0]*x[1]-8/3*x[2])
AlgParser end cvx bind def /ODESET {ode@dict /x exch def /y x def end
tx@Dict begin ode@dict ode@rpn end end ode@dict xlength end array astore
} bind def /formatoutput {[0 1 2] assembleresult} def rk4 { (\npstODEsolve (RK4),)
odeprint ( "o" output step:\n) odeprint }{ (\npstODEsolve (RKF45),\n)
odeprint (-/+ failed/successful step, "o" output step, "!" step size underflow (stop):\n)
odeprint } ifelse ode@dict /tcur tStart def /outStepCnt 1 def /tout
tStart dt add def 0 0 eq {/ddt ode@ddt def}{/ddt 0 def} ifelse rk4
{/ddt dt def} if end [ [formatoutput] aload pop true setglobal ] globaldict
exch /lorenzXYZseg exch cvx put false setglobal (o) odeprint ode@dict
N end 1 sub { ode@laststate ODEINT [ exch aload pop true setglobal
] globaldict exch /ode@laststate exch put false setglobal [ lorenzXYZseg
[formatoutput] aload pop true setglobal ] globaldict exch /lorenzXYZseg
exch cvx put globaldict /ode@dt ode@dict dt end put globaldict /ode@ddt
ode@dict ddt end put globaldict /ode@tcur ode@dict tcur end put globaldict
/ode@tout ode@dict tout end put false setglobal } repeat (\n) odeprint
end
 1833 2454 a 1833 2454 a
/lorenzXYZall [lorenzXYZall lorenzXYZseg] aload astore cvx def

1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZseg counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0
TeXcolorgray 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj49} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray 1833 2454 a
 tx@odeDict begin /odeprint {0 cvs print flush} def /odeprint load
0 256 string put /ode@tol 1e-6 def /rk4 false def tx@Dict begin 1 dict
begin 12 end end ode@dict /tStart exch def end tx@Dict begin 1 dict
begin 12.25 end end ode@dict /tEnd exch def end tx@Dict begin 1 dict
begin 26 cvi end end ode@dict /N exch def end ode@dict /dt tEnd tStart
sub N 1 sub div def end ode@dict /xlength ode@laststate length def
end ode@dict /xlength1 xlength 1 add def end /ode@rpn tx@Dict begin
(10*(x[1]-x[0])|x[0]*(28-x[2])-x[1]|x[0]*x[1]-8/3*x[2]) AlgParser end
cvx bind def /ODESET {ode@dict /x exch def /y x def end tx@Dict begin
ode@dict ode@rpn end end ode@dict xlength end array astore } bind def
/formatoutput {[0 1 2] assembleresult} def rk4 { (\npstODEsolve (RK4),)
odeprint ( "o" output step:\n) odeprint }{ (\npstODEsolve (RKF45),\n)
odeprint (-/+ failed/successful step, "o" output step, "!" step size underflow (stop):\n)
odeprint } ifelse ode@dict /tcur tStart def /outStepCnt 1 def /tout
tStart dt add def 0 0 eq {/ddt ode@ddt def}{/ddt 0 def} ifelse rk4
{/ddt dt def} if end [ [formatoutput] aload pop true setglobal ] globaldict
exch /lorenzXYZseg exch cvx put false setglobal (o) odeprint ode@dict
N end 1 sub { ode@laststate ODEINT [ exch aload pop true setglobal
] globaldict exch /ode@laststate exch put false setglobal [ lorenzXYZseg
[formatoutput] aload pop true setglobal ] globaldict exch /lorenzXYZseg
exch cvx put globaldict /ode@dt ode@dict dt end put globaldict /ode@ddt
ode@dict ddt end put globaldict /ode@tcur ode@dict tcur end put globaldict
/ode@tout ode@dict tout end put false setglobal } repeat (\n) odeprint
end
 1833 2454 a 1833 2454 a
/lorenzXYZall [lorenzXYZall lorenzXYZseg] aload astore cvx def

1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZseg counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0
TeXcolorgray 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj50} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray 1833 2454 a
 tx@odeDict begin /odeprint {0 cvs print flush} def /odeprint load
0 256 string put /ode@tol 1e-6 def /rk4 false def tx@Dict begin 1 dict
begin 12.25 end end ode@dict /tStart exch def end tx@Dict begin 1 dict
begin 12.5 end end ode@dict /tEnd exch def end tx@Dict begin 1 dict
begin 26 cvi end end ode@dict /N exch def end ode@dict /dt tEnd tStart
sub N 1 sub div def end ode@dict /xlength ode@laststate length def
end ode@dict /xlength1 xlength 1 add def end /ode@rpn tx@Dict begin
(10*(x[1]-x[0])|x[0]*(28-x[2])-x[1]|x[0]*x[1]-8/3*x[2]) AlgParser end
cvx bind def /ODESET {ode@dict /x exch def /y x def end tx@Dict begin
ode@dict ode@rpn end end ode@dict xlength end array astore } bind def
/formatoutput {[0 1 2] assembleresult} def rk4 { (\npstODEsolve (RK4),)
odeprint ( "o" output step:\n) odeprint }{ (\npstODEsolve (RKF45),\n)
odeprint (-/+ failed/successful step, "o" output step, "!" step size underflow (stop):\n)
odeprint } ifelse ode@dict /tcur tStart def /outStepCnt 1 def /tout
tStart dt add def 0 0 eq {/ddt ode@ddt def}{/ddt 0 def} ifelse rk4
{/ddt dt def} if end [ [formatoutput] aload pop true setglobal ] globaldict
exch /lorenzXYZseg exch cvx put false setglobal (o) odeprint ode@dict
N end 1 sub { ode@laststate ODEINT [ exch aload pop true setglobal
] globaldict exch /ode@laststate exch put false setglobal [ lorenzXYZseg
[formatoutput] aload pop true setglobal ] globaldict exch /lorenzXYZseg
exch cvx put globaldict /ode@dt ode@dict dt end put globaldict /ode@ddt
ode@dict ddt end put globaldict /ode@tcur ode@dict tcur end put globaldict
/ode@tout ode@dict tout end put false setglobal } repeat (\n) odeprint
end
 1833 2454 a 1833 2454 a
/lorenzXYZall [lorenzXYZall lorenzXYZseg] aload astore cvx def

1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZseg counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0
TeXcolorgray 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj51} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray 1833 2454 a
 tx@odeDict begin /odeprint {0 cvs print flush} def /odeprint load
0 256 string put /ode@tol 1e-6 def /rk4 false def tx@Dict begin 1 dict
begin 12.5 end end ode@dict /tStart exch def end tx@Dict begin 1 dict
begin 12.75 end end ode@dict /tEnd exch def end tx@Dict begin 1 dict
begin 26 cvi end end ode@dict /N exch def end ode@dict /dt tEnd tStart
sub N 1 sub div def end ode@dict /xlength ode@laststate length def
end ode@dict /xlength1 xlength 1 add def end /ode@rpn tx@Dict begin
(10*(x[1]-x[0])|x[0]*(28-x[2])-x[1]|x[0]*x[1]-8/3*x[2]) AlgParser end
cvx bind def /ODESET {ode@dict /x exch def /y x def end tx@Dict begin
ode@dict ode@rpn end end ode@dict xlength end array astore } bind def
/formatoutput {[0 1 2] assembleresult} def rk4 { (\npstODEsolve (RK4),)
odeprint ( "o" output step:\n) odeprint }{ (\npstODEsolve (RKF45),\n)
odeprint (-/+ failed/successful step, "o" output step, "!" step size underflow (stop):\n)
odeprint } ifelse ode@dict /tcur tStart def /outStepCnt 1 def /tout
tStart dt add def 0 0 eq {/ddt ode@ddt def}{/ddt 0 def} ifelse rk4
{/ddt dt def} if end [ [formatoutput] aload pop true setglobal ] globaldict
exch /lorenzXYZseg exch cvx put false setglobal (o) odeprint ode@dict
N end 1 sub { ode@laststate ODEINT [ exch aload pop true setglobal
] globaldict exch /ode@laststate exch put false setglobal [ lorenzXYZseg
[formatoutput] aload pop true setglobal ] globaldict exch /lorenzXYZseg
exch cvx put globaldict /ode@dt ode@dict dt end put globaldict /ode@ddt
ode@dict ddt end put globaldict /ode@tcur ode@dict tcur end put globaldict
/ode@tout ode@dict tout end put false setglobal } repeat (\n) odeprint
end
 1833 2454 a 1833 2454 a
/lorenzXYZall [lorenzXYZall lorenzXYZseg] aload astore cvx def

1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZseg counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0
TeXcolorgray 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj52} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray 1833 2454 a
 tx@odeDict begin /odeprint {0 cvs print flush} def /odeprint load
0 256 string put /ode@tol 1e-6 def /rk4 false def tx@Dict begin 1 dict
begin 12.75 end end ode@dict /tStart exch def end tx@Dict begin 1 dict
begin 13 end end ode@dict /tEnd exch def end tx@Dict begin 1 dict begin
26 cvi end end ode@dict /N exch def end ode@dict /dt tEnd tStart sub
N 1 sub div def end ode@dict /xlength ode@laststate length def end
ode@dict /xlength1 xlength 1 add def end /ode@rpn tx@Dict begin (10*(x[1]-x[0])|x[0]*(28-x[2])-x[1]|x[0]*x[1]-8/3*x[2])
AlgParser end cvx bind def /ODESET {ode@dict /x exch def /y x def end
tx@Dict begin ode@dict ode@rpn end end ode@dict xlength end array astore
} bind def /formatoutput {[0 1 2] assembleresult} def rk4 { (\npstODEsolve (RK4),)
odeprint ( "o" output step:\n) odeprint }{ (\npstODEsolve (RKF45),\n)
odeprint (-/+ failed/successful step, "o" output step, "!" step size underflow (stop):\n)
odeprint } ifelse ode@dict /tcur tStart def /outStepCnt 1 def /tout
tStart dt add def 0 0 eq {/ddt ode@ddt def}{/ddt 0 def} ifelse rk4
{/ddt dt def} if end [ [formatoutput] aload pop true setglobal ] globaldict
exch /lorenzXYZseg exch cvx put false setglobal (o) odeprint ode@dict
N end 1 sub { ode@laststate ODEINT [ exch aload pop true setglobal
] globaldict exch /ode@laststate exch put false setglobal [ lorenzXYZseg
[formatoutput] aload pop true setglobal ] globaldict exch /lorenzXYZseg
exch cvx put globaldict /ode@dt ode@dict dt end put globaldict /ode@ddt
ode@dict ddt end put globaldict /ode@tcur ode@dict tcur end put globaldict
/ode@tout ode@dict tout end put false setglobal } repeat (\n) odeprint
end
 1833 2454 a 1833 2454 a
/lorenzXYZall [lorenzXYZall lorenzXYZseg] aload astore cvx def

1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZseg counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0
TeXcolorgray 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj53} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray 1833 2454 a
 tx@odeDict begin /odeprint {0 cvs print flush} def /odeprint load
0 256 string put /ode@tol 1e-6 def /rk4 false def tx@Dict begin 1 dict
begin 13 end end ode@dict /tStart exch def end tx@Dict begin 1 dict
begin 13.25 end end ode@dict /tEnd exch def end tx@Dict begin 1 dict
begin 26 cvi end end ode@dict /N exch def end ode@dict /dt tEnd tStart
sub N 1 sub div def end ode@dict /xlength ode@laststate length def
end ode@dict /xlength1 xlength 1 add def end /ode@rpn tx@Dict begin
(10*(x[1]-x[0])|x[0]*(28-x[2])-x[1]|x[0]*x[1]-8/3*x[2]) AlgParser end
cvx bind def /ODESET {ode@dict /x exch def /y x def end tx@Dict begin
ode@dict ode@rpn end end ode@dict xlength end array astore } bind def
/formatoutput {[0 1 2] assembleresult} def rk4 { (\npstODEsolve (RK4),)
odeprint ( "o" output step:\n) odeprint }{ (\npstODEsolve (RKF45),\n)
odeprint (-/+ failed/successful step, "o" output step, "!" step size underflow (stop):\n)
odeprint } ifelse ode@dict /tcur tStart def /outStepCnt 1 def /tout
tStart dt add def 0 0 eq {/ddt ode@ddt def}{/ddt 0 def} ifelse rk4
{/ddt dt def} if end [ [formatoutput] aload pop true setglobal ] globaldict
exch /lorenzXYZseg exch cvx put false setglobal (o) odeprint ode@dict
N end 1 sub { ode@laststate ODEINT [ exch aload pop true setglobal
] globaldict exch /ode@laststate exch put false setglobal [ lorenzXYZseg
[formatoutput] aload pop true setglobal ] globaldict exch /lorenzXYZseg
exch cvx put globaldict /ode@dt ode@dict dt end put globaldict /ode@ddt
ode@dict ddt end put globaldict /ode@tcur ode@dict tcur end put globaldict
/ode@tout ode@dict tout end put false setglobal } repeat (\n) odeprint
end
 1833 2454 a 1833 2454 a
/lorenzXYZall [lorenzXYZall lorenzXYZseg] aload astore cvx def

1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZseg counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0
TeXcolorgray 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj54} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray 1833 2454 a
 tx@odeDict begin /odeprint {0 cvs print flush} def /odeprint load
0 256 string put /ode@tol 1e-6 def /rk4 false def tx@Dict begin 1 dict
begin 13.25 end end ode@dict /tStart exch def end tx@Dict begin 1 dict
begin 13.5 end end ode@dict /tEnd exch def end tx@Dict begin 1 dict
begin 26 cvi end end ode@dict /N exch def end ode@dict /dt tEnd tStart
sub N 1 sub div def end ode@dict /xlength ode@laststate length def
end ode@dict /xlength1 xlength 1 add def end /ode@rpn tx@Dict begin
(10*(x[1]-x[0])|x[0]*(28-x[2])-x[1]|x[0]*x[1]-8/3*x[2]) AlgParser end
cvx bind def /ODESET {ode@dict /x exch def /y x def end tx@Dict begin
ode@dict ode@rpn end end ode@dict xlength end array astore } bind def
/formatoutput {[0 1 2] assembleresult} def rk4 { (\npstODEsolve (RK4),)
odeprint ( "o" output step:\n) odeprint }{ (\npstODEsolve (RKF45),\n)
odeprint (-/+ failed/successful step, "o" output step, "!" step size underflow (stop):\n)
odeprint } ifelse ode@dict /tcur tStart def /outStepCnt 1 def /tout
tStart dt add def 0 0 eq {/ddt ode@ddt def}{/ddt 0 def} ifelse rk4
{/ddt dt def} if end [ [formatoutput] aload pop true setglobal ] globaldict
exch /lorenzXYZseg exch cvx put false setglobal (o) odeprint ode@dict
N end 1 sub { ode@laststate ODEINT [ exch aload pop true setglobal
] globaldict exch /ode@laststate exch put false setglobal [ lorenzXYZseg
[formatoutput] aload pop true setglobal ] globaldict exch /lorenzXYZseg
exch cvx put globaldict /ode@dt ode@dict dt end put globaldict /ode@ddt
ode@dict ddt end put globaldict /ode@tcur ode@dict tcur end put globaldict
/ode@tout ode@dict tout end put false setglobal } repeat (\n) odeprint
end
 1833 2454 a 1833 2454 a
/lorenzXYZall [lorenzXYZall lorenzXYZseg] aload astore cvx def

1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZseg counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0
TeXcolorgray 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj55} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray 1833 2454 a
 tx@odeDict begin /odeprint {0 cvs print flush} def /odeprint load
0 256 string put /ode@tol 1e-6 def /rk4 false def tx@Dict begin 1 dict
begin 13.5 end end ode@dict /tStart exch def end tx@Dict begin 1 dict
begin 13.75 end end ode@dict /tEnd exch def end tx@Dict begin 1 dict
begin 26 cvi end end ode@dict /N exch def end ode@dict /dt tEnd tStart
sub N 1 sub div def end ode@dict /xlength ode@laststate length def
end ode@dict /xlength1 xlength 1 add def end /ode@rpn tx@Dict begin
(10*(x[1]-x[0])|x[0]*(28-x[2])-x[1]|x[0]*x[1]-8/3*x[2]) AlgParser end
cvx bind def /ODESET {ode@dict /x exch def /y x def end tx@Dict begin
ode@dict ode@rpn end end ode@dict xlength end array astore } bind def
/formatoutput {[0 1 2] assembleresult} def rk4 { (\npstODEsolve (RK4),)
odeprint ( "o" output step:\n) odeprint }{ (\npstODEsolve (RKF45),\n)
odeprint (-/+ failed/successful step, "o" output step, "!" step size underflow (stop):\n)
odeprint } ifelse ode@dict /tcur tStart def /outStepCnt 1 def /tout
tStart dt add def 0 0 eq {/ddt ode@ddt def}{/ddt 0 def} ifelse rk4
{/ddt dt def} if end [ [formatoutput] aload pop true setglobal ] globaldict
exch /lorenzXYZseg exch cvx put false setglobal (o) odeprint ode@dict
N end 1 sub { ode@laststate ODEINT [ exch aload pop true setglobal
] globaldict exch /ode@laststate exch put false setglobal [ lorenzXYZseg
[formatoutput] aload pop true setglobal ] globaldict exch /lorenzXYZseg
exch cvx put globaldict /ode@dt ode@dict dt end put globaldict /ode@ddt
ode@dict ddt end put globaldict /ode@tcur ode@dict tcur end put globaldict
/ode@tout ode@dict tout end put false setglobal } repeat (\n) odeprint
end
 1833 2454 a 1833 2454 a
/lorenzXYZall [lorenzXYZall lorenzXYZseg] aload astore cvx def

1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZseg counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0
TeXcolorgray 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj56} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray 1833 2454 a
 tx@odeDict begin /odeprint {0 cvs print flush} def /odeprint load
0 256 string put /ode@tol 1e-6 def /rk4 false def tx@Dict begin 1 dict
begin 13.75 end end ode@dict /tStart exch def end tx@Dict begin 1 dict
begin 14 end end ode@dict /tEnd exch def end tx@Dict begin 1 dict begin
26 cvi end end ode@dict /N exch def end ode@dict /dt tEnd tStart sub
N 1 sub div def end ode@dict /xlength ode@laststate length def end
ode@dict /xlength1 xlength 1 add def end /ode@rpn tx@Dict begin (10*(x[1]-x[0])|x[0]*(28-x[2])-x[1]|x[0]*x[1]-8/3*x[2])
AlgParser end cvx bind def /ODESET {ode@dict /x exch def /y x def end
tx@Dict begin ode@dict ode@rpn end end ode@dict xlength end array astore
} bind def /formatoutput {[0 1 2] assembleresult} def rk4 { (\npstODEsolve (RK4),)
odeprint ( "o" output step:\n) odeprint }{ (\npstODEsolve (RKF45),\n)
odeprint (-/+ failed/successful step, "o" output step, "!" step size underflow (stop):\n)
odeprint } ifelse ode@dict /tcur tStart def /outStepCnt 1 def /tout
tStart dt add def 0 0 eq {/ddt ode@ddt def}{/ddt 0 def} ifelse rk4
{/ddt dt def} if end [ [formatoutput] aload pop true setglobal ] globaldict
exch /lorenzXYZseg exch cvx put false setglobal (o) odeprint ode@dict
N end 1 sub { ode@laststate ODEINT [ exch aload pop true setglobal
] globaldict exch /ode@laststate exch put false setglobal [ lorenzXYZseg
[formatoutput] aload pop true setglobal ] globaldict exch /lorenzXYZseg
exch cvx put globaldict /ode@dt ode@dict dt end put globaldict /ode@ddt
ode@dict ddt end put globaldict /ode@tcur ode@dict tcur end put globaldict
/ode@tout ode@dict tout end put false setglobal } repeat (\n) odeprint
end
 1833 2454 a 1833 2454 a
/lorenzXYZall [lorenzXYZall lorenzXYZseg] aload astore cvx def

1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZseg counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0
TeXcolorgray 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj57} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray 1833 2454 a
 tx@odeDict begin /odeprint {0 cvs print flush} def /odeprint load
0 256 string put /ode@tol 1e-6 def /rk4 false def tx@Dict begin 1 dict
begin 14 end end ode@dict /tStart exch def end tx@Dict begin 1 dict
begin 14.25 end end ode@dict /tEnd exch def end tx@Dict begin 1 dict
begin 26 cvi end end ode@dict /N exch def end ode@dict /dt tEnd tStart
sub N 1 sub div def end ode@dict /xlength ode@laststate length def
end ode@dict /xlength1 xlength 1 add def end /ode@rpn tx@Dict begin
(10*(x[1]-x[0])|x[0]*(28-x[2])-x[1]|x[0]*x[1]-8/3*x[2]) AlgParser end
cvx bind def /ODESET {ode@dict /x exch def /y x def end tx@Dict begin
ode@dict ode@rpn end end ode@dict xlength end array astore } bind def
/formatoutput {[0 1 2] assembleresult} def rk4 { (\npstODEsolve (RK4),)
odeprint ( "o" output step:\n) odeprint }{ (\npstODEsolve (RKF45),\n)
odeprint (-/+ failed/successful step, "o" output step, "!" step size underflow (stop):\n)
odeprint } ifelse ode@dict /tcur tStart def /outStepCnt 1 def /tout
tStart dt add def 0 0 eq {/ddt ode@ddt def}{/ddt 0 def} ifelse rk4
{/ddt dt def} if end [ [formatoutput] aload pop true setglobal ] globaldict
exch /lorenzXYZseg exch cvx put false setglobal (o) odeprint ode@dict
N end 1 sub { ode@laststate ODEINT [ exch aload pop true setglobal
] globaldict exch /ode@laststate exch put false setglobal [ lorenzXYZseg
[formatoutput] aload pop true setglobal ] globaldict exch /lorenzXYZseg
exch cvx put globaldict /ode@dt ode@dict dt end put globaldict /ode@ddt
ode@dict ddt end put globaldict /ode@tcur ode@dict tcur end put globaldict
/ode@tout ode@dict tout end put false setglobal } repeat (\n) odeprint
end
 1833 2454 a 1833 2454 a
/lorenzXYZall [lorenzXYZall lorenzXYZseg] aload astore cvx def

1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZseg counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0
TeXcolorgray 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj58} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray 1833 2454 a
 tx@odeDict begin /odeprint {0 cvs print flush} def /odeprint load
0 256 string put /ode@tol 1e-6 def /rk4 false def tx@Dict begin 1 dict
begin 14.25 end end ode@dict /tStart exch def end tx@Dict begin 1 dict
begin 14.5 end end ode@dict /tEnd exch def end tx@Dict begin 1 dict
begin 26 cvi end end ode@dict /N exch def end ode@dict /dt tEnd tStart
sub N 1 sub div def end ode@dict /xlength ode@laststate length def
end ode@dict /xlength1 xlength 1 add def end /ode@rpn tx@Dict begin
(10*(x[1]-x[0])|x[0]*(28-x[2])-x[1]|x[0]*x[1]-8/3*x[2]) AlgParser end
cvx bind def /ODESET {ode@dict /x exch def /y x def end tx@Dict begin
ode@dict ode@rpn end end ode@dict xlength end array astore } bind def
/formatoutput {[0 1 2] assembleresult} def rk4 { (\npstODEsolve (RK4),)
odeprint ( "o" output step:\n) odeprint }{ (\npstODEsolve (RKF45),\n)
odeprint (-/+ failed/successful step, "o" output step, "!" step size underflow (stop):\n)
odeprint } ifelse ode@dict /tcur tStart def /outStepCnt 1 def /tout
tStart dt add def 0 0 eq {/ddt ode@ddt def}{/ddt 0 def} ifelse rk4
{/ddt dt def} if end [ [formatoutput] aload pop true setglobal ] globaldict
exch /lorenzXYZseg exch cvx put false setglobal (o) odeprint ode@dict
N end 1 sub { ode@laststate ODEINT [ exch aload pop true setglobal
] globaldict exch /ode@laststate exch put false setglobal [ lorenzXYZseg
[formatoutput] aload pop true setglobal ] globaldict exch /lorenzXYZseg
exch cvx put globaldict /ode@dt ode@dict dt end put globaldict /ode@ddt
ode@dict ddt end put globaldict /ode@tcur ode@dict tcur end put globaldict
/ode@tout ode@dict tout end put false setglobal } repeat (\n) odeprint
end
 1833 2454 a 1833 2454 a
/lorenzXYZall [lorenzXYZall lorenzXYZseg] aload astore cvx def

1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZseg counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0
TeXcolorgray 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj59} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray 1833 2454 a
 tx@odeDict begin /odeprint {0 cvs print flush} def /odeprint load
0 256 string put /ode@tol 1e-6 def /rk4 false def tx@Dict begin 1 dict
begin 14.5 end end ode@dict /tStart exch def end tx@Dict begin 1 dict
begin 14.75 end end ode@dict /tEnd exch def end tx@Dict begin 1 dict
begin 26 cvi end end ode@dict /N exch def end ode@dict /dt tEnd tStart
sub N 1 sub div def end ode@dict /xlength ode@laststate length def
end ode@dict /xlength1 xlength 1 add def end /ode@rpn tx@Dict begin
(10*(x[1]-x[0])|x[0]*(28-x[2])-x[1]|x[0]*x[1]-8/3*x[2]) AlgParser end
cvx bind def /ODESET {ode@dict /x exch def /y x def end tx@Dict begin
ode@dict ode@rpn end end ode@dict xlength end array astore } bind def
/formatoutput {[0 1 2] assembleresult} def rk4 { (\npstODEsolve (RK4),)
odeprint ( "o" output step:\n) odeprint }{ (\npstODEsolve (RKF45),\n)
odeprint (-/+ failed/successful step, "o" output step, "!" step size underflow (stop):\n)
odeprint } ifelse ode@dict /tcur tStart def /outStepCnt 1 def /tout
tStart dt add def 0 0 eq {/ddt ode@ddt def}{/ddt 0 def} ifelse rk4
{/ddt dt def} if end [ [formatoutput] aload pop true setglobal ] globaldict
exch /lorenzXYZseg exch cvx put false setglobal (o) odeprint ode@dict
N end 1 sub { ode@laststate ODEINT [ exch aload pop true setglobal
] globaldict exch /ode@laststate exch put false setglobal [ lorenzXYZseg
[formatoutput] aload pop true setglobal ] globaldict exch /lorenzXYZseg
exch cvx put globaldict /ode@dt ode@dict dt end put globaldict /ode@ddt
ode@dict ddt end put globaldict /ode@tcur ode@dict tcur end put globaldict
/ode@tout ode@dict tout end put false setglobal } repeat (\n) odeprint
end
 1833 2454 a 1833 2454 a
/lorenzXYZall [lorenzXYZall lorenzXYZseg] aload astore cvx def

1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZseg counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0
TeXcolorgray 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj60} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray 1833 2454 a
 tx@odeDict begin /odeprint {0 cvs print flush} def /odeprint load
0 256 string put /ode@tol 1e-6 def /rk4 false def tx@Dict begin 1 dict
begin 14.75 end end ode@dict /tStart exch def end tx@Dict begin 1 dict
begin 15 end end ode@dict /tEnd exch def end tx@Dict begin 1 dict begin
26 cvi end end ode@dict /N exch def end ode@dict /dt tEnd tStart sub
N 1 sub div def end ode@dict /xlength ode@laststate length def end
ode@dict /xlength1 xlength 1 add def end /ode@rpn tx@Dict begin (10*(x[1]-x[0])|x[0]*(28-x[2])-x[1]|x[0]*x[1]-8/3*x[2])
AlgParser end cvx bind def /ODESET {ode@dict /x exch def /y x def end
tx@Dict begin ode@dict ode@rpn end end ode@dict xlength end array astore
} bind def /formatoutput {[0 1 2] assembleresult} def rk4 { (\npstODEsolve (RK4),)
odeprint ( "o" output step:\n) odeprint }{ (\npstODEsolve (RKF45),\n)
odeprint (-/+ failed/successful step, "o" output step, "!" step size underflow (stop):\n)
odeprint } ifelse ode@dict /tcur tStart def /outStepCnt 1 def /tout
tStart dt add def 0 0 eq {/ddt ode@ddt def}{/ddt 0 def} ifelse rk4
{/ddt dt def} if end [ [formatoutput] aload pop true setglobal ] globaldict
exch /lorenzXYZseg exch cvx put false setglobal (o) odeprint ode@dict
N end 1 sub { ode@laststate ODEINT [ exch aload pop true setglobal
] globaldict exch /ode@laststate exch put false setglobal [ lorenzXYZseg
[formatoutput] aload pop true setglobal ] globaldict exch /lorenzXYZseg
exch cvx put globaldict /ode@dt ode@dict dt end put globaldict /ode@ddt
ode@dict ddt end put globaldict /ode@tcur ode@dict tcur end put globaldict
/ode@tout ode@dict tout end put false setglobal } repeat (\n) odeprint
end
 1833 2454 a 1833 2454 a
/lorenzXYZall [lorenzXYZall lorenzXYZseg] aload astore cvx def

1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZseg counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0
TeXcolorgray 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj61} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray 1833 2454 a
 tx@odeDict begin /odeprint {0 cvs print flush} def /odeprint load
0 256 string put /ode@tol 1e-6 def /rk4 false def tx@Dict begin 1 dict
begin 15 end end ode@dict /tStart exch def end tx@Dict begin 1 dict
begin 15.25 end end ode@dict /tEnd exch def end tx@Dict begin 1 dict
begin 26 cvi end end ode@dict /N exch def end ode@dict /dt tEnd tStart
sub N 1 sub div def end ode@dict /xlength ode@laststate length def
end ode@dict /xlength1 xlength 1 add def end /ode@rpn tx@Dict begin
(10*(x[1]-x[0])|x[0]*(28-x[2])-x[1]|x[0]*x[1]-8/3*x[2]) AlgParser end
cvx bind def /ODESET {ode@dict /x exch def /y x def end tx@Dict begin
ode@dict ode@rpn end end ode@dict xlength end array astore } bind def
/formatoutput {[0 1 2] assembleresult} def rk4 { (\npstODEsolve (RK4),)
odeprint ( "o" output step:\n) odeprint }{ (\npstODEsolve (RKF45),\n)
odeprint (-/+ failed/successful step, "o" output step, "!" step size underflow (stop):\n)
odeprint } ifelse ode@dict /tcur tStart def /outStepCnt 1 def /tout
tStart dt add def 0 0 eq {/ddt ode@ddt def}{/ddt 0 def} ifelse rk4
{/ddt dt def} if end [ [formatoutput] aload pop true setglobal ] globaldict
exch /lorenzXYZseg exch cvx put false setglobal (o) odeprint ode@dict
N end 1 sub { ode@laststate ODEINT [ exch aload pop true setglobal
] globaldict exch /ode@laststate exch put false setglobal [ lorenzXYZseg
[formatoutput] aload pop true setglobal ] globaldict exch /lorenzXYZseg
exch cvx put globaldict /ode@dt ode@dict dt end put globaldict /ode@ddt
ode@dict ddt end put globaldict /ode@tcur ode@dict tcur end put globaldict
/ode@tout ode@dict tout end put false setglobal } repeat (\n) odeprint
end
 1833 2454 a 1833 2454 a
/lorenzXYZall [lorenzXYZall lorenzXYZseg] aload astore cvx def

1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZseg counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0
TeXcolorgray 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj62} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray 1833 2454 a
 tx@odeDict begin /odeprint {0 cvs print flush} def /odeprint load
0 256 string put /ode@tol 1e-6 def /rk4 false def tx@Dict begin 1 dict
begin 15.25 end end ode@dict /tStart exch def end tx@Dict begin 1 dict
begin 15.5 end end ode@dict /tEnd exch def end tx@Dict begin 1 dict
begin 26 cvi end end ode@dict /N exch def end ode@dict /dt tEnd tStart
sub N 1 sub div def end ode@dict /xlength ode@laststate length def
end ode@dict /xlength1 xlength 1 add def end /ode@rpn tx@Dict begin
(10*(x[1]-x[0])|x[0]*(28-x[2])-x[1]|x[0]*x[1]-8/3*x[2]) AlgParser end
cvx bind def /ODESET {ode@dict /x exch def /y x def end tx@Dict begin
ode@dict ode@rpn end end ode@dict xlength end array astore } bind def
/formatoutput {[0 1 2] assembleresult} def rk4 { (\npstODEsolve (RK4),)
odeprint ( "o" output step:\n) odeprint }{ (\npstODEsolve (RKF45),\n)
odeprint (-/+ failed/successful step, "o" output step, "!" step size underflow (stop):\n)
odeprint } ifelse ode@dict /tcur tStart def /outStepCnt 1 def /tout
tStart dt add def 0 0 eq {/ddt ode@ddt def}{/ddt 0 def} ifelse rk4
{/ddt dt def} if end [ [formatoutput] aload pop true setglobal ] globaldict
exch /lorenzXYZseg exch cvx put false setglobal (o) odeprint ode@dict
N end 1 sub { ode@laststate ODEINT [ exch aload pop true setglobal
] globaldict exch /ode@laststate exch put false setglobal [ lorenzXYZseg
[formatoutput] aload pop true setglobal ] globaldict exch /lorenzXYZseg
exch cvx put globaldict /ode@dt ode@dict dt end put globaldict /ode@ddt
ode@dict ddt end put globaldict /ode@tcur ode@dict tcur end put globaldict
/ode@tout ode@dict tout end put false setglobal } repeat (\n) odeprint
end
 1833 2454 a 1833 2454 a
/lorenzXYZall [lorenzXYZall lorenzXYZseg] aload astore cvx def

1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZseg counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0
TeXcolorgray 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj63} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray 1833 2454 a
 tx@odeDict begin /odeprint {0 cvs print flush} def /odeprint load
0 256 string put /ode@tol 1e-6 def /rk4 false def tx@Dict begin 1 dict
begin 15.5 end end ode@dict /tStart exch def end tx@Dict begin 1 dict
begin 15.75 end end ode@dict /tEnd exch def end tx@Dict begin 1 dict
begin 26 cvi end end ode@dict /N exch def end ode@dict /dt tEnd tStart
sub N 1 sub div def end ode@dict /xlength ode@laststate length def
end ode@dict /xlength1 xlength 1 add def end /ode@rpn tx@Dict begin
(10*(x[1]-x[0])|x[0]*(28-x[2])-x[1]|x[0]*x[1]-8/3*x[2]) AlgParser end
cvx bind def /ODESET {ode@dict /x exch def /y x def end tx@Dict begin
ode@dict ode@rpn end end ode@dict xlength end array astore } bind def
/formatoutput {[0 1 2] assembleresult} def rk4 { (\npstODEsolve (RK4),)
odeprint ( "o" output step:\n) odeprint }{ (\npstODEsolve (RKF45),\n)
odeprint (-/+ failed/successful step, "o" output step, "!" step size underflow (stop):\n)
odeprint } ifelse ode@dict /tcur tStart def /outStepCnt 1 def /tout
tStart dt add def 0 0 eq {/ddt ode@ddt def}{/ddt 0 def} ifelse rk4
{/ddt dt def} if end [ [formatoutput] aload pop true setglobal ] globaldict
exch /lorenzXYZseg exch cvx put false setglobal (o) odeprint ode@dict
N end 1 sub { ode@laststate ODEINT [ exch aload pop true setglobal
] globaldict exch /ode@laststate exch put false setglobal [ lorenzXYZseg
[formatoutput] aload pop true setglobal ] globaldict exch /lorenzXYZseg
exch cvx put globaldict /ode@dt ode@dict dt end put globaldict /ode@ddt
ode@dict ddt end put globaldict /ode@tcur ode@dict tcur end put globaldict
/ode@tout ode@dict tout end put false setglobal } repeat (\n) odeprint
end
 1833 2454 a 1833 2454 a
/lorenzXYZall [lorenzXYZall lorenzXYZseg] aload astore cvx def

1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZseg counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0
TeXcolorgray 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj64} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray 1833 2454 a
 tx@odeDict begin /odeprint {0 cvs print flush} def /odeprint load
0 256 string put /ode@tol 1e-6 def /rk4 false def tx@Dict begin 1 dict
begin 15.75 end end ode@dict /tStart exch def end tx@Dict begin 1 dict
begin 16 end end ode@dict /tEnd exch def end tx@Dict begin 1 dict begin
26 cvi end end ode@dict /N exch def end ode@dict /dt tEnd tStart sub
N 1 sub div def end ode@dict /xlength ode@laststate length def end
ode@dict /xlength1 xlength 1 add def end /ode@rpn tx@Dict begin (10*(x[1]-x[0])|x[0]*(28-x[2])-x[1]|x[0]*x[1]-8/3*x[2])
AlgParser end cvx bind def /ODESET {ode@dict /x exch def /y x def end
tx@Dict begin ode@dict ode@rpn end end ode@dict xlength end array astore
} bind def /formatoutput {[0 1 2] assembleresult} def rk4 { (\npstODEsolve (RK4),)
odeprint ( "o" output step:\n) odeprint }{ (\npstODEsolve (RKF45),\n)
odeprint (-/+ failed/successful step, "o" output step, "!" step size underflow (stop):\n)
odeprint } ifelse ode@dict /tcur tStart def /outStepCnt 1 def /tout
tStart dt add def 0 0 eq {/ddt ode@ddt def}{/ddt 0 def} ifelse rk4
{/ddt dt def} if end [ [formatoutput] aload pop true setglobal ] globaldict
exch /lorenzXYZseg exch cvx put false setglobal (o) odeprint ode@dict
N end 1 sub { ode@laststate ODEINT [ exch aload pop true setglobal
] globaldict exch /ode@laststate exch put false setglobal [ lorenzXYZseg
[formatoutput] aload pop true setglobal ] globaldict exch /lorenzXYZseg
exch cvx put globaldict /ode@dt ode@dict dt end put globaldict /ode@ddt
ode@dict ddt end put globaldict /ode@tcur ode@dict tcur end put globaldict
/ode@tout ode@dict tout end put false setglobal } repeat (\n) odeprint
end
 1833 2454 a 1833 2454 a
/lorenzXYZall [lorenzXYZall lorenzXYZseg] aload astore cvx def

1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZseg counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0
TeXcolorgray 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj65} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray 1833 2454 a
 tx@odeDict begin /odeprint {0 cvs print flush} def /odeprint load
0 256 string put /ode@tol 1e-6 def /rk4 false def tx@Dict begin 1 dict
begin 16 end end ode@dict /tStart exch def end tx@Dict begin 1 dict
begin 16.25 end end ode@dict /tEnd exch def end tx@Dict begin 1 dict
begin 26 cvi end end ode@dict /N exch def end ode@dict /dt tEnd tStart
sub N 1 sub div def end ode@dict /xlength ode@laststate length def
end ode@dict /xlength1 xlength 1 add def end /ode@rpn tx@Dict begin
(10*(x[1]-x[0])|x[0]*(28-x[2])-x[1]|x[0]*x[1]-8/3*x[2]) AlgParser end
cvx bind def /ODESET {ode@dict /x exch def /y x def end tx@Dict begin
ode@dict ode@rpn end end ode@dict xlength end array astore } bind def
/formatoutput {[0 1 2] assembleresult} def rk4 { (\npstODEsolve (RK4),)
odeprint ( "o" output step:\n) odeprint }{ (\npstODEsolve (RKF45),\n)
odeprint (-/+ failed/successful step, "o" output step, "!" step size underflow (stop):\n)
odeprint } ifelse ode@dict /tcur tStart def /outStepCnt 1 def /tout
tStart dt add def 0 0 eq {/ddt ode@ddt def}{/ddt 0 def} ifelse rk4
{/ddt dt def} if end [ [formatoutput] aload pop true setglobal ] globaldict
exch /lorenzXYZseg exch cvx put false setglobal (o) odeprint ode@dict
N end 1 sub { ode@laststate ODEINT [ exch aload pop true setglobal
] globaldict exch /ode@laststate exch put false setglobal [ lorenzXYZseg
[formatoutput] aload pop true setglobal ] globaldict exch /lorenzXYZseg
exch cvx put globaldict /ode@dt ode@dict dt end put globaldict /ode@ddt
ode@dict ddt end put globaldict /ode@tcur ode@dict tcur end put globaldict
/ode@tout ode@dict tout end put false setglobal } repeat (\n) odeprint
end
 1833 2454 a 1833 2454 a
/lorenzXYZall [lorenzXYZall lorenzXYZseg] aload astore cvx def

1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZseg counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0
TeXcolorgray 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj66} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray 1833 2454 a
 tx@odeDict begin /odeprint {0 cvs print flush} def /odeprint load
0 256 string put /ode@tol 1e-6 def /rk4 false def tx@Dict begin 1 dict
begin 16.25 end end ode@dict /tStart exch def end tx@Dict begin 1 dict
begin 16.5 end end ode@dict /tEnd exch def end tx@Dict begin 1 dict
begin 26 cvi end end ode@dict /N exch def end ode@dict /dt tEnd tStart
sub N 1 sub div def end ode@dict /xlength ode@laststate length def
end ode@dict /xlength1 xlength 1 add def end /ode@rpn tx@Dict begin
(10*(x[1]-x[0])|x[0]*(28-x[2])-x[1]|x[0]*x[1]-8/3*x[2]) AlgParser end
cvx bind def /ODESET {ode@dict /x exch def /y x def end tx@Dict begin
ode@dict ode@rpn end end ode@dict xlength end array astore } bind def
/formatoutput {[0 1 2] assembleresult} def rk4 { (\npstODEsolve (RK4),)
odeprint ( "o" output step:\n) odeprint }{ (\npstODEsolve (RKF45),\n)
odeprint (-/+ failed/successful step, "o" output step, "!" step size underflow (stop):\n)
odeprint } ifelse ode@dict /tcur tStart def /outStepCnt 1 def /tout
tStart dt add def 0 0 eq {/ddt ode@ddt def}{/ddt 0 def} ifelse rk4
{/ddt dt def} if end [ [formatoutput] aload pop true setglobal ] globaldict
exch /lorenzXYZseg exch cvx put false setglobal (o) odeprint ode@dict
N end 1 sub { ode@laststate ODEINT [ exch aload pop true setglobal
] globaldict exch /ode@laststate exch put false setglobal [ lorenzXYZseg
[formatoutput] aload pop true setglobal ] globaldict exch /lorenzXYZseg
exch cvx put globaldict /ode@dt ode@dict dt end put globaldict /ode@ddt
ode@dict ddt end put globaldict /ode@tcur ode@dict tcur end put globaldict
/ode@tout ode@dict tout end put false setglobal } repeat (\n) odeprint
end
 1833 2454 a 1833 2454 a
/lorenzXYZall [lorenzXYZall lorenzXYZseg] aload astore cvx def

1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZseg counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0
TeXcolorgray 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj67} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray 1833 2454 a
 tx@odeDict begin /odeprint {0 cvs print flush} def /odeprint load
0 256 string put /ode@tol 1e-6 def /rk4 false def tx@Dict begin 1 dict
begin 16.5 end end ode@dict /tStart exch def end tx@Dict begin 1 dict
begin 16.75 end end ode@dict /tEnd exch def end tx@Dict begin 1 dict
begin 26 cvi end end ode@dict /N exch def end ode@dict /dt tEnd tStart
sub N 1 sub div def end ode@dict /xlength ode@laststate length def
end ode@dict /xlength1 xlength 1 add def end /ode@rpn tx@Dict begin
(10*(x[1]-x[0])|x[0]*(28-x[2])-x[1]|x[0]*x[1]-8/3*x[2]) AlgParser end
cvx bind def /ODESET {ode@dict /x exch def /y x def end tx@Dict begin
ode@dict ode@rpn end end ode@dict xlength end array astore } bind def
/formatoutput {[0 1 2] assembleresult} def rk4 { (\npstODEsolve (RK4),)
odeprint ( "o" output step:\n) odeprint }{ (\npstODEsolve (RKF45),\n)
odeprint (-/+ failed/successful step, "o" output step, "!" step size underflow (stop):\n)
odeprint } ifelse ode@dict /tcur tStart def /outStepCnt 1 def /tout
tStart dt add def 0 0 eq {/ddt ode@ddt def}{/ddt 0 def} ifelse rk4
{/ddt dt def} if end [ [formatoutput] aload pop true setglobal ] globaldict
exch /lorenzXYZseg exch cvx put false setglobal (o) odeprint ode@dict
N end 1 sub { ode@laststate ODEINT [ exch aload pop true setglobal
] globaldict exch /ode@laststate exch put false setglobal [ lorenzXYZseg
[formatoutput] aload pop true setglobal ] globaldict exch /lorenzXYZseg
exch cvx put globaldict /ode@dt ode@dict dt end put globaldict /ode@ddt
ode@dict ddt end put globaldict /ode@tcur ode@dict tcur end put globaldict
/ode@tout ode@dict tout end put false setglobal } repeat (\n) odeprint
end
 1833 2454 a 1833 2454 a
/lorenzXYZall [lorenzXYZall lorenzXYZseg] aload astore cvx def

1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZseg counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0
TeXcolorgray 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj68} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray 1833 2454 a
 tx@odeDict begin /odeprint {0 cvs print flush} def /odeprint load
0 256 string put /ode@tol 1e-6 def /rk4 false def tx@Dict begin 1 dict
begin 16.75 end end ode@dict /tStart exch def end tx@Dict begin 1 dict
begin 17 end end ode@dict /tEnd exch def end tx@Dict begin 1 dict begin
26 cvi end end ode@dict /N exch def end ode@dict /dt tEnd tStart sub
N 1 sub div def end ode@dict /xlength ode@laststate length def end
ode@dict /xlength1 xlength 1 add def end /ode@rpn tx@Dict begin (10*(x[1]-x[0])|x[0]*(28-x[2])-x[1]|x[0]*x[1]-8/3*x[2])
AlgParser end cvx bind def /ODESET {ode@dict /x exch def /y x def end
tx@Dict begin ode@dict ode@rpn end end ode@dict xlength end array astore
} bind def /formatoutput {[0 1 2] assembleresult} def rk4 { (\npstODEsolve (RK4),)
odeprint ( "o" output step:\n) odeprint }{ (\npstODEsolve (RKF45),\n)
odeprint (-/+ failed/successful step, "o" output step, "!" step size underflow (stop):\n)
odeprint } ifelse ode@dict /tcur tStart def /outStepCnt 1 def /tout
tStart dt add def 0 0 eq {/ddt ode@ddt def}{/ddt 0 def} ifelse rk4
{/ddt dt def} if end [ [formatoutput] aload pop true setglobal ] globaldict
exch /lorenzXYZseg exch cvx put false setglobal (o) odeprint ode@dict
N end 1 sub { ode@laststate ODEINT [ exch aload pop true setglobal
] globaldict exch /ode@laststate exch put false setglobal [ lorenzXYZseg
[formatoutput] aload pop true setglobal ] globaldict exch /lorenzXYZseg
exch cvx put globaldict /ode@dt ode@dict dt end put globaldict /ode@ddt
ode@dict ddt end put globaldict /ode@tcur ode@dict tcur end put globaldict
/ode@tout ode@dict tout end put false setglobal } repeat (\n) odeprint
end
 1833 2454 a 1833 2454 a
/lorenzXYZall [lorenzXYZall lorenzXYZseg] aload astore cvx def

1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZseg counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0
TeXcolorgray 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj69} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray 1833 2454 a
 tx@odeDict begin /odeprint {0 cvs print flush} def /odeprint load
0 256 string put /ode@tol 1e-6 def /rk4 false def tx@Dict begin 1 dict
begin 17 end end ode@dict /tStart exch def end tx@Dict begin 1 dict
begin 17.25 end end ode@dict /tEnd exch def end tx@Dict begin 1 dict
begin 26 cvi end end ode@dict /N exch def end ode@dict /dt tEnd tStart
sub N 1 sub div def end ode@dict /xlength ode@laststate length def
end ode@dict /xlength1 xlength 1 add def end /ode@rpn tx@Dict begin
(10*(x[1]-x[0])|x[0]*(28-x[2])-x[1]|x[0]*x[1]-8/3*x[2]) AlgParser end
cvx bind def /ODESET {ode@dict /x exch def /y x def end tx@Dict begin
ode@dict ode@rpn end end ode@dict xlength end array astore } bind def
/formatoutput {[0 1 2] assembleresult} def rk4 { (\npstODEsolve (RK4),)
odeprint ( "o" output step:\n) odeprint }{ (\npstODEsolve (RKF45),\n)
odeprint (-/+ failed/successful step, "o" output step, "!" step size underflow (stop):\n)
odeprint } ifelse ode@dict /tcur tStart def /outStepCnt 1 def /tout
tStart dt add def 0 0 eq {/ddt ode@ddt def}{/ddt 0 def} ifelse rk4
{/ddt dt def} if end [ [formatoutput] aload pop true setglobal ] globaldict
exch /lorenzXYZseg exch cvx put false setglobal (o) odeprint ode@dict
N end 1 sub { ode@laststate ODEINT [ exch aload pop true setglobal
] globaldict exch /ode@laststate exch put false setglobal [ lorenzXYZseg
[formatoutput] aload pop true setglobal ] globaldict exch /lorenzXYZseg
exch cvx put globaldict /ode@dt ode@dict dt end put globaldict /ode@ddt
ode@dict ddt end put globaldict /ode@tcur ode@dict tcur end put globaldict
/ode@tout ode@dict tout end put false setglobal } repeat (\n) odeprint
end
 1833 2454 a 1833 2454 a
/lorenzXYZall [lorenzXYZall lorenzXYZseg] aload astore cvx def

1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZseg counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0
TeXcolorgray 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj70} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray 1833 2454 a
 tx@odeDict begin /odeprint {0 cvs print flush} def /odeprint load
0 256 string put /ode@tol 1e-6 def /rk4 false def tx@Dict begin 1 dict
begin 17.25 end end ode@dict /tStart exch def end tx@Dict begin 1 dict
begin 17.5 end end ode@dict /tEnd exch def end tx@Dict begin 1 dict
begin 26 cvi end end ode@dict /N exch def end ode@dict /dt tEnd tStart
sub N 1 sub div def end ode@dict /xlength ode@laststate length def
end ode@dict /xlength1 xlength 1 add def end /ode@rpn tx@Dict begin
(10*(x[1]-x[0])|x[0]*(28-x[2])-x[1]|x[0]*x[1]-8/3*x[2]) AlgParser end
cvx bind def /ODESET {ode@dict /x exch def /y x def end tx@Dict begin
ode@dict ode@rpn end end ode@dict xlength end array astore } bind def
/formatoutput {[0 1 2] assembleresult} def rk4 { (\npstODEsolve (RK4),)
odeprint ( "o" output step:\n) odeprint }{ (\npstODEsolve (RKF45),\n)
odeprint (-/+ failed/successful step, "o" output step, "!" step size underflow (stop):\n)
odeprint } ifelse ode@dict /tcur tStart def /outStepCnt 1 def /tout
tStart dt add def 0 0 eq {/ddt ode@ddt def}{/ddt 0 def} ifelse rk4
{/ddt dt def} if end [ [formatoutput] aload pop true setglobal ] globaldict
exch /lorenzXYZseg exch cvx put false setglobal (o) odeprint ode@dict
N end 1 sub { ode@laststate ODEINT [ exch aload pop true setglobal
] globaldict exch /ode@laststate exch put false setglobal [ lorenzXYZseg
[formatoutput] aload pop true setglobal ] globaldict exch /lorenzXYZseg
exch cvx put globaldict /ode@dt ode@dict dt end put globaldict /ode@ddt
ode@dict ddt end put globaldict /ode@tcur ode@dict tcur end put globaldict
/ode@tout ode@dict tout end put false setglobal } repeat (\n) odeprint
end
 1833 2454 a 1833 2454 a
/lorenzXYZall [lorenzXYZall lorenzXYZseg] aload astore cvx def

1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZseg counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0
TeXcolorgray 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj71} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray 1833 2454 a
 tx@odeDict begin /odeprint {0 cvs print flush} def /odeprint load
0 256 string put /ode@tol 1e-6 def /rk4 false def tx@Dict begin 1 dict
begin 17.5 end end ode@dict /tStart exch def end tx@Dict begin 1 dict
begin 17.75 end end ode@dict /tEnd exch def end tx@Dict begin 1 dict
begin 26 cvi end end ode@dict /N exch def end ode@dict /dt tEnd tStart
sub N 1 sub div def end ode@dict /xlength ode@laststate length def
end ode@dict /xlength1 xlength 1 add def end /ode@rpn tx@Dict begin
(10*(x[1]-x[0])|x[0]*(28-x[2])-x[1]|x[0]*x[1]-8/3*x[2]) AlgParser end
cvx bind def /ODESET {ode@dict /x exch def /y x def end tx@Dict begin
ode@dict ode@rpn end end ode@dict xlength end array astore } bind def
/formatoutput {[0 1 2] assembleresult} def rk4 { (\npstODEsolve (RK4),)
odeprint ( "o" output step:\n) odeprint }{ (\npstODEsolve (RKF45),\n)
odeprint (-/+ failed/successful step, "o" output step, "!" step size underflow (stop):\n)
odeprint } ifelse ode@dict /tcur tStart def /outStepCnt 1 def /tout
tStart dt add def 0 0 eq {/ddt ode@ddt def}{/ddt 0 def} ifelse rk4
{/ddt dt def} if end [ [formatoutput] aload pop true setglobal ] globaldict
exch /lorenzXYZseg exch cvx put false setglobal (o) odeprint ode@dict
N end 1 sub { ode@laststate ODEINT [ exch aload pop true setglobal
] globaldict exch /ode@laststate exch put false setglobal [ lorenzXYZseg
[formatoutput] aload pop true setglobal ] globaldict exch /lorenzXYZseg
exch cvx put globaldict /ode@dt ode@dict dt end put globaldict /ode@ddt
ode@dict ddt end put globaldict /ode@tcur ode@dict tcur end put globaldict
/ode@tout ode@dict tout end put false setglobal } repeat (\n) odeprint
end
 1833 2454 a 1833 2454 a
/lorenzXYZall [lorenzXYZall lorenzXYZseg] aload astore cvx def

1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZseg counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0
TeXcolorgray 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj72} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray 1833 2454 a
 tx@odeDict begin /odeprint {0 cvs print flush} def /odeprint load
0 256 string put /ode@tol 1e-6 def /rk4 false def tx@Dict begin 1 dict
begin 17.75 end end ode@dict /tStart exch def end tx@Dict begin 1 dict
begin 18 end end ode@dict /tEnd exch def end tx@Dict begin 1 dict begin
26 cvi end end ode@dict /N exch def end ode@dict /dt tEnd tStart sub
N 1 sub div def end ode@dict /xlength ode@laststate length def end
ode@dict /xlength1 xlength 1 add def end /ode@rpn tx@Dict begin (10*(x[1]-x[0])|x[0]*(28-x[2])-x[1]|x[0]*x[1]-8/3*x[2])
AlgParser end cvx bind def /ODESET {ode@dict /x exch def /y x def end
tx@Dict begin ode@dict ode@rpn end end ode@dict xlength end array astore
} bind def /formatoutput {[0 1 2] assembleresult} def rk4 { (\npstODEsolve (RK4),)
odeprint ( "o" output step:\n) odeprint }{ (\npstODEsolve (RKF45),\n)
odeprint (-/+ failed/successful step, "o" output step, "!" step size underflow (stop):\n)
odeprint } ifelse ode@dict /tcur tStart def /outStepCnt 1 def /tout
tStart dt add def 0 0 eq {/ddt ode@ddt def}{/ddt 0 def} ifelse rk4
{/ddt dt def} if end [ [formatoutput] aload pop true setglobal ] globaldict
exch /lorenzXYZseg exch cvx put false setglobal (o) odeprint ode@dict
N end 1 sub { ode@laststate ODEINT [ exch aload pop true setglobal
] globaldict exch /ode@laststate exch put false setglobal [ lorenzXYZseg
[formatoutput] aload pop true setglobal ] globaldict exch /lorenzXYZseg
exch cvx put globaldict /ode@dt ode@dict dt end put globaldict /ode@ddt
ode@dict ddt end put globaldict /ode@tcur ode@dict tcur end put globaldict
/ode@tout ode@dict tout end put false setglobal } repeat (\n) odeprint
end
 1833 2454 a 1833 2454 a
/lorenzXYZall [lorenzXYZall lorenzXYZseg] aload astore cvx def

1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZseg counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0
TeXcolorgray 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj73} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray 1833 2454 a
 tx@odeDict begin /odeprint {0 cvs print flush} def /odeprint load
0 256 string put /ode@tol 1e-6 def /rk4 false def tx@Dict begin 1 dict
begin 18 end end ode@dict /tStart exch def end tx@Dict begin 1 dict
begin 18.25 end end ode@dict /tEnd exch def end tx@Dict begin 1 dict
begin 26 cvi end end ode@dict /N exch def end ode@dict /dt tEnd tStart
sub N 1 sub div def end ode@dict /xlength ode@laststate length def
end ode@dict /xlength1 xlength 1 add def end /ode@rpn tx@Dict begin
(10*(x[1]-x[0])|x[0]*(28-x[2])-x[1]|x[0]*x[1]-8/3*x[2]) AlgParser end
cvx bind def /ODESET {ode@dict /x exch def /y x def end tx@Dict begin
ode@dict ode@rpn end end ode@dict xlength end array astore } bind def
/formatoutput {[0 1 2] assembleresult} def rk4 { (\npstODEsolve (RK4),)
odeprint ( "o" output step:\n) odeprint }{ (\npstODEsolve (RKF45),\n)
odeprint (-/+ failed/successful step, "o" output step, "!" step size underflow (stop):\n)
odeprint } ifelse ode@dict /tcur tStart def /outStepCnt 1 def /tout
tStart dt add def 0 0 eq {/ddt ode@ddt def}{/ddt 0 def} ifelse rk4
{/ddt dt def} if end [ [formatoutput] aload pop true setglobal ] globaldict
exch /lorenzXYZseg exch cvx put false setglobal (o) odeprint ode@dict
N end 1 sub { ode@laststate ODEINT [ exch aload pop true setglobal
] globaldict exch /ode@laststate exch put false setglobal [ lorenzXYZseg
[formatoutput] aload pop true setglobal ] globaldict exch /lorenzXYZseg
exch cvx put globaldict /ode@dt ode@dict dt end put globaldict /ode@ddt
ode@dict ddt end put globaldict /ode@tcur ode@dict tcur end put globaldict
/ode@tout ode@dict tout end put false setglobal } repeat (\n) odeprint
end
 1833 2454 a 1833 2454 a
/lorenzXYZall [lorenzXYZall lorenzXYZseg] aload astore cvx def

1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZseg counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0
TeXcolorgray 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj74} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray 1833 2454 a
 tx@odeDict begin /odeprint {0 cvs print flush} def /odeprint load
0 256 string put /ode@tol 1e-6 def /rk4 false def tx@Dict begin 1 dict
begin 18.25 end end ode@dict /tStart exch def end tx@Dict begin 1 dict
begin 18.5 end end ode@dict /tEnd exch def end tx@Dict begin 1 dict
begin 26 cvi end end ode@dict /N exch def end ode@dict /dt tEnd tStart
sub N 1 sub div def end ode@dict /xlength ode@laststate length def
end ode@dict /xlength1 xlength 1 add def end /ode@rpn tx@Dict begin
(10*(x[1]-x[0])|x[0]*(28-x[2])-x[1]|x[0]*x[1]-8/3*x[2]) AlgParser end
cvx bind def /ODESET {ode@dict /x exch def /y x def end tx@Dict begin
ode@dict ode@rpn end end ode@dict xlength end array astore } bind def
/formatoutput {[0 1 2] assembleresult} def rk4 { (\npstODEsolve (RK4),)
odeprint ( "o" output step:\n) odeprint }{ (\npstODEsolve (RKF45),\n)
odeprint (-/+ failed/successful step, "o" output step, "!" step size underflow (stop):\n)
odeprint } ifelse ode@dict /tcur tStart def /outStepCnt 1 def /tout
tStart dt add def 0 0 eq {/ddt ode@ddt def}{/ddt 0 def} ifelse rk4
{/ddt dt def} if end [ [formatoutput] aload pop true setglobal ] globaldict
exch /lorenzXYZseg exch cvx put false setglobal (o) odeprint ode@dict
N end 1 sub { ode@laststate ODEINT [ exch aload pop true setglobal
] globaldict exch /ode@laststate exch put false setglobal [ lorenzXYZseg
[formatoutput] aload pop true setglobal ] globaldict exch /lorenzXYZseg
exch cvx put globaldict /ode@dt ode@dict dt end put globaldict /ode@ddt
ode@dict ddt end put globaldict /ode@tcur ode@dict tcur end put globaldict
/ode@tout ode@dict tout end put false setglobal } repeat (\n) odeprint
end
 1833 2454 a 1833 2454 a
/lorenzXYZall [lorenzXYZall lorenzXYZseg] aload astore cvx def

1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZseg counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0
TeXcolorgray 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj75} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray 1833 2454 a
 tx@odeDict begin /odeprint {0 cvs print flush} def /odeprint load
0 256 string put /ode@tol 1e-6 def /rk4 false def tx@Dict begin 1 dict
begin 18.5 end end ode@dict /tStart exch def end tx@Dict begin 1 dict
begin 18.75 end end ode@dict /tEnd exch def end tx@Dict begin 1 dict
begin 26 cvi end end ode@dict /N exch def end ode@dict /dt tEnd tStart
sub N 1 sub div def end ode@dict /xlength ode@laststate length def
end ode@dict /xlength1 xlength 1 add def end /ode@rpn tx@Dict begin
(10*(x[1]-x[0])|x[0]*(28-x[2])-x[1]|x[0]*x[1]-8/3*x[2]) AlgParser end
cvx bind def /ODESET {ode@dict /x exch def /y x def end tx@Dict begin
ode@dict ode@rpn end end ode@dict xlength end array astore } bind def
/formatoutput {[0 1 2] assembleresult} def rk4 { (\npstODEsolve (RK4),)
odeprint ( "o" output step:\n) odeprint }{ (\npstODEsolve (RKF45),\n)
odeprint (-/+ failed/successful step, "o" output step, "!" step size underflow (stop):\n)
odeprint } ifelse ode@dict /tcur tStart def /outStepCnt 1 def /tout
tStart dt add def 0 0 eq {/ddt ode@ddt def}{/ddt 0 def} ifelse rk4
{/ddt dt def} if end [ [formatoutput] aload pop true setglobal ] globaldict
exch /lorenzXYZseg exch cvx put false setglobal (o) odeprint ode@dict
N end 1 sub { ode@laststate ODEINT [ exch aload pop true setglobal
] globaldict exch /ode@laststate exch put false setglobal [ lorenzXYZseg
[formatoutput] aload pop true setglobal ] globaldict exch /lorenzXYZseg
exch cvx put globaldict /ode@dt ode@dict dt end put globaldict /ode@ddt
ode@dict ddt end put globaldict /ode@tcur ode@dict tcur end put globaldict
/ode@tout ode@dict tout end put false setglobal } repeat (\n) odeprint
end
 1833 2454 a 1833 2454 a
/lorenzXYZall [lorenzXYZall lorenzXYZseg] aload astore cvx def

1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZseg counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0
TeXcolorgray 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj76} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray 1833 2454 a
 tx@odeDict begin /odeprint {0 cvs print flush} def /odeprint load
0 256 string put /ode@tol 1e-6 def /rk4 false def tx@Dict begin 1 dict
begin 18.75 end end ode@dict /tStart exch def end tx@Dict begin 1 dict
begin 19 end end ode@dict /tEnd exch def end tx@Dict begin 1 dict begin
26 cvi end end ode@dict /N exch def end ode@dict /dt tEnd tStart sub
N 1 sub div def end ode@dict /xlength ode@laststate length def end
ode@dict /xlength1 xlength 1 add def end /ode@rpn tx@Dict begin (10*(x[1]-x[0])|x[0]*(28-x[2])-x[1]|x[0]*x[1]-8/3*x[2])
AlgParser end cvx bind def /ODESET {ode@dict /x exch def /y x def end
tx@Dict begin ode@dict ode@rpn end end ode@dict xlength end array astore
} bind def /formatoutput {[0 1 2] assembleresult} def rk4 { (\npstODEsolve (RK4),)
odeprint ( "o" output step:\n) odeprint }{ (\npstODEsolve (RKF45),\n)
odeprint (-/+ failed/successful step, "o" output step, "!" step size underflow (stop):\n)
odeprint } ifelse ode@dict /tcur tStart def /outStepCnt 1 def /tout
tStart dt add def 0 0 eq {/ddt ode@ddt def}{/ddt 0 def} ifelse rk4
{/ddt dt def} if end [ [formatoutput] aload pop true setglobal ] globaldict
exch /lorenzXYZseg exch cvx put false setglobal (o) odeprint ode@dict
N end 1 sub { ode@laststate ODEINT [ exch aload pop true setglobal
] globaldict exch /ode@laststate exch put false setglobal [ lorenzXYZseg
[formatoutput] aload pop true setglobal ] globaldict exch /lorenzXYZseg
exch cvx put globaldict /ode@dt ode@dict dt end put globaldict /ode@ddt
ode@dict ddt end put globaldict /ode@tcur ode@dict tcur end put globaldict
/ode@tout ode@dict tout end put false setglobal } repeat (\n) odeprint
end
 1833 2454 a 1833 2454 a
/lorenzXYZall [lorenzXYZall lorenzXYZseg] aload astore cvx def

1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZseg counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0
TeXcolorgray 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj77} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray 1833 2454 a
 tx@odeDict begin /odeprint {0 cvs print flush} def /odeprint load
0 256 string put /ode@tol 1e-6 def /rk4 false def tx@Dict begin 1 dict
begin 19 end end ode@dict /tStart exch def end tx@Dict begin 1 dict
begin 19.25 end end ode@dict /tEnd exch def end tx@Dict begin 1 dict
begin 26 cvi end end ode@dict /N exch def end ode@dict /dt tEnd tStart
sub N 1 sub div def end ode@dict /xlength ode@laststate length def
end ode@dict /xlength1 xlength 1 add def end /ode@rpn tx@Dict begin
(10*(x[1]-x[0])|x[0]*(28-x[2])-x[1]|x[0]*x[1]-8/3*x[2]) AlgParser end
cvx bind def /ODESET {ode@dict /x exch def /y x def end tx@Dict begin
ode@dict ode@rpn end end ode@dict xlength end array astore } bind def
/formatoutput {[0 1 2] assembleresult} def rk4 { (\npstODEsolve (RK4),)
odeprint ( "o" output step:\n) odeprint }{ (\npstODEsolve (RKF45),\n)
odeprint (-/+ failed/successful step, "o" output step, "!" step size underflow (stop):\n)
odeprint } ifelse ode@dict /tcur tStart def /outStepCnt 1 def /tout
tStart dt add def 0 0 eq {/ddt ode@ddt def}{/ddt 0 def} ifelse rk4
{/ddt dt def} if end [ [formatoutput] aload pop true setglobal ] globaldict
exch /lorenzXYZseg exch cvx put false setglobal (o) odeprint ode@dict
N end 1 sub { ode@laststate ODEINT [ exch aload pop true setglobal
] globaldict exch /ode@laststate exch put false setglobal [ lorenzXYZseg
[formatoutput] aload pop true setglobal ] globaldict exch /lorenzXYZseg
exch cvx put globaldict /ode@dt ode@dict dt end put globaldict /ode@ddt
ode@dict ddt end put globaldict /ode@tcur ode@dict tcur end put globaldict
/ode@tout ode@dict tout end put false setglobal } repeat (\n) odeprint
end
 1833 2454 a 1833 2454 a
/lorenzXYZall [lorenzXYZall lorenzXYZseg] aload astore cvx def

1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZseg counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0
TeXcolorgray 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj78} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray 1833 2454 a
 tx@odeDict begin /odeprint {0 cvs print flush} def /odeprint load
0 256 string put /ode@tol 1e-6 def /rk4 false def tx@Dict begin 1 dict
begin 19.25 end end ode@dict /tStart exch def end tx@Dict begin 1 dict
begin 19.5 end end ode@dict /tEnd exch def end tx@Dict begin 1 dict
begin 26 cvi end end ode@dict /N exch def end ode@dict /dt tEnd tStart
sub N 1 sub div def end ode@dict /xlength ode@laststate length def
end ode@dict /xlength1 xlength 1 add def end /ode@rpn tx@Dict begin
(10*(x[1]-x[0])|x[0]*(28-x[2])-x[1]|x[0]*x[1]-8/3*x[2]) AlgParser end
cvx bind def /ODESET {ode@dict /x exch def /y x def end tx@Dict begin
ode@dict ode@rpn end end ode@dict xlength end array astore } bind def
/formatoutput {[0 1 2] assembleresult} def rk4 { (\npstODEsolve (RK4),)
odeprint ( "o" output step:\n) odeprint }{ (\npstODEsolve (RKF45),\n)
odeprint (-/+ failed/successful step, "o" output step, "!" step size underflow (stop):\n)
odeprint } ifelse ode@dict /tcur tStart def /outStepCnt 1 def /tout
tStart dt add def 0 0 eq {/ddt ode@ddt def}{/ddt 0 def} ifelse rk4
{/ddt dt def} if end [ [formatoutput] aload pop true setglobal ] globaldict
exch /lorenzXYZseg exch cvx put false setglobal (o) odeprint ode@dict
N end 1 sub { ode@laststate ODEINT [ exch aload pop true setglobal
] globaldict exch /ode@laststate exch put false setglobal [ lorenzXYZseg
[formatoutput] aload pop true setglobal ] globaldict exch /lorenzXYZseg
exch cvx put globaldict /ode@dt ode@dict dt end put globaldict /ode@ddt
ode@dict ddt end put globaldict /ode@tcur ode@dict tcur end put globaldict
/ode@tout ode@dict tout end put false setglobal } repeat (\n) odeprint
end
 1833 2454 a 1833 2454 a
/lorenzXYZall [lorenzXYZall lorenzXYZseg] aload astore cvx def

1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZseg counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0
TeXcolorgray 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj79} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray 1833 2454 a
 tx@odeDict begin /odeprint {0 cvs print flush} def /odeprint load
0 256 string put /ode@tol 1e-6 def /rk4 false def tx@Dict begin 1 dict
begin 19.5 end end ode@dict /tStart exch def end tx@Dict begin 1 dict
begin 19.75 end end ode@dict /tEnd exch def end tx@Dict begin 1 dict
begin 26 cvi end end ode@dict /N exch def end ode@dict /dt tEnd tStart
sub N 1 sub div def end ode@dict /xlength ode@laststate length def
end ode@dict /xlength1 xlength 1 add def end /ode@rpn tx@Dict begin
(10*(x[1]-x[0])|x[0]*(28-x[2])-x[1]|x[0]*x[1]-8/3*x[2]) AlgParser end
cvx bind def /ODESET {ode@dict /x exch def /y x def end tx@Dict begin
ode@dict ode@rpn end end ode@dict xlength end array astore } bind def
/formatoutput {[0 1 2] assembleresult} def rk4 { (\npstODEsolve (RK4),)
odeprint ( "o" output step:\n) odeprint }{ (\npstODEsolve (RKF45),\n)
odeprint (-/+ failed/successful step, "o" output step, "!" step size underflow (stop):\n)
odeprint } ifelse ode@dict /tcur tStart def /outStepCnt 1 def /tout
tStart dt add def 0 0 eq {/ddt ode@ddt def}{/ddt 0 def} ifelse rk4
{/ddt dt def} if end [ [formatoutput] aload pop true setglobal ] globaldict
exch /lorenzXYZseg exch cvx put false setglobal (o) odeprint ode@dict
N end 1 sub { ode@laststate ODEINT [ exch aload pop true setglobal
] globaldict exch /ode@laststate exch put false setglobal [ lorenzXYZseg
[formatoutput] aload pop true setglobal ] globaldict exch /lorenzXYZseg
exch cvx put globaldict /ode@dt ode@dict dt end put globaldict /ode@ddt
ode@dict ddt end put globaldict /ode@tcur ode@dict tcur end put globaldict
/ode@tout ode@dict tout end put false setglobal } repeat (\n) odeprint
end
 1833 2454 a 1833 2454 a
/lorenzXYZall [lorenzXYZall lorenzXYZseg] aload astore cvx def

1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZseg counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0
TeXcolorgray 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj80} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray 1833 2454 a
 tx@odeDict begin /odeprint {0 cvs print flush} def /odeprint load
0 256 string put /ode@tol 1e-6 def /rk4 false def tx@Dict begin 1 dict
begin 19.75 end end ode@dict /tStart exch def end tx@Dict begin 1 dict
begin 20 end end ode@dict /tEnd exch def end tx@Dict begin 1 dict begin
26 cvi end end ode@dict /N exch def end ode@dict /dt tEnd tStart sub
N 1 sub div def end ode@dict /xlength ode@laststate length def end
ode@dict /xlength1 xlength 1 add def end /ode@rpn tx@Dict begin (10*(x[1]-x[0])|x[0]*(28-x[2])-x[1]|x[0]*x[1]-8/3*x[2])
AlgParser end cvx bind def /ODESET {ode@dict /x exch def /y x def end
tx@Dict begin ode@dict ode@rpn end end ode@dict xlength end array astore
} bind def /formatoutput {[0 1 2] assembleresult} def rk4 { (\npstODEsolve (RK4),)
odeprint ( "o" output step:\n) odeprint }{ (\npstODEsolve (RKF45),\n)
odeprint (-/+ failed/successful step, "o" output step, "!" step size underflow (stop):\n)
odeprint } ifelse ode@dict /tcur tStart def /outStepCnt 1 def /tout
tStart dt add def 0 0 eq {/ddt ode@ddt def}{/ddt 0 def} ifelse rk4
{/ddt dt def} if end [ [formatoutput] aload pop true setglobal ] globaldict
exch /lorenzXYZseg exch cvx put false setglobal (o) odeprint ode@dict
N end 1 sub { ode@laststate ODEINT [ exch aload pop true setglobal
] globaldict exch /ode@laststate exch put false setglobal [ lorenzXYZseg
[formatoutput] aload pop true setglobal ] globaldict exch /lorenzXYZseg
exch cvx put globaldict /ode@dt ode@dict dt end put globaldict /ode@ddt
ode@dict ddt end put globaldict /ode@tcur ode@dict tcur end put globaldict
/ode@tout ode@dict tout end put false setglobal } repeat (\n) odeprint
end
 1833 2454 a 1833 2454 a
/lorenzXYZall [lorenzXYZall lorenzXYZseg] aload astore cvx def

1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZseg counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0
TeXcolorgray 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj81} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray 1833 2454 a
 tx@odeDict begin /odeprint {0 cvs print flush} def /odeprint load
0 256 string put /ode@tol 1e-6 def /rk4 false def tx@Dict begin 1 dict
begin 20 end end ode@dict /tStart exch def end tx@Dict begin 1 dict
begin 20.25 end end ode@dict /tEnd exch def end tx@Dict begin 1 dict
begin 26 cvi end end ode@dict /N exch def end ode@dict /dt tEnd tStart
sub N 1 sub div def end ode@dict /xlength ode@laststate length def
end ode@dict /xlength1 xlength 1 add def end /ode@rpn tx@Dict begin
(10*(x[1]-x[0])|x[0]*(28-x[2])-x[1]|x[0]*x[1]-8/3*x[2]) AlgParser end
cvx bind def /ODESET {ode@dict /x exch def /y x def end tx@Dict begin
ode@dict ode@rpn end end ode@dict xlength end array astore } bind def
/formatoutput {[0 1 2] assembleresult} def rk4 { (\npstODEsolve (RK4),)
odeprint ( "o" output step:\n) odeprint }{ (\npstODEsolve (RKF45),\n)
odeprint (-/+ failed/successful step, "o" output step, "!" step size underflow (stop):\n)
odeprint } ifelse ode@dict /tcur tStart def /outStepCnt 1 def /tout
tStart dt add def 0 0 eq {/ddt ode@ddt def}{/ddt 0 def} ifelse rk4
{/ddt dt def} if end [ [formatoutput] aload pop true setglobal ] globaldict
exch /lorenzXYZseg exch cvx put false setglobal (o) odeprint ode@dict
N end 1 sub { ode@laststate ODEINT [ exch aload pop true setglobal
] globaldict exch /ode@laststate exch put false setglobal [ lorenzXYZseg
[formatoutput] aload pop true setglobal ] globaldict exch /lorenzXYZseg
exch cvx put globaldict /ode@dt ode@dict dt end put globaldict /ode@ddt
ode@dict ddt end put globaldict /ode@tcur ode@dict tcur end put globaldict
/ode@tout ode@dict tout end put false setglobal } repeat (\n) odeprint
end
 1833 2454 a 1833 2454 a
/lorenzXYZall [lorenzXYZall lorenzXYZseg] aload astore cvx def

1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZseg counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0
TeXcolorgray 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj82} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray 1833 2454 a
 tx@odeDict begin /odeprint {0 cvs print flush} def /odeprint load
0 256 string put /ode@tol 1e-6 def /rk4 false def tx@Dict begin 1 dict
begin 20.25 end end ode@dict /tStart exch def end tx@Dict begin 1 dict
begin 20.5 end end ode@dict /tEnd exch def end tx@Dict begin 1 dict
begin 26 cvi end end ode@dict /N exch def end ode@dict /dt tEnd tStart
sub N 1 sub div def end ode@dict /xlength ode@laststate length def
end ode@dict /xlength1 xlength 1 add def end /ode@rpn tx@Dict begin
(10*(x[1]-x[0])|x[0]*(28-x[2])-x[1]|x[0]*x[1]-8/3*x[2]) AlgParser end
cvx bind def /ODESET {ode@dict /x exch def /y x def end tx@Dict begin
ode@dict ode@rpn end end ode@dict xlength end array astore } bind def
/formatoutput {[0 1 2] assembleresult} def rk4 { (\npstODEsolve (RK4),)
odeprint ( "o" output step:\n) odeprint }{ (\npstODEsolve (RKF45),\n)
odeprint (-/+ failed/successful step, "o" output step, "!" step size underflow (stop):\n)
odeprint } ifelse ode@dict /tcur tStart def /outStepCnt 1 def /tout
tStart dt add def 0 0 eq {/ddt ode@ddt def}{/ddt 0 def} ifelse rk4
{/ddt dt def} if end [ [formatoutput] aload pop true setglobal ] globaldict
exch /lorenzXYZseg exch cvx put false setglobal (o) odeprint ode@dict
N end 1 sub { ode@laststate ODEINT [ exch aload pop true setglobal
] globaldict exch /ode@laststate exch put false setglobal [ lorenzXYZseg
[formatoutput] aload pop true setglobal ] globaldict exch /lorenzXYZseg
exch cvx put globaldict /ode@dt ode@dict dt end put globaldict /ode@ddt
ode@dict ddt end put globaldict /ode@tcur ode@dict tcur end put globaldict
/ode@tout ode@dict tout end put false setglobal } repeat (\n) odeprint
end
 1833 2454 a 1833 2454 a
/lorenzXYZall [lorenzXYZall lorenzXYZseg] aload astore cvx def

1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZseg counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0
TeXcolorgray 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj83} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray 1833 2454 a
 tx@odeDict begin /odeprint {0 cvs print flush} def /odeprint load
0 256 string put /ode@tol 1e-6 def /rk4 false def tx@Dict begin 1 dict
begin 20.5 end end ode@dict /tStart exch def end tx@Dict begin 1 dict
begin 20.75 end end ode@dict /tEnd exch def end tx@Dict begin 1 dict
begin 26 cvi end end ode@dict /N exch def end ode@dict /dt tEnd tStart
sub N 1 sub div def end ode@dict /xlength ode@laststate length def
end ode@dict /xlength1 xlength 1 add def end /ode@rpn tx@Dict begin
(10*(x[1]-x[0])|x[0]*(28-x[2])-x[1]|x[0]*x[1]-8/3*x[2]) AlgParser end
cvx bind def /ODESET {ode@dict /x exch def /y x def end tx@Dict begin
ode@dict ode@rpn end end ode@dict xlength end array astore } bind def
/formatoutput {[0 1 2] assembleresult} def rk4 { (\npstODEsolve (RK4),)
odeprint ( "o" output step:\n) odeprint }{ (\npstODEsolve (RKF45),\n)
odeprint (-/+ failed/successful step, "o" output step, "!" step size underflow (stop):\n)
odeprint } ifelse ode@dict /tcur tStart def /outStepCnt 1 def /tout
tStart dt add def 0 0 eq {/ddt ode@ddt def}{/ddt 0 def} ifelse rk4
{/ddt dt def} if end [ [formatoutput] aload pop true setglobal ] globaldict
exch /lorenzXYZseg exch cvx put false setglobal (o) odeprint ode@dict
N end 1 sub { ode@laststate ODEINT [ exch aload pop true setglobal
] globaldict exch /ode@laststate exch put false setglobal [ lorenzXYZseg
[formatoutput] aload pop true setglobal ] globaldict exch /lorenzXYZseg
exch cvx put globaldict /ode@dt ode@dict dt end put globaldict /ode@ddt
ode@dict ddt end put globaldict /ode@tcur ode@dict tcur end put globaldict
/ode@tout ode@dict tout end put false setglobal } repeat (\n) odeprint
end
 1833 2454 a 1833 2454 a
/lorenzXYZall [lorenzXYZall lorenzXYZseg] aload astore cvx def

1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZseg counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0
TeXcolorgray 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj84} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray 1833 2454 a
 tx@odeDict begin /odeprint {0 cvs print flush} def /odeprint load
0 256 string put /ode@tol 1e-6 def /rk4 false def tx@Dict begin 1 dict
begin 20.75 end end ode@dict /tStart exch def end tx@Dict begin 1 dict
begin 21 end end ode@dict /tEnd exch def end tx@Dict begin 1 dict begin
26 cvi end end ode@dict /N exch def end ode@dict /dt tEnd tStart sub
N 1 sub div def end ode@dict /xlength ode@laststate length def end
ode@dict /xlength1 xlength 1 add def end /ode@rpn tx@Dict begin (10*(x[1]-x[0])|x[0]*(28-x[2])-x[1]|x[0]*x[1]-8/3*x[2])
AlgParser end cvx bind def /ODESET {ode@dict /x exch def /y x def end
tx@Dict begin ode@dict ode@rpn end end ode@dict xlength end array astore
} bind def /formatoutput {[0 1 2] assembleresult} def rk4 { (\npstODEsolve (RK4),)
odeprint ( "o" output step:\n) odeprint }{ (\npstODEsolve (RKF45),\n)
odeprint (-/+ failed/successful step, "o" output step, "!" step size underflow (stop):\n)
odeprint } ifelse ode@dict /tcur tStart def /outStepCnt 1 def /tout
tStart dt add def 0 0 eq {/ddt ode@ddt def}{/ddt 0 def} ifelse rk4
{/ddt dt def} if end [ [formatoutput] aload pop true setglobal ] globaldict
exch /lorenzXYZseg exch cvx put false setglobal (o) odeprint ode@dict
N end 1 sub { ode@laststate ODEINT [ exch aload pop true setglobal
] globaldict exch /ode@laststate exch put false setglobal [ lorenzXYZseg
[formatoutput] aload pop true setglobal ] globaldict exch /lorenzXYZseg
exch cvx put globaldict /ode@dt ode@dict dt end put globaldict /ode@ddt
ode@dict ddt end put globaldict /ode@tcur ode@dict tcur end put globaldict
/ode@tout ode@dict tout end put false setglobal } repeat (\n) odeprint
end
 1833 2454 a 1833 2454 a
/lorenzXYZall [lorenzXYZall lorenzXYZseg] aload astore cvx def

1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZseg counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0
TeXcolorgray 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj85} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray 1833 2454 a
 tx@odeDict begin /odeprint {0 cvs print flush} def /odeprint load
0 256 string put /ode@tol 1e-6 def /rk4 false def tx@Dict begin 1 dict
begin 21 end end ode@dict /tStart exch def end tx@Dict begin 1 dict
begin 21.25 end end ode@dict /tEnd exch def end tx@Dict begin 1 dict
begin 26 cvi end end ode@dict /N exch def end ode@dict /dt tEnd tStart
sub N 1 sub div def end ode@dict /xlength ode@laststate length def
end ode@dict /xlength1 xlength 1 add def end /ode@rpn tx@Dict begin
(10*(x[1]-x[0])|x[0]*(28-x[2])-x[1]|x[0]*x[1]-8/3*x[2]) AlgParser end
cvx bind def /ODESET {ode@dict /x exch def /y x def end tx@Dict begin
ode@dict ode@rpn end end ode@dict xlength end array astore } bind def
/formatoutput {[0 1 2] assembleresult} def rk4 { (\npstODEsolve (RK4),)
odeprint ( "o" output step:\n) odeprint }{ (\npstODEsolve (RKF45),\n)
odeprint (-/+ failed/successful step, "o" output step, "!" step size underflow (stop):\n)
odeprint } ifelse ode@dict /tcur tStart def /outStepCnt 1 def /tout
tStart dt add def 0 0 eq {/ddt ode@ddt def}{/ddt 0 def} ifelse rk4
{/ddt dt def} if end [ [formatoutput] aload pop true setglobal ] globaldict
exch /lorenzXYZseg exch cvx put false setglobal (o) odeprint ode@dict
N end 1 sub { ode@laststate ODEINT [ exch aload pop true setglobal
] globaldict exch /ode@laststate exch put false setglobal [ lorenzXYZseg
[formatoutput] aload pop true setglobal ] globaldict exch /lorenzXYZseg
exch cvx put globaldict /ode@dt ode@dict dt end put globaldict /ode@ddt
ode@dict ddt end put globaldict /ode@tcur ode@dict tcur end put globaldict
/ode@tout ode@dict tout end put false setglobal } repeat (\n) odeprint
end
 1833 2454 a 1833 2454 a
/lorenzXYZall [lorenzXYZall lorenzXYZseg] aload astore cvx def

1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZseg counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0
TeXcolorgray 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj86} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray 1833 2454 a
 tx@odeDict begin /odeprint {0 cvs print flush} def /odeprint load
0 256 string put /ode@tol 1e-6 def /rk4 false def tx@Dict begin 1 dict
begin 21.25 end end ode@dict /tStart exch def end tx@Dict begin 1 dict
begin 21.5 end end ode@dict /tEnd exch def end tx@Dict begin 1 dict
begin 26 cvi end end ode@dict /N exch def end ode@dict /dt tEnd tStart
sub N 1 sub div def end ode@dict /xlength ode@laststate length def
end ode@dict /xlength1 xlength 1 add def end /ode@rpn tx@Dict begin
(10*(x[1]-x[0])|x[0]*(28-x[2])-x[1]|x[0]*x[1]-8/3*x[2]) AlgParser end
cvx bind def /ODESET {ode@dict /x exch def /y x def end tx@Dict begin
ode@dict ode@rpn end end ode@dict xlength end array astore } bind def
/formatoutput {[0 1 2] assembleresult} def rk4 { (\npstODEsolve (RK4),)
odeprint ( "o" output step:\n) odeprint }{ (\npstODEsolve (RKF45),\n)
odeprint (-/+ failed/successful step, "o" output step, "!" step size underflow (stop):\n)
odeprint } ifelse ode@dict /tcur tStart def /outStepCnt 1 def /tout
tStart dt add def 0 0 eq {/ddt ode@ddt def}{/ddt 0 def} ifelse rk4
{/ddt dt def} if end [ [formatoutput] aload pop true setglobal ] globaldict
exch /lorenzXYZseg exch cvx put false setglobal (o) odeprint ode@dict
N end 1 sub { ode@laststate ODEINT [ exch aload pop true setglobal
] globaldict exch /ode@laststate exch put false setglobal [ lorenzXYZseg
[formatoutput] aload pop true setglobal ] globaldict exch /lorenzXYZseg
exch cvx put globaldict /ode@dt ode@dict dt end put globaldict /ode@ddt
ode@dict ddt end put globaldict /ode@tcur ode@dict tcur end put globaldict
/ode@tout ode@dict tout end put false setglobal } repeat (\n) odeprint
end
 1833 2454 a 1833 2454 a
/lorenzXYZall [lorenzXYZall lorenzXYZseg] aload astore cvx def

1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZseg counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0
TeXcolorgray 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj87} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray 1833 2454 a
 tx@odeDict begin /odeprint {0 cvs print flush} def /odeprint load
0 256 string put /ode@tol 1e-6 def /rk4 false def tx@Dict begin 1 dict
begin 21.5 end end ode@dict /tStart exch def end tx@Dict begin 1 dict
begin 21.75 end end ode@dict /tEnd exch def end tx@Dict begin 1 dict
begin 26 cvi end end ode@dict /N exch def end ode@dict /dt tEnd tStart
sub N 1 sub div def end ode@dict /xlength ode@laststate length def
end ode@dict /xlength1 xlength 1 add def end /ode@rpn tx@Dict begin
(10*(x[1]-x[0])|x[0]*(28-x[2])-x[1]|x[0]*x[1]-8/3*x[2]) AlgParser end
cvx bind def /ODESET {ode@dict /x exch def /y x def end tx@Dict begin
ode@dict ode@rpn end end ode@dict xlength end array astore } bind def
/formatoutput {[0 1 2] assembleresult} def rk4 { (\npstODEsolve (RK4),)
odeprint ( "o" output step:\n) odeprint }{ (\npstODEsolve (RKF45),\n)
odeprint (-/+ failed/successful step, "o" output step, "!" step size underflow (stop):\n)
odeprint } ifelse ode@dict /tcur tStart def /outStepCnt 1 def /tout
tStart dt add def 0 0 eq {/ddt ode@ddt def}{/ddt 0 def} ifelse rk4
{/ddt dt def} if end [ [formatoutput] aload pop true setglobal ] globaldict
exch /lorenzXYZseg exch cvx put false setglobal (o) odeprint ode@dict
N end 1 sub { ode@laststate ODEINT [ exch aload pop true setglobal
] globaldict exch /ode@laststate exch put false setglobal [ lorenzXYZseg
[formatoutput] aload pop true setglobal ] globaldict exch /lorenzXYZseg
exch cvx put globaldict /ode@dt ode@dict dt end put globaldict /ode@ddt
ode@dict ddt end put globaldict /ode@tcur ode@dict tcur end put globaldict
/ode@tout ode@dict tout end put false setglobal } repeat (\n) odeprint
end
 1833 2454 a 1833 2454 a
/lorenzXYZall [lorenzXYZall lorenzXYZseg] aload astore cvx def

1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZseg counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0
TeXcolorgray 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj88} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray 1833 2454 a
 tx@odeDict begin /odeprint {0 cvs print flush} def /odeprint load
0 256 string put /ode@tol 1e-6 def /rk4 false def tx@Dict begin 1 dict
begin 21.75 end end ode@dict /tStart exch def end tx@Dict begin 1 dict
begin 22 end end ode@dict /tEnd exch def end tx@Dict begin 1 dict begin
26 cvi end end ode@dict /N exch def end ode@dict /dt tEnd tStart sub
N 1 sub div def end ode@dict /xlength ode@laststate length def end
ode@dict /xlength1 xlength 1 add def end /ode@rpn tx@Dict begin (10*(x[1]-x[0])|x[0]*(28-x[2])-x[1]|x[0]*x[1]-8/3*x[2])
AlgParser end cvx bind def /ODESET {ode@dict /x exch def /y x def end
tx@Dict begin ode@dict ode@rpn end end ode@dict xlength end array astore
} bind def /formatoutput {[0 1 2] assembleresult} def rk4 { (\npstODEsolve (RK4),)
odeprint ( "o" output step:\n) odeprint }{ (\npstODEsolve (RKF45),\n)
odeprint (-/+ failed/successful step, "o" output step, "!" step size underflow (stop):\n)
odeprint } ifelse ode@dict /tcur tStart def /outStepCnt 1 def /tout
tStart dt add def 0 0 eq {/ddt ode@ddt def}{/ddt 0 def} ifelse rk4
{/ddt dt def} if end [ [formatoutput] aload pop true setglobal ] globaldict
exch /lorenzXYZseg exch cvx put false setglobal (o) odeprint ode@dict
N end 1 sub { ode@laststate ODEINT [ exch aload pop true setglobal
] globaldict exch /ode@laststate exch put false setglobal [ lorenzXYZseg
[formatoutput] aload pop true setglobal ] globaldict exch /lorenzXYZseg
exch cvx put globaldict /ode@dt ode@dict dt end put globaldict /ode@ddt
ode@dict ddt end put globaldict /ode@tcur ode@dict tcur end put globaldict
/ode@tout ode@dict tout end put false setglobal } repeat (\n) odeprint
end
 1833 2454 a 1833 2454 a
/lorenzXYZall [lorenzXYZall lorenzXYZseg] aload astore cvx def

1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZseg counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0
TeXcolorgray 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj89} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray 1833 2454 a
 tx@odeDict begin /odeprint {0 cvs print flush} def /odeprint load
0 256 string put /ode@tol 1e-6 def /rk4 false def tx@Dict begin 1 dict
begin 22 end end ode@dict /tStart exch def end tx@Dict begin 1 dict
begin 22.25 end end ode@dict /tEnd exch def end tx@Dict begin 1 dict
begin 26 cvi end end ode@dict /N exch def end ode@dict /dt tEnd tStart
sub N 1 sub div def end ode@dict /xlength ode@laststate length def
end ode@dict /xlength1 xlength 1 add def end /ode@rpn tx@Dict begin
(10*(x[1]-x[0])|x[0]*(28-x[2])-x[1]|x[0]*x[1]-8/3*x[2]) AlgParser end
cvx bind def /ODESET {ode@dict /x exch def /y x def end tx@Dict begin
ode@dict ode@rpn end end ode@dict xlength end array astore } bind def
/formatoutput {[0 1 2] assembleresult} def rk4 { (\npstODEsolve (RK4),)
odeprint ( "o" output step:\n) odeprint }{ (\npstODEsolve (RKF45),\n)
odeprint (-/+ failed/successful step, "o" output step, "!" step size underflow (stop):\n)
odeprint } ifelse ode@dict /tcur tStart def /outStepCnt 1 def /tout
tStart dt add def 0 0 eq {/ddt ode@ddt def}{/ddt 0 def} ifelse rk4
{/ddt dt def} if end [ [formatoutput] aload pop true setglobal ] globaldict
exch /lorenzXYZseg exch cvx put false setglobal (o) odeprint ode@dict
N end 1 sub { ode@laststate ODEINT [ exch aload pop true setglobal
] globaldict exch /ode@laststate exch put false setglobal [ lorenzXYZseg
[formatoutput] aload pop true setglobal ] globaldict exch /lorenzXYZseg
exch cvx put globaldict /ode@dt ode@dict dt end put globaldict /ode@ddt
ode@dict ddt end put globaldict /ode@tcur ode@dict tcur end put globaldict
/ode@tout ode@dict tout end put false setglobal } repeat (\n) odeprint
end
 1833 2454 a 1833 2454 a
/lorenzXYZall [lorenzXYZall lorenzXYZseg] aload astore cvx def

1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZseg counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0
TeXcolorgray 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj90} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray 1833 2454 a
 tx@odeDict begin /odeprint {0 cvs print flush} def /odeprint load
0 256 string put /ode@tol 1e-6 def /rk4 false def tx@Dict begin 1 dict
begin 22.25 end end ode@dict /tStart exch def end tx@Dict begin 1 dict
begin 22.5 end end ode@dict /tEnd exch def end tx@Dict begin 1 dict
begin 26 cvi end end ode@dict /N exch def end ode@dict /dt tEnd tStart
sub N 1 sub div def end ode@dict /xlength ode@laststate length def
end ode@dict /xlength1 xlength 1 add def end /ode@rpn tx@Dict begin
(10*(x[1]-x[0])|x[0]*(28-x[2])-x[1]|x[0]*x[1]-8/3*x[2]) AlgParser end
cvx bind def /ODESET {ode@dict /x exch def /y x def end tx@Dict begin
ode@dict ode@rpn end end ode@dict xlength end array astore } bind def
/formatoutput {[0 1 2] assembleresult} def rk4 { (\npstODEsolve (RK4),)
odeprint ( "o" output step:\n) odeprint }{ (\npstODEsolve (RKF45),\n)
odeprint (-/+ failed/successful step, "o" output step, "!" step size underflow (stop):\n)
odeprint } ifelse ode@dict /tcur tStart def /outStepCnt 1 def /tout
tStart dt add def 0 0 eq {/ddt ode@ddt def}{/ddt 0 def} ifelse rk4
{/ddt dt def} if end [ [formatoutput] aload pop true setglobal ] globaldict
exch /lorenzXYZseg exch cvx put false setglobal (o) odeprint ode@dict
N end 1 sub { ode@laststate ODEINT [ exch aload pop true setglobal
] globaldict exch /ode@laststate exch put false setglobal [ lorenzXYZseg
[formatoutput] aload pop true setglobal ] globaldict exch /lorenzXYZseg
exch cvx put globaldict /ode@dt ode@dict dt end put globaldict /ode@ddt
ode@dict ddt end put globaldict /ode@tcur ode@dict tcur end put globaldict
/ode@tout ode@dict tout end put false setglobal } repeat (\n) odeprint
end
 1833 2454 a 1833 2454 a
/lorenzXYZall [lorenzXYZall lorenzXYZseg] aload astore cvx def

1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZseg counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0
TeXcolorgray 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj91} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray 1833 2454 a
 tx@odeDict begin /odeprint {0 cvs print flush} def /odeprint load
0 256 string put /ode@tol 1e-6 def /rk4 false def tx@Dict begin 1 dict
begin 22.5 end end ode@dict /tStart exch def end tx@Dict begin 1 dict
begin 22.75 end end ode@dict /tEnd exch def end tx@Dict begin 1 dict
begin 26 cvi end end ode@dict /N exch def end ode@dict /dt tEnd tStart
sub N 1 sub div def end ode@dict /xlength ode@laststate length def
end ode@dict /xlength1 xlength 1 add def end /ode@rpn tx@Dict begin
(10*(x[1]-x[0])|x[0]*(28-x[2])-x[1]|x[0]*x[1]-8/3*x[2]) AlgParser end
cvx bind def /ODESET {ode@dict /x exch def /y x def end tx@Dict begin
ode@dict ode@rpn end end ode@dict xlength end array astore } bind def
/formatoutput {[0 1 2] assembleresult} def rk4 { (\npstODEsolve (RK4),)
odeprint ( "o" output step:\n) odeprint }{ (\npstODEsolve (RKF45),\n)
odeprint (-/+ failed/successful step, "o" output step, "!" step size underflow (stop):\n)
odeprint } ifelse ode@dict /tcur tStart def /outStepCnt 1 def /tout
tStart dt add def 0 0 eq {/ddt ode@ddt def}{/ddt 0 def} ifelse rk4
{/ddt dt def} if end [ [formatoutput] aload pop true setglobal ] globaldict
exch /lorenzXYZseg exch cvx put false setglobal (o) odeprint ode@dict
N end 1 sub { ode@laststate ODEINT [ exch aload pop true setglobal
] globaldict exch /ode@laststate exch put false setglobal [ lorenzXYZseg
[formatoutput] aload pop true setglobal ] globaldict exch /lorenzXYZseg
exch cvx put globaldict /ode@dt ode@dict dt end put globaldict /ode@ddt
ode@dict ddt end put globaldict /ode@tcur ode@dict tcur end put globaldict
/ode@tout ode@dict tout end put false setglobal } repeat (\n) odeprint
end
 1833 2454 a 1833 2454 a
/lorenzXYZall [lorenzXYZall lorenzXYZseg] aload astore cvx def

1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZseg counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0
TeXcolorgray 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj92} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray 1833 2454 a
 tx@odeDict begin /odeprint {0 cvs print flush} def /odeprint load
0 256 string put /ode@tol 1e-6 def /rk4 false def tx@Dict begin 1 dict
begin 22.75 end end ode@dict /tStart exch def end tx@Dict begin 1 dict
begin 23 end end ode@dict /tEnd exch def end tx@Dict begin 1 dict begin
26 cvi end end ode@dict /N exch def end ode@dict /dt tEnd tStart sub
N 1 sub div def end ode@dict /xlength ode@laststate length def end
ode@dict /xlength1 xlength 1 add def end /ode@rpn tx@Dict begin (10*(x[1]-x[0])|x[0]*(28-x[2])-x[1]|x[0]*x[1]-8/3*x[2])
AlgParser end cvx bind def /ODESET {ode@dict /x exch def /y x def end
tx@Dict begin ode@dict ode@rpn end end ode@dict xlength end array astore
} bind def /formatoutput {[0 1 2] assembleresult} def rk4 { (\npstODEsolve (RK4),)
odeprint ( "o" output step:\n) odeprint }{ (\npstODEsolve (RKF45),\n)
odeprint (-/+ failed/successful step, "o" output step, "!" step size underflow (stop):\n)
odeprint } ifelse ode@dict /tcur tStart def /outStepCnt 1 def /tout
tStart dt add def 0 0 eq {/ddt ode@ddt def}{/ddt 0 def} ifelse rk4
{/ddt dt def} if end [ [formatoutput] aload pop true setglobal ] globaldict
exch /lorenzXYZseg exch cvx put false setglobal (o) odeprint ode@dict
N end 1 sub { ode@laststate ODEINT [ exch aload pop true setglobal
] globaldict exch /ode@laststate exch put false setglobal [ lorenzXYZseg
[formatoutput] aload pop true setglobal ] globaldict exch /lorenzXYZseg
exch cvx put globaldict /ode@dt ode@dict dt end put globaldict /ode@ddt
ode@dict ddt end put globaldict /ode@tcur ode@dict tcur end put globaldict
/ode@tout ode@dict tout end put false setglobal } repeat (\n) odeprint
end
 1833 2454 a 1833 2454 a
/lorenzXYZall [lorenzXYZall lorenzXYZseg] aload astore cvx def

1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZseg counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0
TeXcolorgray 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj93} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray 1833 2454 a
 tx@odeDict begin /odeprint {0 cvs print flush} def /odeprint load
0 256 string put /ode@tol 1e-6 def /rk4 false def tx@Dict begin 1 dict
begin 23 end end ode@dict /tStart exch def end tx@Dict begin 1 dict
begin 23.25 end end ode@dict /tEnd exch def end tx@Dict begin 1 dict
begin 26 cvi end end ode@dict /N exch def end ode@dict /dt tEnd tStart
sub N 1 sub div def end ode@dict /xlength ode@laststate length def
end ode@dict /xlength1 xlength 1 add def end /ode@rpn tx@Dict begin
(10*(x[1]-x[0])|x[0]*(28-x[2])-x[1]|x[0]*x[1]-8/3*x[2]) AlgParser end
cvx bind def /ODESET {ode@dict /x exch def /y x def end tx@Dict begin
ode@dict ode@rpn end end ode@dict xlength end array astore } bind def
/formatoutput {[0 1 2] assembleresult} def rk4 { (\npstODEsolve (RK4),)
odeprint ( "o" output step:\n) odeprint }{ (\npstODEsolve (RKF45),\n)
odeprint (-/+ failed/successful step, "o" output step, "!" step size underflow (stop):\n)
odeprint } ifelse ode@dict /tcur tStart def /outStepCnt 1 def /tout
tStart dt add def 0 0 eq {/ddt ode@ddt def}{/ddt 0 def} ifelse rk4
{/ddt dt def} if end [ [formatoutput] aload pop true setglobal ] globaldict
exch /lorenzXYZseg exch cvx put false setglobal (o) odeprint ode@dict
N end 1 sub { ode@laststate ODEINT [ exch aload pop true setglobal
] globaldict exch /ode@laststate exch put false setglobal [ lorenzXYZseg
[formatoutput] aload pop true setglobal ] globaldict exch /lorenzXYZseg
exch cvx put globaldict /ode@dt ode@dict dt end put globaldict /ode@ddt
ode@dict ddt end put globaldict /ode@tcur ode@dict tcur end put globaldict
/ode@tout ode@dict tout end put false setglobal } repeat (\n) odeprint
end
 1833 2454 a 1833 2454 a
/lorenzXYZall [lorenzXYZall lorenzXYZseg] aload astore cvx def

1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZseg counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0
TeXcolorgray 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj94} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray 1833 2454 a
 tx@odeDict begin /odeprint {0 cvs print flush} def /odeprint load
0 256 string put /ode@tol 1e-6 def /rk4 false def tx@Dict begin 1 dict
begin 23.25 end end ode@dict /tStart exch def end tx@Dict begin 1 dict
begin 23.5 end end ode@dict /tEnd exch def end tx@Dict begin 1 dict
begin 26 cvi end end ode@dict /N exch def end ode@dict /dt tEnd tStart
sub N 1 sub div def end ode@dict /xlength ode@laststate length def
end ode@dict /xlength1 xlength 1 add def end /ode@rpn tx@Dict begin
(10*(x[1]-x[0])|x[0]*(28-x[2])-x[1]|x[0]*x[1]-8/3*x[2]) AlgParser end
cvx bind def /ODESET {ode@dict /x exch def /y x def end tx@Dict begin
ode@dict ode@rpn end end ode@dict xlength end array astore } bind def
/formatoutput {[0 1 2] assembleresult} def rk4 { (\npstODEsolve (RK4),)
odeprint ( "o" output step:\n) odeprint }{ (\npstODEsolve (RKF45),\n)
odeprint (-/+ failed/successful step, "o" output step, "!" step size underflow (stop):\n)
odeprint } ifelse ode@dict /tcur tStart def /outStepCnt 1 def /tout
tStart dt add def 0 0 eq {/ddt ode@ddt def}{/ddt 0 def} ifelse rk4
{/ddt dt def} if end [ [formatoutput] aload pop true setglobal ] globaldict
exch /lorenzXYZseg exch cvx put false setglobal (o) odeprint ode@dict
N end 1 sub { ode@laststate ODEINT [ exch aload pop true setglobal
] globaldict exch /ode@laststate exch put false setglobal [ lorenzXYZseg
[formatoutput] aload pop true setglobal ] globaldict exch /lorenzXYZseg
exch cvx put globaldict /ode@dt ode@dict dt end put globaldict /ode@ddt
ode@dict ddt end put globaldict /ode@tcur ode@dict tcur end put globaldict
/ode@tout ode@dict tout end put false setglobal } repeat (\n) odeprint
end
 1833 2454 a 1833 2454 a
/lorenzXYZall [lorenzXYZall lorenzXYZseg] aload astore cvx def

1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZseg counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0
TeXcolorgray 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj95} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray 1833 2454 a
 tx@odeDict begin /odeprint {0 cvs print flush} def /odeprint load
0 256 string put /ode@tol 1e-6 def /rk4 false def tx@Dict begin 1 dict
begin 23.5 end end ode@dict /tStart exch def end tx@Dict begin 1 dict
begin 23.75 end end ode@dict /tEnd exch def end tx@Dict begin 1 dict
begin 26 cvi end end ode@dict /N exch def end ode@dict /dt tEnd tStart
sub N 1 sub div def end ode@dict /xlength ode@laststate length def
end ode@dict /xlength1 xlength 1 add def end /ode@rpn tx@Dict begin
(10*(x[1]-x[0])|x[0]*(28-x[2])-x[1]|x[0]*x[1]-8/3*x[2]) AlgParser end
cvx bind def /ODESET {ode@dict /x exch def /y x def end tx@Dict begin
ode@dict ode@rpn end end ode@dict xlength end array astore } bind def
/formatoutput {[0 1 2] assembleresult} def rk4 { (\npstODEsolve (RK4),)
odeprint ( "o" output step:\n) odeprint }{ (\npstODEsolve (RKF45),\n)
odeprint (-/+ failed/successful step, "o" output step, "!" step size underflow (stop):\n)
odeprint } ifelse ode@dict /tcur tStart def /outStepCnt 1 def /tout
tStart dt add def 0 0 eq {/ddt ode@ddt def}{/ddt 0 def} ifelse rk4
{/ddt dt def} if end [ [formatoutput] aload pop true setglobal ] globaldict
exch /lorenzXYZseg exch cvx put false setglobal (o) odeprint ode@dict
N end 1 sub { ode@laststate ODEINT [ exch aload pop true setglobal
] globaldict exch /ode@laststate exch put false setglobal [ lorenzXYZseg
[formatoutput] aload pop true setglobal ] globaldict exch /lorenzXYZseg
exch cvx put globaldict /ode@dt ode@dict dt end put globaldict /ode@ddt
ode@dict ddt end put globaldict /ode@tcur ode@dict tcur end put globaldict
/ode@tout ode@dict tout end put false setglobal } repeat (\n) odeprint
end
 1833 2454 a 1833 2454 a
/lorenzXYZall [lorenzXYZall lorenzXYZseg] aload astore cvx def

1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZseg counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0
TeXcolorgray 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj96} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray 1833 2454 a
 tx@odeDict begin /odeprint {0 cvs print flush} def /odeprint load
0 256 string put /ode@tol 1e-6 def /rk4 false def tx@Dict begin 1 dict
begin 23.75 end end ode@dict /tStart exch def end tx@Dict begin 1 dict
begin 24 end end ode@dict /tEnd exch def end tx@Dict begin 1 dict begin
26 cvi end end ode@dict /N exch def end ode@dict /dt tEnd tStart sub
N 1 sub div def end ode@dict /xlength ode@laststate length def end
ode@dict /xlength1 xlength 1 add def end /ode@rpn tx@Dict begin (10*(x[1]-x[0])|x[0]*(28-x[2])-x[1]|x[0]*x[1]-8/3*x[2])
AlgParser end cvx bind def /ODESET {ode@dict /x exch def /y x def end
tx@Dict begin ode@dict ode@rpn end end ode@dict xlength end array astore
} bind def /formatoutput {[0 1 2] assembleresult} def rk4 { (\npstODEsolve (RK4),)
odeprint ( "o" output step:\n) odeprint }{ (\npstODEsolve (RKF45),\n)
odeprint (-/+ failed/successful step, "o" output step, "!" step size underflow (stop):\n)
odeprint } ifelse ode@dict /tcur tStart def /outStepCnt 1 def /tout
tStart dt add def 0 0 eq {/ddt ode@ddt def}{/ddt 0 def} ifelse rk4
{/ddt dt def} if end [ [formatoutput] aload pop true setglobal ] globaldict
exch /lorenzXYZseg exch cvx put false setglobal (o) odeprint ode@dict
N end 1 sub { ode@laststate ODEINT [ exch aload pop true setglobal
] globaldict exch /ode@laststate exch put false setglobal [ lorenzXYZseg
[formatoutput] aload pop true setglobal ] globaldict exch /lorenzXYZseg
exch cvx put globaldict /ode@dt ode@dict dt end put globaldict /ode@ddt
ode@dict ddt end put globaldict /ode@tcur ode@dict tcur end put globaldict
/ode@tout ode@dict tout end put false setglobal } repeat (\n) odeprint
end
 1833 2454 a 1833 2454 a
/lorenzXYZall [lorenzXYZall lorenzXYZseg] aload astore cvx def

1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZseg counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0
TeXcolorgray 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj97} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray 1833 2454 a
 tx@odeDict begin /odeprint {0 cvs print flush} def /odeprint load
0 256 string put /ode@tol 1e-6 def /rk4 false def tx@Dict begin 1 dict
begin 24 end end ode@dict /tStart exch def end tx@Dict begin 1 dict
begin 24.25 end end ode@dict /tEnd exch def end tx@Dict begin 1 dict
begin 26 cvi end end ode@dict /N exch def end ode@dict /dt tEnd tStart
sub N 1 sub div def end ode@dict /xlength ode@laststate length def
end ode@dict /xlength1 xlength 1 add def end /ode@rpn tx@Dict begin
(10*(x[1]-x[0])|x[0]*(28-x[2])-x[1]|x[0]*x[1]-8/3*x[2]) AlgParser end
cvx bind def /ODESET {ode@dict /x exch def /y x def end tx@Dict begin
ode@dict ode@rpn end end ode@dict xlength end array astore } bind def
/formatoutput {[0 1 2] assembleresult} def rk4 { (\npstODEsolve (RK4),)
odeprint ( "o" output step:\n) odeprint }{ (\npstODEsolve (RKF45),\n)
odeprint (-/+ failed/successful step, "o" output step, "!" step size underflow (stop):\n)
odeprint } ifelse ode@dict /tcur tStart def /outStepCnt 1 def /tout
tStart dt add def 0 0 eq {/ddt ode@ddt def}{/ddt 0 def} ifelse rk4
{/ddt dt def} if end [ [formatoutput] aload pop true setglobal ] globaldict
exch /lorenzXYZseg exch cvx put false setglobal (o) odeprint ode@dict
N end 1 sub { ode@laststate ODEINT [ exch aload pop true setglobal
] globaldict exch /ode@laststate exch put false setglobal [ lorenzXYZseg
[formatoutput] aload pop true setglobal ] globaldict exch /lorenzXYZseg
exch cvx put globaldict /ode@dt ode@dict dt end put globaldict /ode@ddt
ode@dict ddt end put globaldict /ode@tcur ode@dict tcur end put globaldict
/ode@tout ode@dict tout end put false setglobal } repeat (\n) odeprint
end
 1833 2454 a 1833 2454 a
/lorenzXYZall [lorenzXYZall lorenzXYZseg] aload astore cvx def

1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZseg counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0
TeXcolorgray 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj98} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray 1833 2454 a
 tx@odeDict begin /odeprint {0 cvs print flush} def /odeprint load
0 256 string put /ode@tol 1e-6 def /rk4 false def tx@Dict begin 1 dict
begin 24.25 end end ode@dict /tStart exch def end tx@Dict begin 1 dict
begin 24.5 end end ode@dict /tEnd exch def end tx@Dict begin 1 dict
begin 26 cvi end end ode@dict /N exch def end ode@dict /dt tEnd tStart
sub N 1 sub div def end ode@dict /xlength ode@laststate length def
end ode@dict /xlength1 xlength 1 add def end /ode@rpn tx@Dict begin
(10*(x[1]-x[0])|x[0]*(28-x[2])-x[1]|x[0]*x[1]-8/3*x[2]) AlgParser end
cvx bind def /ODESET {ode@dict /x exch def /y x def end tx@Dict begin
ode@dict ode@rpn end end ode@dict xlength end array astore } bind def
/formatoutput {[0 1 2] assembleresult} def rk4 { (\npstODEsolve (RK4),)
odeprint ( "o" output step:\n) odeprint }{ (\npstODEsolve (RKF45),\n)
odeprint (-/+ failed/successful step, "o" output step, "!" step size underflow (stop):\n)
odeprint } ifelse ode@dict /tcur tStart def /outStepCnt 1 def /tout
tStart dt add def 0 0 eq {/ddt ode@ddt def}{/ddt 0 def} ifelse rk4
{/ddt dt def} if end [ [formatoutput] aload pop true setglobal ] globaldict
exch /lorenzXYZseg exch cvx put false setglobal (o) odeprint ode@dict
N end 1 sub { ode@laststate ODEINT [ exch aload pop true setglobal
] globaldict exch /ode@laststate exch put false setglobal [ lorenzXYZseg
[formatoutput] aload pop true setglobal ] globaldict exch /lorenzXYZseg
exch cvx put globaldict /ode@dt ode@dict dt end put globaldict /ode@ddt
ode@dict ddt end put globaldict /ode@tcur ode@dict tcur end put globaldict
/ode@tout ode@dict tout end put false setglobal } repeat (\n) odeprint
end
 1833 2454 a 1833 2454 a
/lorenzXYZall [lorenzXYZall lorenzXYZseg] aload astore cvx def

1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZseg counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0
TeXcolorgray 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj99} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray 1833 2454 a
 tx@odeDict begin /odeprint {0 cvs print flush} def /odeprint load
0 256 string put /ode@tol 1e-6 def /rk4 false def tx@Dict begin 1 dict
begin 24.5 end end ode@dict /tStart exch def end tx@Dict begin 1 dict
begin 24.75 end end ode@dict /tEnd exch def end tx@Dict begin 1 dict
begin 26 cvi end end ode@dict /N exch def end ode@dict /dt tEnd tStart
sub N 1 sub div def end ode@dict /xlength ode@laststate length def
end ode@dict /xlength1 xlength 1 add def end /ode@rpn tx@Dict begin
(10*(x[1]-x[0])|x[0]*(28-x[2])-x[1]|x[0]*x[1]-8/3*x[2]) AlgParser end
cvx bind def /ODESET {ode@dict /x exch def /y x def end tx@Dict begin
ode@dict ode@rpn end end ode@dict xlength end array astore } bind def
/formatoutput {[0 1 2] assembleresult} def rk4 { (\npstODEsolve (RK4),)
odeprint ( "o" output step:\n) odeprint }{ (\npstODEsolve (RKF45),\n)
odeprint (-/+ failed/successful step, "o" output step, "!" step size underflow (stop):\n)
odeprint } ifelse ode@dict /tcur tStart def /outStepCnt 1 def /tout
tStart dt add def 0 0 eq {/ddt ode@ddt def}{/ddt 0 def} ifelse rk4
{/ddt dt def} if end [ [formatoutput] aload pop true setglobal ] globaldict
exch /lorenzXYZseg exch cvx put false setglobal (o) odeprint ode@dict
N end 1 sub { ode@laststate ODEINT [ exch aload pop true setglobal
] globaldict exch /ode@laststate exch put false setglobal [ lorenzXYZseg
[formatoutput] aload pop true setglobal ] globaldict exch /lorenzXYZseg
exch cvx put globaldict /ode@dt ode@dict dt end put globaldict /ode@ddt
ode@dict ddt end put globaldict /ode@tcur ode@dict tcur end put globaldict
/ode@tout ode@dict tout end put false setglobal } repeat (\n) odeprint
end
 1833 2454 a 1833 2454 a
/lorenzXYZall [lorenzXYZall lorenzXYZseg] aload astore cvx def

1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZseg counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0
TeXcolorgray 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj100} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray 1833 2454 a
 tx@odeDict begin /odeprint {0 cvs print flush} def /odeprint load
0 256 string put /ode@tol 1e-6 def /rk4 false def tx@Dict begin 1 dict
begin 24.75 end end ode@dict /tStart exch def end tx@Dict begin 1 dict
begin 25 end end ode@dict /tEnd exch def end tx@Dict begin 1 dict begin
26 cvi end end ode@dict /N exch def end ode@dict /dt tEnd tStart sub
N 1 sub div def end ode@dict /xlength ode@laststate length def end
ode@dict /xlength1 xlength 1 add def end /ode@rpn tx@Dict begin (10*(x[1]-x[0])|x[0]*(28-x[2])-x[1]|x[0]*x[1]-8/3*x[2])
AlgParser end cvx bind def /ODESET {ode@dict /x exch def /y x def end
tx@Dict begin ode@dict ode@rpn end end ode@dict xlength end array astore
} bind def /formatoutput {[0 1 2] assembleresult} def rk4 { (\npstODEsolve (RK4),)
odeprint ( "o" output step:\n) odeprint }{ (\npstODEsolve (RKF45),\n)
odeprint (-/+ failed/successful step, "o" output step, "!" step size underflow (stop):\n)
odeprint } ifelse ode@dict /tcur tStart def /outStepCnt 1 def /tout
tStart dt add def 0 0 eq {/ddt ode@ddt def}{/ddt 0 def} ifelse rk4
{/ddt dt def} if end [ [formatoutput] aload pop true setglobal ] globaldict
exch /lorenzXYZseg exch cvx put false setglobal (o) odeprint ode@dict
N end 1 sub { ode@laststate ODEINT [ exch aload pop true setglobal
] globaldict exch /ode@laststate exch put false setglobal [ lorenzXYZseg
[formatoutput] aload pop true setglobal ] globaldict exch /lorenzXYZseg
exch cvx put globaldict /ode@dt ode@dict dt end put globaldict /ode@ddt
ode@dict ddt end put globaldict /ode@tcur ode@dict tcur end put globaldict
/ode@tout ode@dict tout end put false setglobal } repeat (\n) odeprint
end
 1833 2454 a 1833 2454 a
/lorenzXYZall [lorenzXYZall lorenzXYZseg] aload astore cvx def

1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZseg counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0
TeXcolorgray 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj101} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 116.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 116.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 33 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMax 10
{InitPnode } /NodeScale {} def NewNode end  end

1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 116.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -1 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 116.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 33 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833
2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 116.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 -1 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 116.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 55 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454
a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@xMax known { /N@xMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@xMin known { /N@xMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@yMax known { /N@yMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@yMin known { /N@yMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@zMax known { /N@zMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@zMin known { /N@zMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial
1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 180.  def grestore  end
 1833 2454 a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@xMax known { /N@xMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833
2454 a
tx@Dict begin { 5.0 5.71527 4.30554 0.0 180.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1809 2472 a Fb(x)1833 2454 y
tx@Dict begin  PutEnd  end
 1833
2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 1833 2454
a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@yMax known { /N@yMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.2616 4.30554 1.94444 0.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1811
2464 a Fb(y)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833
2454 a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 90.  def grestore  end
 1833 2454 a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@zMax known { /N@zMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454
a 1833 2454 a
tx@Dict begin { 5.0 5.0903 4.30554 0.0 90.  Uput UUput } PutCoor PutBegin
 end
 1833 2454 a 1812 2472 a Fb(z)1833 2454
y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 116.  def /Beta 20.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZall counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end


@endspecial 0 TeXcolorgray 515 2930 a
grestore
 515 2930 a 515
2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj102} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515
2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 112.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454
a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 112.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 33 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 112.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -1 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833
2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 112.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 33 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 112.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 -1 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 112.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 55 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@xMax known { /N@xMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@xMin known { /N@xMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@yMax known { /N@yMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@yMin known { /N@yMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@zMax known { /N@zMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@zMin known { /N@zMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 180.  def grestore  end
 1833 2454 a 1833
2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@xMax known { /N@xMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.71527 4.30554 0.0 180.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1809 2472
a Fb(x)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454
a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 1833 2454 a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@yMax known { /N@yMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833
2454 a
tx@Dict begin { 5.0 5.2616 4.30554 1.94444 0.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1811 2464 a Fb(y)1833 2454 y
tx@Dict begin  PutEnd  end
 1833
2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 90.  def grestore  end
 1833 2454
a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@zMax known { /N@zMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.0903 4.30554 0.0 90.  Uput UUput } PutCoor PutBegin
 end
 1833 2454 a 1812
2472 a Fb(z)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833
2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 112.  def /Beta 20.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZall counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0 TeXcolorgray
515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj103} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray
1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 108.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 108.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 33 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833
2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 108.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -1 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 108.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 33 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 108.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 -1 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 108.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 55 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@xMax known { /N@xMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@xMin known { /N@xMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@yMax known { /N@yMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@yMin known { /N@yMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@zMax known { /N@zMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@zMin known { /N@zMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 180.  def grestore  end
 1833 2454 a 1833
2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@xMax known { /N@xMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.71527 4.30554 0.0 180.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1809 2472
a Fb(x)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454
a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 1833 2454 a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@yMax known { /N@yMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833
2454 a
tx@Dict begin { 5.0 5.2616 4.30554 1.94444 0.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1811 2464 a Fb(y)1833 2454 y
tx@Dict begin  PutEnd  end
 1833
2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 90.  def grestore  end
 1833 2454
a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@zMax known { /N@zMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.0903 4.30554 0.0 90.  Uput UUput } PutCoor PutBegin
 end
 1833 2454 a 1812
2472 a Fb(z)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833
2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 108.  def /Beta 20.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZall counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0 TeXcolorgray
515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj104} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray
1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 104.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 104.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 33 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833
2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 104.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -1 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 104.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 33 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 104.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 -1 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 104.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 55 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@xMax known { /N@xMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@xMin known { /N@xMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@yMax known { /N@yMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@yMin known { /N@yMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@zMax known { /N@zMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@zMin known { /N@zMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 180.  def grestore  end
 1833 2454 a 1833
2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@xMax known { /N@xMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.71527 4.30554 0.0 180.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1809 2472
a Fb(x)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454
a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 1833 2454 a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@yMax known { /N@yMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833
2454 a
tx@Dict begin { 5.0 5.2616 4.30554 1.94444 0.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1811 2464 a Fb(y)1833 2454 y
tx@Dict begin  PutEnd  end
 1833
2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 90.  def grestore  end
 1833 2454
a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@zMax known { /N@zMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.0903 4.30554 0.0 90.  Uput UUput } PutCoor PutBegin
 end
 1833 2454 a 1812
2472 a Fb(z)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833
2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 104.  def /Beta 20.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZall counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0 TeXcolorgray
515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj105} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray
1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 100.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 100.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 33 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833
2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 100.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -1 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 100.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 33 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 100.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 -1 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 100.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 55 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@xMax known { /N@xMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@xMin known { /N@xMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@yMax known { /N@yMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@yMin known { /N@yMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@zMax known { /N@zMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@zMin known { /N@zMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 180.  def grestore  end
 1833 2454 a 1833
2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@xMax known { /N@xMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.71527 4.30554 0.0 180.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1809 2472
a Fb(x)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454
a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 1833 2454 a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@yMax known { /N@yMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833
2454 a
tx@Dict begin { 5.0 5.2616 4.30554 1.94444 0.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1811 2464 a Fb(y)1833 2454 y
tx@Dict begin  PutEnd  end
 1833
2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 90.  def grestore  end
 1833 2454
a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@zMax known { /N@zMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.0903 4.30554 0.0 90.  Uput UUput } PutCoor PutBegin
 end
 1833 2454 a 1812
2472 a Fb(z)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833
2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 100.  def /Beta 20.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZall counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0 TeXcolorgray
515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj106} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray
1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 96.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 96.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 33 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833
2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 96.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -1 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 96.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 33 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 96.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 -1 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 96.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 55 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@xMax known { /N@xMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@xMin known { /N@xMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@yMax known { /N@yMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@yMin known { /N@yMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@zMax known { /N@zMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@zMin known { /N@zMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 180.  def grestore  end
 1833 2454 a 1833
2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@xMax known { /N@xMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.71527 4.30554 0.0 180.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1809 2472
a Fb(x)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454
a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 1833 2454 a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@yMax known { /N@yMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833
2454 a
tx@Dict begin { 5.0 5.2616 4.30554 1.94444 0.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1811 2464 a Fb(y)1833 2454 y
tx@Dict begin  PutEnd  end
 1833
2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 90.  def grestore  end
 1833 2454
a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@zMax known { /N@zMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.0903 4.30554 0.0 90.  Uput UUput } PutCoor PutBegin
 end
 1833 2454 a 1812
2472 a Fb(z)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833
2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 96.  def /Beta 20.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZall counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0 TeXcolorgray
515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj107} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray
1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 92.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 92.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 33 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833
2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 92.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -1 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 92.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 33 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 92.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 -1 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 92.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 55 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@xMax known { /N@xMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@xMin known { /N@xMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@yMax known { /N@yMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@yMin known { /N@yMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@zMax known { /N@zMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@zMin known { /N@zMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 180.  def grestore  end
 1833 2454 a 1833
2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@xMax known { /N@xMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.71527 4.30554 0.0 180.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1809 2472
a Fb(x)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454
a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 1833 2454 a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@yMax known { /N@yMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833
2454 a
tx@Dict begin { 5.0 5.2616 4.30554 1.94444 0.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1811 2464 a Fb(y)1833 2454 y
tx@Dict begin  PutEnd  end
 1833
2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 90.  def grestore  end
 1833 2454
a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@zMax known { /N@zMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.0903 4.30554 0.0 90.  Uput UUput } PutCoor PutBegin
 end
 1833 2454 a 1812
2472 a Fb(z)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833
2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 92.  def /Beta 20.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZall counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0 TeXcolorgray
515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj108} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray
1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 88.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 88.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 33 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833
2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 88.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -1 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 88.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 33 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 88.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 -1 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 88.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 55 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@xMax known { /N@xMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@xMin known { /N@xMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@yMax known { /N@yMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@yMin known { /N@yMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@zMax known { /N@zMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@zMin known { /N@zMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 180.  def grestore  end
 1833 2454 a 1833
2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@xMax known { /N@xMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.71527 4.30554 0.0 180.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1809 2472
a Fb(x)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454
a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 1833 2454 a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@yMax known { /N@yMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833
2454 a
tx@Dict begin { 5.0 5.2616 4.30554 1.94444 0.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1811 2464 a Fb(y)1833 2454 y
tx@Dict begin  PutEnd  end
 1833
2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 90.  def grestore  end
 1833 2454
a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@zMax known { /N@zMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.0903 4.30554 0.0 90.  Uput UUput } PutCoor PutBegin
 end
 1833 2454 a 1812
2472 a Fb(z)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833
2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 88.  def /Beta 20.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZall counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0 TeXcolorgray
515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj109} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray
1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 84.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 84.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 33 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833
2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 84.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -1 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 84.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 33 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 84.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 -1 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 84.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 55 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@xMax known { /N@xMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@xMin known { /N@xMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@yMax known { /N@yMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@yMin known { /N@yMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@zMax known { /N@zMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@zMin known { /N@zMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 180.  def grestore  end
 1833 2454 a 1833
2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@xMax known { /N@xMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.71527 4.30554 0.0 180.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1809 2472
a Fb(x)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454
a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 1833 2454 a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@yMax known { /N@yMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833
2454 a
tx@Dict begin { 5.0 5.2616 4.30554 1.94444 0.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1811 2464 a Fb(y)1833 2454 y
tx@Dict begin  PutEnd  end
 1833
2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 90.  def grestore  end
 1833 2454
a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@zMax known { /N@zMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.0903 4.30554 0.0 90.  Uput UUput } PutCoor PutBegin
 end
 1833 2454 a 1812
2472 a Fb(z)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833
2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 84.  def /Beta 20.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZall counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0 TeXcolorgray
515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj110} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray
1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 80.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 80.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 33 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833
2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 80.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -1 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 80.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 33 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 80.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 -1 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 80.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 55 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@xMax known { /N@xMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@xMin known { /N@xMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@yMax known { /N@yMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@yMin known { /N@yMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@zMax known { /N@zMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@zMin known { /N@zMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 180.  def grestore  end
 1833 2454 a 1833
2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@xMax known { /N@xMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.71527 4.30554 0.0 180.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1809 2472
a Fb(x)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454
a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 1833 2454 a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@yMax known { /N@yMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833
2454 a
tx@Dict begin { 5.0 5.2616 4.30554 1.94444 0.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1811 2464 a Fb(y)1833 2454 y
tx@Dict begin  PutEnd  end
 1833
2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 90.  def grestore  end
 1833 2454
a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@zMax known { /N@zMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.0903 4.30554 0.0 90.  Uput UUput } PutCoor PutBegin
 end
 1833 2454 a 1812
2472 a Fb(z)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833
2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 80.  def /Beta 20.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZall counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0 TeXcolorgray
515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj111} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray
1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 76.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 76.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 33 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833
2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 76.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -1 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 76.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 33 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 76.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 -1 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 76.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 55 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@xMax known { /N@xMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@xMin known { /N@xMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@yMax known { /N@yMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@yMin known { /N@yMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@zMax known { /N@zMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@zMin known { /N@zMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 180.  def grestore  end
 1833 2454 a 1833
2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@xMax known { /N@xMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.71527 4.30554 0.0 180.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1809 2472
a Fb(x)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454
a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 1833 2454 a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@yMax known { /N@yMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833
2454 a
tx@Dict begin { 5.0 5.2616 4.30554 1.94444 0.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1811 2464 a Fb(y)1833 2454 y
tx@Dict begin  PutEnd  end
 1833
2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 90.  def grestore  end
 1833 2454
a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@zMax known { /N@zMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.0903 4.30554 0.0 90.  Uput UUput } PutCoor PutBegin
 end
 1833 2454 a 1812
2472 a Fb(z)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833
2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 76.  def /Beta 20.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZall counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0 TeXcolorgray
515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj112} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray
1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 72.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 72.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 33 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833
2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 72.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -1 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 72.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 33 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 72.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 -1 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 72.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 55 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@xMax known { /N@xMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@xMin known { /N@xMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@yMax known { /N@yMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@yMin known { /N@yMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@zMax known { /N@zMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@zMin known { /N@zMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 180.  def grestore  end
 1833 2454 a 1833
2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@xMax known { /N@xMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.71527 4.30554 0.0 180.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1809 2472
a Fb(x)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454
a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 1833 2454 a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@yMax known { /N@yMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833
2454 a
tx@Dict begin { 5.0 5.2616 4.30554 1.94444 0.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1811 2464 a Fb(y)1833 2454 y
tx@Dict begin  PutEnd  end
 1833
2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 90.  def grestore  end
 1833 2454
a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@zMax known { /N@zMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.0903 4.30554 0.0 90.  Uput UUput } PutCoor PutBegin
 end
 1833 2454 a 1812
2472 a Fb(z)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833
2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 72.  def /Beta 20.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZall counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0 TeXcolorgray
515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj113} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray
1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 68.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 68.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 33 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833
2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 68.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -1 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 68.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 33 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 68.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 -1 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 68.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 55 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@xMax known { /N@xMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@xMin known { /N@xMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@yMax known { /N@yMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@yMin known { /N@yMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@zMax known { /N@zMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@zMin known { /N@zMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 180.  def grestore  end
 1833 2454 a 1833
2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@xMax known { /N@xMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.71527 4.30554 0.0 180.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1809 2472
a Fb(x)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454
a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 1833 2454 a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@yMax known { /N@yMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833
2454 a
tx@Dict begin { 5.0 5.2616 4.30554 1.94444 0.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1811 2464 a Fb(y)1833 2454 y
tx@Dict begin  PutEnd  end
 1833
2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 90.  def grestore  end
 1833 2454
a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@zMax known { /N@zMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.0903 4.30554 0.0 90.  Uput UUput } PutCoor PutBegin
 end
 1833 2454 a 1812
2472 a Fb(z)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833
2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 68.  def /Beta 20.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZall counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0 TeXcolorgray
515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj114} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray
1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 64.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 64.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 33 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833
2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 64.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -1 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 64.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 33 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 64.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 -1 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 64.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 55 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@xMax known { /N@xMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@xMin known { /N@xMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@yMax known { /N@yMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@yMin known { /N@yMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@zMax known { /N@zMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@zMin known { /N@zMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 180.  def grestore  end
 1833 2454 a 1833
2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@xMax known { /N@xMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.71527 4.30554 0.0 180.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1809 2472
a Fb(x)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454
a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 1833 2454 a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@yMax known { /N@yMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833
2454 a
tx@Dict begin { 5.0 5.2616 4.30554 1.94444 0.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1811 2464 a Fb(y)1833 2454 y
tx@Dict begin  PutEnd  end
 1833
2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 90.  def grestore  end
 1833 2454
a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@zMax known { /N@zMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.0903 4.30554 0.0 90.  Uput UUput } PutCoor PutBegin
 end
 1833 2454 a 1812
2472 a Fb(z)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833
2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 64.  def /Beta 20.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZall counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0 TeXcolorgray
515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj115} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray
1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 60.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 60.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 33 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833
2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 60.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -1 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 60.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 33 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 60.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 -1 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 60.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 55 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@xMax known { /N@xMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@xMin known { /N@xMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@yMax known { /N@yMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@yMin known { /N@yMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@zMax known { /N@zMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@zMin known { /N@zMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 180.  def grestore  end
 1833 2454 a 1833
2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@xMax known { /N@xMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.71527 4.30554 0.0 180.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1809 2472
a Fb(x)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454
a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 1833 2454 a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@yMax known { /N@yMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833
2454 a
tx@Dict begin { 5.0 5.2616 4.30554 1.94444 0.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1811 2464 a Fb(y)1833 2454 y
tx@Dict begin  PutEnd  end
 1833
2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 90.  def grestore  end
 1833 2454
a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@zMax known { /N@zMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.0903 4.30554 0.0 90.  Uput UUput } PutCoor PutBegin
 end
 1833 2454 a 1812
2472 a Fb(z)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833
2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 60.  def /Beta 20.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZall counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0 TeXcolorgray
515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj116} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray
1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 56.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 56.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 33 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833
2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 56.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -1 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 56.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 33 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 56.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 -1 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 56.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 55 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@xMax known { /N@xMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@xMin known { /N@xMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@yMax known { /N@yMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@yMin known { /N@yMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@zMax known { /N@zMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@zMin known { /N@zMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 180.  def grestore  end
 1833 2454 a 1833
2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@xMax known { /N@xMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.71527 4.30554 0.0 180.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1809 2472
a Fb(x)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454
a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 1833 2454 a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@yMax known { /N@yMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833
2454 a
tx@Dict begin { 5.0 5.2616 4.30554 1.94444 0.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1811 2464 a Fb(y)1833 2454 y
tx@Dict begin  PutEnd  end
 1833
2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 90.  def grestore  end
 1833 2454
a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@zMax known { /N@zMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.0903 4.30554 0.0 90.  Uput UUput } PutCoor PutBegin
 end
 1833 2454 a 1812
2472 a Fb(z)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833
2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 56.  def /Beta 20.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZall counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0 TeXcolorgray
515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj117} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray
1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 52.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 52.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 33 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833
2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 52.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -1 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 52.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 33 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 52.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 -1 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 52.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 55 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@xMax known { /N@xMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@xMin known { /N@xMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@yMax known { /N@yMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@yMin known { /N@yMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@zMax known { /N@zMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@zMin known { /N@zMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 180.  def grestore  end
 1833 2454 a 1833
2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@xMax known { /N@xMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.71527 4.30554 0.0 180.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1809 2472
a Fb(x)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454
a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 1833 2454 a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@yMax known { /N@yMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833
2454 a
tx@Dict begin { 5.0 5.2616 4.30554 1.94444 0.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1811 2464 a Fb(y)1833 2454 y
tx@Dict begin  PutEnd  end
 1833
2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 90.  def grestore  end
 1833 2454
a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@zMax known { /N@zMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.0903 4.30554 0.0 90.  Uput UUput } PutCoor PutBegin
 end
 1833 2454 a 1812
2472 a Fb(z)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833
2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 52.  def /Beta 20.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZall counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0 TeXcolorgray
515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj118} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray
1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 48.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 48.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 33 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833
2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 48.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -1 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 48.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 33 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 48.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 -1 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 48.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 55 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@xMax known { /N@xMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@xMin known { /N@xMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@yMax known { /N@yMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@yMin known { /N@yMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@zMax known { /N@zMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@zMin known { /N@zMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 180.  def grestore  end
 1833 2454 a 1833
2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@xMax known { /N@xMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.71527 4.30554 0.0 180.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1809 2472
a Fb(x)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454
a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 1833 2454 a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@yMax known { /N@yMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833
2454 a
tx@Dict begin { 5.0 5.2616 4.30554 1.94444 0.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1811 2464 a Fb(y)1833 2454 y
tx@Dict begin  PutEnd  end
 1833
2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 90.  def grestore  end
 1833 2454
a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@zMax known { /N@zMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.0903 4.30554 0.0 90.  Uput UUput } PutCoor PutBegin
 end
 1833 2454 a 1812
2472 a Fb(z)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833
2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 48.  def /Beta 20.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZall counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0 TeXcolorgray
515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj119} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray
1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 44.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 44.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 33 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833
2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 44.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -1 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 44.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 33 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 44.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 -1 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 44.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 55 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@xMax known { /N@xMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@xMin known { /N@xMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@yMax known { /N@yMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@yMin known { /N@yMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@zMax known { /N@zMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@zMin known { /N@zMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 180.  def grestore  end
 1833 2454 a 1833
2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@xMax known { /N@xMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.71527 4.30554 0.0 180.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1809 2472
a Fb(x)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454
a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 1833 2454 a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@yMax known { /N@yMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833
2454 a
tx@Dict begin { 5.0 5.2616 4.30554 1.94444 0.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1811 2464 a Fb(y)1833 2454 y
tx@Dict begin  PutEnd  end
 1833
2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 90.  def grestore  end
 1833 2454
a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@zMax known { /N@zMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.0903 4.30554 0.0 90.  Uput UUput } PutCoor PutBegin
 end
 1833 2454 a 1812
2472 a Fb(z)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833
2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 44.  def /Beta 20.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZall counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0 TeXcolorgray
515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj120} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray
1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 40.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 40.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 33 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833
2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 40.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -1 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 40.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 33 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 40.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 -1 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 40.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 55 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@xMax known { /N@xMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@xMin known { /N@xMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@yMax known { /N@yMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@yMin known { /N@yMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@zMax known { /N@zMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@zMin known { /N@zMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 180.  def grestore  end
 1833 2454 a 1833
2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@xMax known { /N@xMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.71527 4.30554 0.0 180.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1809 2472
a Fb(x)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454
a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 1833 2454 a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@yMax known { /N@yMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833
2454 a
tx@Dict begin { 5.0 5.2616 4.30554 1.94444 0.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1811 2464 a Fb(y)1833 2454 y
tx@Dict begin  PutEnd  end
 1833
2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 90.  def grestore  end
 1833 2454
a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@zMax known { /N@zMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.0903 4.30554 0.0 90.  Uput UUput } PutCoor PutBegin
 end
 1833 2454 a 1812
2472 a Fb(z)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833
2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 40.  def /Beta 20.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZall counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0 TeXcolorgray
515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj121} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray
1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 36.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 36.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 33 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833
2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 36.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -1 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 36.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 33 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 36.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 -1 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 36.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 55 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@xMax known { /N@xMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@xMin known { /N@xMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@yMax known { /N@yMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@yMin known { /N@yMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@zMax known { /N@zMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@zMin known { /N@zMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 180.  def grestore  end
 1833 2454 a 1833
2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@xMax known { /N@xMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.71527 4.30554 0.0 180.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1809 2472
a Fb(x)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454
a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 1833 2454 a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@yMax known { /N@yMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833
2454 a
tx@Dict begin { 5.0 5.2616 4.30554 1.94444 0.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1811 2464 a Fb(y)1833 2454 y
tx@Dict begin  PutEnd  end
 1833
2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 90.  def grestore  end
 1833 2454
a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@zMax known { /N@zMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.0903 4.30554 0.0 90.  Uput UUput } PutCoor PutBegin
 end
 1833 2454 a 1812
2472 a Fb(z)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833
2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 36.  def /Beta 20.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZall counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0 TeXcolorgray
515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj122} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray
1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 32.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 32.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 33 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833
2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 32.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -1 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 32.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 33 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 32.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 -1 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 32.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 55 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@xMax known { /N@xMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@xMin known { /N@xMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@yMax known { /N@yMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@yMin known { /N@yMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@zMax known { /N@zMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@zMin known { /N@zMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 180.  def grestore  end
 1833 2454 a 1833
2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@xMax known { /N@xMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.71527 4.30554 0.0 180.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1809 2472
a Fb(x)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454
a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 1833 2454 a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@yMax known { /N@yMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833
2454 a
tx@Dict begin { 5.0 5.2616 4.30554 1.94444 0.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1811 2464 a Fb(y)1833 2454 y
tx@Dict begin  PutEnd  end
 1833
2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 90.  def grestore  end
 1833 2454
a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@zMax known { /N@zMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.0903 4.30554 0.0 90.  Uput UUput } PutCoor PutBegin
 end
 1833 2454 a 1812
2472 a Fb(z)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833
2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 32.  def /Beta 20.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZall counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0 TeXcolorgray
515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj123} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray
1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 28.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 28.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 33 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833
2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 28.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -1 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 28.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 33 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 28.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 -1 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 28.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 55 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@xMax known { /N@xMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@xMin known { /N@xMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@yMax known { /N@yMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@yMin known { /N@yMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@zMax known { /N@zMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@zMin known { /N@zMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 180.  def grestore  end
 1833 2454 a 1833
2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@xMax known { /N@xMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.71527 4.30554 0.0 180.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1809 2472
a Fb(x)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454
a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 1833 2454 a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@yMax known { /N@yMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833
2454 a
tx@Dict begin { 5.0 5.2616 4.30554 1.94444 0.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1811 2464 a Fb(y)1833 2454 y
tx@Dict begin  PutEnd  end
 1833
2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 90.  def grestore  end
 1833 2454
a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@zMax known { /N@zMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.0903 4.30554 0.0 90.  Uput UUput } PutCoor PutBegin
 end
 1833 2454 a 1812
2472 a Fb(z)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833
2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 28.  def /Beta 20.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZall counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0 TeXcolorgray
515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj124} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray
1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 24.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 24.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 33 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833
2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 24.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -1 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 24.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 33 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 24.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 -1 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 24.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 55 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@xMax known { /N@xMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@xMin known { /N@xMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@yMax known { /N@yMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@yMin known { /N@yMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@zMax known { /N@zMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@zMin known { /N@zMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 180.  def grestore  end
 1833 2454 a 1833
2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@xMax known { /N@xMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.71527 4.30554 0.0 180.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1809 2472
a Fb(x)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454
a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 1833 2454 a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@yMax known { /N@yMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833
2454 a
tx@Dict begin { 5.0 5.2616 4.30554 1.94444 0.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1811 2464 a Fb(y)1833 2454 y
tx@Dict begin  PutEnd  end
 1833
2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 90.  def grestore  end
 1833 2454
a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@zMax known { /N@zMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.0903 4.30554 0.0 90.  Uput UUput } PutCoor PutBegin
 end
 1833 2454 a 1812
2472 a Fb(z)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833
2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 24.  def /Beta 20.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZall counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0 TeXcolorgray
515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj125} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray
1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 20.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 20.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 33 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833
2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 20.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -1 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 20.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 33 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 20.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 -1 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 20.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 55 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@xMax known { /N@xMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@xMin known { /N@xMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@yMax known { /N@yMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@yMin known { /N@yMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@zMax known { /N@zMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@zMin known { /N@zMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 180.  def grestore  end
 1833 2454 a 1833
2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@xMax known { /N@xMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.71527 4.30554 0.0 180.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1809 2472
a Fb(x)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454
a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 1833 2454 a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@yMax known { /N@yMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833
2454 a
tx@Dict begin { 5.0 5.2616 4.30554 1.94444 0.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1811 2464 a Fb(y)1833 2454 y
tx@Dict begin  PutEnd  end
 1833
2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 90.  def grestore  end
 1833 2454
a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@zMax known { /N@zMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.0903 4.30554 0.0 90.  Uput UUput } PutCoor PutBegin
 end
 1833 2454 a 1812
2472 a Fb(z)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833
2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 20.  def /Beta 20.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZall counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0 TeXcolorgray
515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj126} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray
1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 16.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 16.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 33 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833
2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 16.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -1 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 16.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 33 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 16.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 -1 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 16.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 55 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@xMax known { /N@xMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@xMin known { /N@xMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@yMax known { /N@yMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@yMin known { /N@yMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@zMax known { /N@zMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@zMin known { /N@zMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 180.  def grestore  end
 1833 2454 a 1833
2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@xMax known { /N@xMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.71527 4.30554 0.0 180.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1809 2472
a Fb(x)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454
a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 1833 2454 a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@yMax known { /N@yMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833
2454 a
tx@Dict begin { 5.0 5.2616 4.30554 1.94444 0.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1811 2464 a Fb(y)1833 2454 y
tx@Dict begin  PutEnd  end
 1833
2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 90.  def grestore  end
 1833 2454
a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@zMax known { /N@zMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.0903 4.30554 0.0 90.  Uput UUput } PutCoor PutBegin
 end
 1833 2454 a 1812
2472 a Fb(z)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833
2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 16.  def /Beta 20.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZall counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0 TeXcolorgray
515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj127} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray
1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 12.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 12.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 33 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833
2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 12.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -1 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 12.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 33 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 12.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 -1 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 12.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 55 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@xMax known { /N@xMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@xMin known { /N@xMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@yMax known { /N@yMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@yMin known { /N@yMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@zMax known { /N@zMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@zMin known { /N@zMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 180.  def grestore  end
 1833 2454 a 1833
2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@xMax known { /N@xMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.71527 4.30554 0.0 180.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1809 2472
a Fb(x)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454
a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 1833 2454 a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@yMax known { /N@yMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833
2454 a
tx@Dict begin { 5.0 5.2616 4.30554 1.94444 0.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1811 2464 a Fb(y)1833 2454 y
tx@Dict begin  PutEnd  end
 1833
2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 90.  def grestore  end
 1833 2454
a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@zMax known { /N@zMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.0903 4.30554 0.0 90.  Uput UUput } PutCoor PutBegin
 end
 1833 2454 a 1812
2472 a Fb(z)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833
2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 12.  def /Beta 20.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZall counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0 TeXcolorgray
515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj128} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray
1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 8.  def /Beta
20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def
/Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2
mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid
true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict begin} if
/eulerRotation false def RotSet (set ) eq currentdict /MnewTOold known
not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion def}
{RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion
def} {/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED -1 0 0 1.0 mul /z ED
1.0 mul /y ED 1 mul /x ED ConvertTo2D x2D y2D end   4.41013 mul exch
4.41013 mul exch  } false /N@xMin 10 {InitPnode } /NodeScale {} def
NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 8.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 33 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833
2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 8.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -1 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 8.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 33 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 8.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 -1 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 8.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 55 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@xMax known { /N@xMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@xMin known { /N@xMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@yMax known { /N@yMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@yMin known { /N@yMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@zMax known { /N@zMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@zMin known { /N@zMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 180.  def grestore  end
 1833 2454 a 1833
2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@xMax known { /N@xMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.71527 4.30554 0.0 180.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1809 2472
a Fb(x)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454
a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 1833 2454 a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@yMax known { /N@yMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833
2454 a
tx@Dict begin { 5.0 5.2616 4.30554 1.94444 0.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1811 2464 a Fb(y)1833 2454 y
tx@Dict begin  PutEnd  end
 1833
2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 90.  def grestore  end
 1833 2454
a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@zMax known { /N@zMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.0903 4.30554 0.0 90.  Uput UUput } PutCoor PutBegin
 end
 1833 2454 a 1812
2472 a Fb(z)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833
2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 8.  def /Beta 20.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZall counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0 TeXcolorgray
515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj129} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray
1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 4.  def /Beta
20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def
/Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2
mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid
true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict begin} if
/eulerRotation false def RotSet (set ) eq currentdict /MnewTOold known
not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion def}
{RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion
def} {/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED -1 0 0 1.0 mul /z ED
1.0 mul /y ED 1 mul /x ED ConvertTo2D x2D y2D end   4.41013 mul exch
4.41013 mul exch  } false /N@xMin 10 {InitPnode } /NodeScale {} def
NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 4.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 33 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833
2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 4.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -1 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 4.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 33 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 4.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 -1 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 4.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 55 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@xMax known { /N@xMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@xMin known { /N@xMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@yMax known { /N@yMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@yMin known { /N@yMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@zMax known { /N@zMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@zMin known { /N@zMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 180.  def grestore  end
 1833 2454 a 1833
2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@xMax known { /N@xMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.71527 4.30554 0.0 180.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1809 2472
a Fb(x)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454
a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 1833 2454 a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@yMax known { /N@yMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833
2454 a
tx@Dict begin { 5.0 5.2616 4.30554 1.94444 0.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1811 2464 a Fb(y)1833 2454 y
tx@Dict begin  PutEnd  end
 1833
2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 90.  def grestore  end
 1833 2454
a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@zMax known { /N@zMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.0903 4.30554 0.0 90.  Uput UUput } PutCoor PutBegin
 end
 1833 2454 a 1812
2472 a Fb(z)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833
2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 4.  def /Beta 20.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZall counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0 TeXcolorgray
515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj130} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray
1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 0.  def /Beta
20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def
/Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2
mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid
true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict begin} if
/eulerRotation false def RotSet (set ) eq currentdict /MnewTOold known
not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion def}
{RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion
def} {/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED -1 0 0 1.0 mul /z ED
1.0 mul /y ED 1 mul /x ED ConvertTo2D x2D y2D end   4.41013 mul exch
4.41013 mul exch  } false /N@xMin 10 {InitPnode } /NodeScale {} def
NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 0.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 33 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833
2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 0.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -1 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 0.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 33 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 0.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 -1 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 0.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 55 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@xMax known { /N@xMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@xMin known { /N@xMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@yMax known { /N@yMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@yMin known { /N@yMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@zMax known { /N@zMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@zMin known { /N@zMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 180.  def grestore  end
 1833 2454 a 1833
2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@xMax known { /N@xMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.71527 4.30554 0.0 180.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1809 2472
a Fb(x)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454
a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 1833 2454 a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@yMax known { /N@yMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833
2454 a
tx@Dict begin { 5.0 5.2616 4.30554 1.94444 0.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1811 2464 a Fb(y)1833 2454 y
tx@Dict begin  PutEnd  end
 1833
2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 90.  def grestore  end
 1833 2454
a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@zMax known { /N@zMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.0903 4.30554 0.0 90.  Uput UUput } PutCoor PutBegin
 end
 1833 2454 a 1812
2472 a Fb(z)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833
2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha 0.  def /Beta 20.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZall counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0 TeXcolorgray
515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj131} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray
1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha -4.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -4.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 33 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833
2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -4.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -1 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -4.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 33 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -4.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 -1 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -4.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 55 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@xMax known { /N@xMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@xMin known { /N@xMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@yMax known { /N@yMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@yMin known { /N@yMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@zMax known { /N@zMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@zMin known { /N@zMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 180.  def grestore  end
 1833 2454 a 1833
2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@xMax known { /N@xMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.71527 4.30554 0.0 180.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1809 2472
a Fb(x)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454
a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 1833 2454 a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@yMax known { /N@yMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833
2454 a
tx@Dict begin { 5.0 5.2616 4.30554 1.94444 0.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1811 2464 a Fb(y)1833 2454 y
tx@Dict begin  PutEnd  end
 1833
2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 90.  def grestore  end
 1833 2454
a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@zMax known { /N@zMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.0903 4.30554 0.0 90.  Uput UUput } PutCoor PutBegin
 end
 1833 2454 a 1812
2472 a Fb(z)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833
2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha -4.  def /Beta 20.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZall counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0 TeXcolorgray
515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj132} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray
1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha -8.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -8.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 33 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833
2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -8.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -1 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -8.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 33 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -8.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 -1 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -8.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 55 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@xMax known { /N@xMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@xMin known { /N@xMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@yMax known { /N@yMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@yMin known { /N@yMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@zMax known { /N@zMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@zMin known { /N@zMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 180.  def grestore  end
 1833 2454 a 1833
2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@xMax known { /N@xMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.71527 4.30554 0.0 180.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1809 2472
a Fb(x)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454
a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 1833 2454 a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@yMax known { /N@yMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833
2454 a
tx@Dict begin { 5.0 5.2616 4.30554 1.94444 0.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1811 2464 a Fb(y)1833 2454 y
tx@Dict begin  PutEnd  end
 1833
2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 90.  def grestore  end
 1833 2454
a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@zMax known { /N@zMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.0903 4.30554 0.0 90.  Uput UUput } PutCoor PutBegin
 end
 1833 2454 a 1812
2472 a Fb(z)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833
2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha -8.  def /Beta 20.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZall counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0 TeXcolorgray
515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj133} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray
1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha -12.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -12.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 33 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833
2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -12.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -1 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -12.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 33 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -12.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 -1 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -12.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 55 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@xMax known { /N@xMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@xMin known { /N@xMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@yMax known { /N@yMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@yMin known { /N@yMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@zMax known { /N@zMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@zMin known { /N@zMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 180.  def grestore  end
 1833 2454 a 1833
2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@xMax known { /N@xMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.71527 4.30554 0.0 180.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1809 2472
a Fb(x)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454
a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 1833 2454 a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@yMax known { /N@yMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833
2454 a
tx@Dict begin { 5.0 5.2616 4.30554 1.94444 0.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1811 2464 a Fb(y)1833 2454 y
tx@Dict begin  PutEnd  end
 1833
2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 90.  def grestore  end
 1833 2454
a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@zMax known { /N@zMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.0903 4.30554 0.0 90.  Uput UUput } PutCoor PutBegin
 end
 1833 2454 a 1812
2472 a Fb(z)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833
2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha -12.  def /Beta 20.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZall counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0 TeXcolorgray
515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj134} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray
1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha -16.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -16.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 33 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833
2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -16.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -1 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -16.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 33 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -16.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 -1 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -16.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 55 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@xMax known { /N@xMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@xMin known { /N@xMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@yMax known { /N@yMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@yMin known { /N@yMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@zMax known { /N@zMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@zMin known { /N@zMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 180.  def grestore  end
 1833 2454 a 1833
2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@xMax known { /N@xMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.71527 4.30554 0.0 180.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1809 2472
a Fb(x)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454
a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 1833 2454 a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@yMax known { /N@yMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833
2454 a
tx@Dict begin { 5.0 5.2616 4.30554 1.94444 0.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1811 2464 a Fb(y)1833 2454 y
tx@Dict begin  PutEnd  end
 1833
2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 90.  def grestore  end
 1833 2454
a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@zMax known { /N@zMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.0903 4.30554 0.0 90.  Uput UUput } PutCoor PutBegin
 end
 1833 2454 a 1812
2472 a Fb(z)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833
2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha -16.  def /Beta 20.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZall counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0 TeXcolorgray
515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj135} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray
1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha -20.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -20.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 33 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833
2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -20.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -1 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -20.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 33 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -20.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 -1 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -20.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 55 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@xMax known { /N@xMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@xMin known { /N@xMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@yMax known { /N@yMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@yMin known { /N@yMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@zMax known { /N@zMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@zMin known { /N@zMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 180.  def grestore  end
 1833 2454 a 1833
2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@xMax known { /N@xMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.71527 4.30554 0.0 180.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1809 2472
a Fb(x)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454
a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 1833 2454 a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@yMax known { /N@yMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833
2454 a
tx@Dict begin { 5.0 5.2616 4.30554 1.94444 0.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1811 2464 a Fb(y)1833 2454 y
tx@Dict begin  PutEnd  end
 1833
2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 90.  def grestore  end
 1833 2454
a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@zMax known { /N@zMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.0903 4.30554 0.0 90.  Uput UUput } PutCoor PutBegin
 end
 1833 2454 a 1812
2472 a Fb(z)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833
2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha -20.  def /Beta 20.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZall counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0 TeXcolorgray
515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj136} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray
1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha -24.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -24.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 33 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833
2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -24.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -1 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -24.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 33 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -24.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 -1 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -24.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 55 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@xMax known { /N@xMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@xMin known { /N@xMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@yMax known { /N@yMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@yMin known { /N@yMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@zMax known { /N@zMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@zMin known { /N@zMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 180.  def grestore  end
 1833 2454 a 1833
2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@xMax known { /N@xMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.71527 4.30554 0.0 180.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1809 2472
a Fb(x)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454
a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 1833 2454 a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@yMax known { /N@yMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833
2454 a
tx@Dict begin { 5.0 5.2616 4.30554 1.94444 0.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1811 2464 a Fb(y)1833 2454 y
tx@Dict begin  PutEnd  end
 1833
2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 90.  def grestore  end
 1833 2454
a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@zMax known { /N@zMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.0903 4.30554 0.0 90.  Uput UUput } PutCoor PutBegin
 end
 1833 2454 a 1812
2472 a Fb(z)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833
2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha -24.  def /Beta 20.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZall counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0 TeXcolorgray
515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj137} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray
1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha -28.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -28.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 33 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833
2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -28.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -1 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -28.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 33 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -28.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 -1 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -28.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 55 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@xMax known { /N@xMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@xMin known { /N@xMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@yMax known { /N@yMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@yMin known { /N@yMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@zMax known { /N@zMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@zMin known { /N@zMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 180.  def grestore  end
 1833 2454 a 1833
2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@xMax known { /N@xMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.71527 4.30554 0.0 180.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1809 2472
a Fb(x)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454
a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 1833 2454 a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@yMax known { /N@yMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833
2454 a
tx@Dict begin { 5.0 5.2616 4.30554 1.94444 0.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1811 2464 a Fb(y)1833 2454 y
tx@Dict begin  PutEnd  end
 1833
2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 90.  def grestore  end
 1833 2454
a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@zMax known { /N@zMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.0903 4.30554 0.0 90.  Uput UUput } PutCoor PutBegin
 end
 1833 2454 a 1812
2472 a Fb(z)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833
2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha -28.  def /Beta 20.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZall counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0 TeXcolorgray
515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj138} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray
1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha -32.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -32.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 33 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833
2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -32.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -1 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -32.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 33 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -32.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 -1 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -32.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 55 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@xMax known { /N@xMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@xMin known { /N@xMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@yMax known { /N@yMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@yMin known { /N@yMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@zMax known { /N@zMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@zMin known { /N@zMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 180.  def grestore  end
 1833 2454 a 1833
2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@xMax known { /N@xMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.71527 4.30554 0.0 180.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1809 2472
a Fb(x)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454
a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 1833 2454 a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@yMax known { /N@yMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833
2454 a
tx@Dict begin { 5.0 5.2616 4.30554 1.94444 0.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1811 2464 a Fb(y)1833 2454 y
tx@Dict begin  PutEnd  end
 1833
2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 90.  def grestore  end
 1833 2454
a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@zMax known { /N@zMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.0903 4.30554 0.0 90.  Uput UUput } PutCoor PutBegin
 end
 1833 2454 a 1812
2472 a Fb(z)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833
2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha -32.  def /Beta 20.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZall counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0 TeXcolorgray
515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj139} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray
1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha -36.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -36.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 33 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833
2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -36.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -1 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -36.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 33 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -36.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 -1 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -36.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 55 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@xMax known { /N@xMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@xMin known { /N@xMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@yMax known { /N@yMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@yMin known { /N@yMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@zMax known { /N@zMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@zMin known { /N@zMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 180.  def grestore  end
 1833 2454 a 1833
2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@xMax known { /N@xMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.71527 4.30554 0.0 180.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1809 2472
a Fb(x)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454
a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 1833 2454 a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@yMax known { /N@yMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833
2454 a
tx@Dict begin { 5.0 5.2616 4.30554 1.94444 0.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1811 2464 a Fb(y)1833 2454 y
tx@Dict begin  PutEnd  end
 1833
2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 90.  def grestore  end
 1833 2454
a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@zMax known { /N@zMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.0903 4.30554 0.0 90.  Uput UUput } PutCoor PutBegin
 end
 1833 2454 a 1812
2472 a Fb(z)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833
2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha -36.  def /Beta 20.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZall counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0 TeXcolorgray
515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj140} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray
1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha -40.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -40.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 33 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833
2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -40.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -1 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -40.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 33 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -40.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 -1 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -40.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 55 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@xMax known { /N@xMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@xMin known { /N@xMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@yMax known { /N@yMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@yMin known { /N@yMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@zMax known { /N@zMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@zMin known { /N@zMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 180.  def grestore  end
 1833 2454 a 1833
2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@xMax known { /N@xMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.71527 4.30554 0.0 180.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1809 2472
a Fb(x)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454
a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 1833 2454 a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@yMax known { /N@yMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833
2454 a
tx@Dict begin { 5.0 5.2616 4.30554 1.94444 0.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1811 2464 a Fb(y)1833 2454 y
tx@Dict begin  PutEnd  end
 1833
2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 90.  def grestore  end
 1833 2454
a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@zMax known { /N@zMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.0903 4.30554 0.0 90.  Uput UUput } PutCoor PutBegin
 end
 1833 2454 a 1812
2472 a Fb(z)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833
2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha -40.  def /Beta 20.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZall counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0 TeXcolorgray
515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj141} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray
1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha -44.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -44.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 33 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833
2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -44.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -1 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -44.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 33 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -44.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 -1 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -44.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 55 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@xMax known { /N@xMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@xMin known { /N@xMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@yMax known { /N@yMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@yMin known { /N@yMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@zMax known { /N@zMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@zMin known { /N@zMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 180.  def grestore  end
 1833 2454 a 1833
2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@xMax known { /N@xMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.71527 4.30554 0.0 180.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1809 2472
a Fb(x)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454
a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 1833 2454 a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@yMax known { /N@yMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833
2454 a
tx@Dict begin { 5.0 5.2616 4.30554 1.94444 0.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1811 2464 a Fb(y)1833 2454 y
tx@Dict begin  PutEnd  end
 1833
2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 90.  def grestore  end
 1833 2454
a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@zMax known { /N@zMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.0903 4.30554 0.0 90.  Uput UUput } PutCoor PutBegin
 end
 1833 2454 a 1812
2472 a Fb(z)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833
2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha -44.  def /Beta 20.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZall counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0 TeXcolorgray
515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj142} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray
1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha -48.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -48.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 33 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833
2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -48.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -1 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -48.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 33 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -48.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 -1 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -48.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 55 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@xMax known { /N@xMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@xMin known { /N@xMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@yMax known { /N@yMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@yMin known { /N@yMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@zMax known { /N@zMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@zMin known { /N@zMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 180.  def grestore  end
 1833 2454 a 1833
2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@xMax known { /N@xMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.71527 4.30554 0.0 180.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1809 2472
a Fb(x)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454
a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 1833 2454 a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@yMax known { /N@yMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833
2454 a
tx@Dict begin { 5.0 5.2616 4.30554 1.94444 0.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1811 2464 a Fb(y)1833 2454 y
tx@Dict begin  PutEnd  end
 1833
2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 90.  def grestore  end
 1833 2454
a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@zMax known { /N@zMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.0903 4.30554 0.0 90.  Uput UUput } PutCoor PutBegin
 end
 1833 2454 a 1812
2472 a Fb(z)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833
2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha -48.  def /Beta 20.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZall counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0 TeXcolorgray
515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj143} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray
1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha -52.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -52.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 33 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833
2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -52.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -1 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -52.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 33 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -52.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 -1 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -52.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 55 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@xMax known { /N@xMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@xMin known { /N@xMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@yMax known { /N@yMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@yMin known { /N@yMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@zMax known { /N@zMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@zMin known { /N@zMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 180.  def grestore  end
 1833 2454 a 1833
2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@xMax known { /N@xMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.71527 4.30554 0.0 180.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1809 2472
a Fb(x)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454
a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 1833 2454 a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@yMax known { /N@yMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833
2454 a
tx@Dict begin { 5.0 5.2616 4.30554 1.94444 0.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1811 2464 a Fb(y)1833 2454 y
tx@Dict begin  PutEnd  end
 1833
2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 90.  def grestore  end
 1833 2454
a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@zMax known { /N@zMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.0903 4.30554 0.0 90.  Uput UUput } PutCoor PutBegin
 end
 1833 2454 a 1812
2472 a Fb(z)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833
2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha -52.  def /Beta 20.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZall counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0 TeXcolorgray
515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj144} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray
1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha -56.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -56.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 33 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833
2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -56.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -1 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -56.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 33 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -56.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 -1 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -56.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 55 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@xMax known { /N@xMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@xMin known { /N@xMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@yMax known { /N@yMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@yMin known { /N@yMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@zMax known { /N@zMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@zMin known { /N@zMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 180.  def grestore  end
 1833 2454 a 1833
2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@xMax known { /N@xMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.71527 4.30554 0.0 180.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1809 2472
a Fb(x)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454
a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 1833 2454 a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@yMax known { /N@yMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833
2454 a
tx@Dict begin { 5.0 5.2616 4.30554 1.94444 0.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1811 2464 a Fb(y)1833 2454 y
tx@Dict begin  PutEnd  end
 1833
2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 90.  def grestore  end
 1833 2454
a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@zMax known { /N@zMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.0903 4.30554 0.0 90.  Uput UUput } PutCoor PutBegin
 end
 1833 2454 a 1812
2472 a Fb(z)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833
2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha -56.  def /Beta 20.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZall counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0 TeXcolorgray
515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj145} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray
1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha -60.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -60.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 33 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833
2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -60.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -1 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -60.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 33 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -60.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 -1 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -60.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 55 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@xMax known { /N@xMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@xMin known { /N@xMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@yMax known { /N@yMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@yMin known { /N@yMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@zMax known { /N@zMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@zMin known { /N@zMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 180.  def grestore  end
 1833 2454 a 1833
2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@xMax known { /N@xMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.71527 4.30554 0.0 180.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1809 2472
a Fb(x)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454
a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 1833 2454 a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@yMax known { /N@yMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833
2454 a
tx@Dict begin { 5.0 5.2616 4.30554 1.94444 0.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1811 2464 a Fb(y)1833 2454 y
tx@Dict begin  PutEnd  end
 1833
2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 90.  def grestore  end
 1833 2454
a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@zMax known { /N@zMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.0903 4.30554 0.0 90.  Uput UUput } PutCoor PutBegin
 end
 1833 2454 a 1812
2472 a Fb(z)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833
2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha -60.  def /Beta 20.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZall counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0 TeXcolorgray
515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj146} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray
1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha -64.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -64.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 33 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833
2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -64.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -1 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -64.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 33 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -64.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 -1 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -64.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 55 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@xMax known { /N@xMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@xMin known { /N@xMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@yMax known { /N@yMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@yMin known { /N@yMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@zMax known { /N@zMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@zMin known { /N@zMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 180.  def grestore  end
 1833 2454 a 1833
2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@xMax known { /N@xMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.71527 4.30554 0.0 180.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1809 2472
a Fb(x)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454
a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 1833 2454 a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@yMax known { /N@yMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833
2454 a
tx@Dict begin { 5.0 5.2616 4.30554 1.94444 0.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1811 2464 a Fb(y)1833 2454 y
tx@Dict begin  PutEnd  end
 1833
2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 90.  def grestore  end
 1833 2454
a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@zMax known { /N@zMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.0903 4.30554 0.0 90.  Uput UUput } PutCoor PutBegin
 end
 1833 2454 a 1812
2472 a Fb(z)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833
2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha -64.  def /Beta 20.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZall counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0 TeXcolorgray
515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj147} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray
1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha -68.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -68.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 33 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833
2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -68.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -1 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -68.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 33 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -68.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 -1 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -68.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 55 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@xMax known { /N@xMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@xMin known { /N@xMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@yMax known { /N@yMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@yMin known { /N@yMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@zMax known { /N@zMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@zMin known { /N@zMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 180.  def grestore  end
 1833 2454 a 1833
2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@xMax known { /N@xMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.71527 4.30554 0.0 180.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1809 2472
a Fb(x)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454
a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 1833 2454 a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@yMax known { /N@yMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833
2454 a
tx@Dict begin { 5.0 5.2616 4.30554 1.94444 0.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1811 2464 a Fb(y)1833 2454 y
tx@Dict begin  PutEnd  end
 1833
2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 90.  def grestore  end
 1833 2454
a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@zMax known { /N@zMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.0903 4.30554 0.0 90.  Uput UUput } PutCoor PutBegin
 end
 1833 2454 a 1812
2472 a Fb(z)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833
2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha -68.  def /Beta 20.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZall counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0 TeXcolorgray
515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj148} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray
1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha -72.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -72.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 33 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833
2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -72.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -1 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -72.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 33 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -72.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 -1 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -72.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 55 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@xMax known { /N@xMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@xMin known { /N@xMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@yMax known { /N@yMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@yMin known { /N@yMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@zMax known { /N@zMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@zMin known { /N@zMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 180.  def grestore  end
 1833 2454 a 1833
2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@xMax known { /N@xMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.71527 4.30554 0.0 180.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1809 2472
a Fb(x)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454
a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 1833 2454 a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@yMax known { /N@yMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833
2454 a
tx@Dict begin { 5.0 5.2616 4.30554 1.94444 0.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1811 2464 a Fb(y)1833 2454 y
tx@Dict begin  PutEnd  end
 1833
2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 90.  def grestore  end
 1833 2454
a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@zMax known { /N@zMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.0903 4.30554 0.0 90.  Uput UUput } PutCoor PutBegin
 end
 1833 2454 a 1812
2472 a Fb(z)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833
2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha -72.  def /Beta 20.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZall counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0 TeXcolorgray
515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj149} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray
1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha -76.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -76.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 33 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833
2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -76.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -1 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -76.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 33 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -76.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 -1 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -76.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 55 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@xMax known { /N@xMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@xMin known { /N@xMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@yMax known { /N@yMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@yMin known { /N@yMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@zMax known { /N@zMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@zMin known { /N@zMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 180.  def grestore  end
 1833 2454 a 1833
2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@xMax known { /N@xMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.71527 4.30554 0.0 180.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1809 2472
a Fb(x)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454
a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 1833 2454 a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@yMax known { /N@yMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833
2454 a
tx@Dict begin { 5.0 5.2616 4.30554 1.94444 0.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1811 2464 a Fb(y)1833 2454 y
tx@Dict begin  PutEnd  end
 1833
2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 90.  def grestore  end
 1833 2454
a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@zMax known { /N@zMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.0903 4.30554 0.0 90.  Uput UUput } PutCoor PutBegin
 end
 1833 2454 a 1812
2472 a Fb(z)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833
2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha -76.  def /Beta 20.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZall counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0 TeXcolorgray
515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj150} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray
1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha -80.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -80.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 33 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833
2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -80.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -1 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -80.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 33 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -80.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 -1 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -80.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 55 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@xMax known { /N@xMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@xMin known { /N@xMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@yMax known { /N@yMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@yMin known { /N@yMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@zMax known { /N@zMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@zMin known { /N@zMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 180.  def grestore  end
 1833 2454 a 1833
2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@xMax known { /N@xMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.71527 4.30554 0.0 180.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1809 2472
a Fb(x)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454
a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 1833 2454 a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@yMax known { /N@yMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833
2454 a
tx@Dict begin { 5.0 5.2616 4.30554 1.94444 0.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1811 2464 a Fb(y)1833 2454 y
tx@Dict begin  PutEnd  end
 1833
2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 90.  def grestore  end
 1833 2454
a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@zMax known { /N@zMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.0903 4.30554 0.0 90.  Uput UUput } PutCoor PutBegin
 end
 1833 2454 a 1812
2472 a Fb(z)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833
2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha -80.  def /Beta 20.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZall counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0 TeXcolorgray
515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj151} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray
1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha -84.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -84.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 33 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833
2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -84.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -1 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -84.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 33 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -84.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 -1 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -84.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 55 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@xMax known { /N@xMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@xMin known { /N@xMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@yMax known { /N@yMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@yMin known { /N@yMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@zMax known { /N@zMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@zMin known { /N@zMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 180.  def grestore  end
 1833 2454 a 1833
2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@xMax known { /N@xMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.71527 4.30554 0.0 180.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1809 2472
a Fb(x)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454
a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 1833 2454 a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@yMax known { /N@yMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833
2454 a
tx@Dict begin { 5.0 5.2616 4.30554 1.94444 0.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1811 2464 a Fb(y)1833 2454 y
tx@Dict begin  PutEnd  end
 1833
2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 90.  def grestore  end
 1833 2454
a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@zMax known { /N@zMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.0903 4.30554 0.0 90.  Uput UUput } PutCoor PutBegin
 end
 1833 2454 a 1812
2472 a Fb(z)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833
2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha -84.  def /Beta 20.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZall counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0 TeXcolorgray
515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj152} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray
1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha -88.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -88.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 33 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833
2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -88.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -1 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -88.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 33 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -88.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 -1 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -88.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 55 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@xMax known { /N@xMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@xMin known { /N@xMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@yMax known { /N@yMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@yMin known { /N@yMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@zMax known { /N@zMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@zMin known { /N@zMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 180.  def grestore  end
 1833 2454 a 1833
2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@xMax known { /N@xMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.71527 4.30554 0.0 180.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1809 2472
a Fb(x)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454
a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 1833 2454 a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@yMax known { /N@yMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833
2454 a
tx@Dict begin { 5.0 5.2616 4.30554 1.94444 0.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1811 2464 a Fb(y)1833 2454 y
tx@Dict begin  PutEnd  end
 1833
2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 90.  def grestore  end
 1833 2454
a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@zMax known { /N@zMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.0903 4.30554 0.0 90.  Uput UUput } PutCoor PutBegin
 end
 1833 2454 a 1812
2472 a Fb(z)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833
2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha -88.  def /Beta 20.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZall counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0 TeXcolorgray
515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj153} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray
1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha -92.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -92.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 33 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833
2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -92.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -1 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -92.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 33 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -92.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 -1 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -92.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 55 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@xMax known { /N@xMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@xMin known { /N@xMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@yMax known { /N@yMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@yMin known { /N@yMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@zMax known { /N@zMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@zMin known { /N@zMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 180.  def grestore  end
 1833 2454 a 1833
2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@xMax known { /N@xMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.71527 4.30554 0.0 180.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1809 2472
a Fb(x)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454
a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 1833 2454 a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@yMax known { /N@yMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833
2454 a
tx@Dict begin { 5.0 5.2616 4.30554 1.94444 0.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1811 2464 a Fb(y)1833 2454 y
tx@Dict begin  PutEnd  end
 1833
2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 90.  def grestore  end
 1833 2454
a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@zMax known { /N@zMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.0903 4.30554 0.0 90.  Uput UUput } PutCoor PutBegin
 end
 1833 2454 a 1812
2472 a Fb(z)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833
2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha -92.  def /Beta 20.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZall counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0 TeXcolorgray
515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj154} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray
1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha -96.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -96.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 33 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833
2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -96.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -1 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -96.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 33 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -96.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 -1 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -96.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 55 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@xMax known { /N@xMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@xMin known { /N@xMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@yMax known { /N@yMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@yMin known { /N@yMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@zMax known { /N@zMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@zMin known { /N@zMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 180.  def grestore  end
 1833 2454 a 1833
2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@xMax known { /N@xMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.71527 4.30554 0.0 180.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1809 2472
a Fb(x)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454
a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 1833 2454 a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@yMax known { /N@yMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833
2454 a
tx@Dict begin { 5.0 5.2616 4.30554 1.94444 0.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1811 2464 a Fb(y)1833 2454 y
tx@Dict begin  PutEnd  end
 1833
2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 90.  def grestore  end
 1833 2454
a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@zMax known { /N@zMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.0903 4.30554 0.0 90.  Uput UUput } PutCoor PutBegin
 end
 1833 2454 a 1812
2472 a Fb(z)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833
2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha -96.  def /Beta 20.  def /Sin1 Beta sin
def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2
Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul
def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /D {} def mark  lorenzXYZall counttomark dup dup cvi
eq not { exch pop } if /m exch def /n m 3 div cvi def n { tx@3DPlotDict
begin saveCoor ConvertTo2D x2D 4.41013 mul y2D 4.41013 mul end m 1
sub 1 roll m 1 sub 1 roll /m m 3 sub def } repeat   /Lineto /lineto
load def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0 TeXcolorgray
515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj155} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray
1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha -100.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -100.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 33 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833
2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -100.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -1 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -100.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 33 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -100.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 -1 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -100.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 55 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@xMax known { /N@xMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@xMin known { /N@xMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@yMax known { /N@yMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@yMin known { /N@yMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@zMax known { /N@zMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@zMin known { /N@zMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 180.  def grestore  end
 1833 2454 a 1833
2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@xMax known { /N@xMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.71527 4.30554 0.0 180.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1809 2472
a Fb(x)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454
a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 1833 2454 a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@yMax known { /N@yMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833
2454 a
tx@Dict begin { 5.0 5.2616 4.30554 1.94444 0.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1811 2464 a Fb(y)1833 2454 y
tx@Dict begin  PutEnd  end
 1833
2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 90.  def grestore  end
 1833 2454
a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@zMax known { /N@zMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.0903 4.30554 0.0 90.  Uput UUput } PutCoor PutBegin
 end
 1833 2454 a 1812
2472 a Fb(z)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833
2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha -100.  def /Beta 20.  def /Sin1 Beta
sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def
/Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1
Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /D {} def mark  lorenzXYZall
counttomark dup dup cvi eq not { exch pop } if /m exch def /n m 3 div
cvi def n { tx@3DPlotDict begin saveCoor ConvertTo2D x2D 4.41013 mul
y2D 4.41013 mul end m 1 sub 1 roll m 1 sub 1 roll /m m 3 sub def }
repeat   /Lineto /lineto load def 1  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul
add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 0 TeXcolorgray
515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj156} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray
1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha -104.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -104.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 33 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833
2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -104.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -1 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -104.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 33 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -104.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 -1 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -104.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 55 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@xMax known { /N@xMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@xMin known { /N@xMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@yMax known { /N@yMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@yMin known { /N@yMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@zMax known { /N@zMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@zMin known { /N@zMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 180.  def grestore  end
 1833 2454 a 1833
2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@xMax known { /N@xMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.71527 4.30554 0.0 180.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1809 2472
a Fb(x)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454
a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 1833 2454 a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@yMax known { /N@yMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833
2454 a
tx@Dict begin { 5.0 5.2616 4.30554 1.94444 0.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1811 2464 a Fb(y)1833 2454 y
tx@Dict begin  PutEnd  end
 1833
2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 90.  def grestore  end
 1833 2454
a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@zMax known { /N@zMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.0903 4.30554 0.0 90.  Uput UUput } PutCoor PutBegin
 end
 1833 2454 a 1812
2472 a Fb(z)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833
2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha -104.  def /Beta 20.  def /Sin1 Beta
sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def
/Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1
Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /D {} def mark  lorenzXYZall
counttomark dup dup cvi eq not { exch pop } if /m exch def /n m 3 div
cvi def n { tx@3DPlotDict begin saveCoor ConvertTo2D x2D 4.41013 mul
y2D 4.41013 mul end m 1 sub 1 roll m 1 sub 1 roll /m m 3 sub def }
repeat   /Lineto /lineto load def 1  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul
add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 0 TeXcolorgray
515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj157} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray
1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha -108.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -108.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 33 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833
2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -108.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -1 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -108.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 33 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -108.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 -1 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -108.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 55 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@xMax known { /N@xMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@xMin known { /N@xMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@yMax known { /N@yMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@yMin known { /N@yMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@zMax known { /N@zMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@zMin known { /N@zMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 180.  def grestore  end
 1833 2454 a 1833
2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@xMax known { /N@xMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.71527 4.30554 0.0 180.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1809 2472
a Fb(x)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454
a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 1833 2454 a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@yMax known { /N@yMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833
2454 a
tx@Dict begin { 5.0 5.2616 4.30554 1.94444 0.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1811 2464 a Fb(y)1833 2454 y
tx@Dict begin  PutEnd  end
 1833
2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 90.  def grestore  end
 1833 2454
a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@zMax known { /N@zMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.0903 4.30554 0.0 90.  Uput UUput } PutCoor PutBegin
 end
 1833 2454 a 1812
2472 a Fb(z)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833
2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha -108.  def /Beta 20.  def /Sin1 Beta
sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def
/Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1
Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /D {} def mark  lorenzXYZall
counttomark dup dup cvi eq not { exch pop } if /m exch def /n m 3 div
cvi def n { tx@3DPlotDict begin saveCoor ConvertTo2D x2D 4.41013 mul
y2D 4.41013 mul end m 1 sub 1 roll m 1 sub 1 roll /m m 3 sub def }
repeat   /Lineto /lineto load def 1  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul
add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 0 TeXcolorgray
515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj158} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray
1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha -112.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -112.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 33 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833
2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -112.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -1 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -112.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 33 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -112.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 -1 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -112.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 55 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@xMax known { /N@xMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@xMin known { /N@xMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@yMax known { /N@yMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@yMin known { /N@yMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@zMax known { /N@zMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@zMin known { /N@zMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 180.  def grestore  end
 1833 2454 a 1833
2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@xMax known { /N@xMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.71527 4.30554 0.0 180.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1809 2472
a Fb(x)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454
a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 1833 2454 a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@yMax known { /N@yMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833
2454 a
tx@Dict begin { 5.0 5.2616 4.30554 1.94444 0.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1811 2464 a Fb(y)1833 2454 y
tx@Dict begin  PutEnd  end
 1833
2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 90.  def grestore  end
 1833 2454
a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@zMax known { /N@zMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.0903 4.30554 0.0 90.  Uput UUput } PutCoor PutBegin
 end
 1833 2454 a 1812
2472 a Fb(z)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833
2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha -112.  def /Beta 20.  def /Sin1 Beta
sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def
/Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1
Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /D {} def mark  lorenzXYZall
counttomark dup dup cvi eq not { exch pop } if /m exch def /n m 3 div
cvi def n { tx@3DPlotDict begin saveCoor ConvertTo2D x2D 4.41013 mul
y2D 4.41013 mul end m 1 sub 1 roll m 1 sub 1 roll /m m 3 sub def }
repeat   /Lineto /lineto load def 1  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul
add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 0 TeXcolorgray
515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj159} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray
1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha -116.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -116.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 33 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833
2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -116.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -1 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -116.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 33 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -116.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 -1 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -116.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 55 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@xMax known { /N@xMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@xMin known { /N@xMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@yMax known { /N@yMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@yMin known { /N@yMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@zMax known { /N@zMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@zMin known { /N@zMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 180.  def grestore  end
 1833 2454 a 1833
2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@xMax known { /N@xMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.71527 4.30554 0.0 180.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1809 2472
a Fb(x)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454
a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 1833 2454 a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@yMax known { /N@yMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833
2454 a
tx@Dict begin { 5.0 5.2616 4.30554 1.94444 0.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1811 2464 a Fb(y)1833 2454 y
tx@Dict begin  PutEnd  end
 1833
2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 90.  def grestore  end
 1833 2454
a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@zMax known { /N@zMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.0903 4.30554 0.0 90.  Uput UUput } PutCoor PutBegin
 end
 1833 2454 a 1812
2472 a Fb(z)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833
2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha -116.  def /Beta 20.  def /Sin1 Beta
sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def
/Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1
Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /D {} def mark  lorenzXYZall
counttomark dup dup cvi eq not { exch pop } if /m exch def /n m 3 div
cvi def n { tx@3DPlotDict begin saveCoor ConvertTo2D x2D 4.41013 mul
y2D 4.41013 mul end m 1 sub 1 roll m 1 sub 1 roll /m m 3 sub def }
repeat   /Lineto /lineto load def 1  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul
add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 0 TeXcolorgray
515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj160} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray
1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha -120.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -120.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 33 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833
2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -120.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -1 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -120.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 33 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -120.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 -1 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -120.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 55 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@xMax known { /N@xMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@xMin known { /N@xMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@yMax known { /N@yMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@yMin known { /N@yMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@zMax known { /N@zMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@zMin known { /N@zMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 180.  def grestore  end
 1833 2454 a 1833
2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@xMax known { /N@xMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.71527 4.30554 0.0 180.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1809 2472
a Fb(x)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454
a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 1833 2454 a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@yMax known { /N@yMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833
2454 a
tx@Dict begin { 5.0 5.2616 4.30554 1.94444 0.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1811 2464 a Fb(y)1833 2454 y
tx@Dict begin  PutEnd  end
 1833
2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 90.  def grestore  end
 1833 2454
a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@zMax known { /N@zMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.0903 4.30554 0.0 90.  Uput UUput } PutCoor PutBegin
 end
 1833 2454 a 1812
2472 a Fb(z)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833
2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha -120.  def /Beta 20.  def /Sin1 Beta
sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def
/Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1
Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /D {} def mark  lorenzXYZall
counttomark dup dup cvi eq not { exch pop } if /m exch def /n m 3 div
cvi def n { tx@3DPlotDict begin saveCoor ConvertTo2D x2D 4.41013 mul
y2D 4.41013 mul end m 1 sub 1 roll m 1 sub 1 roll /m m 3 sub def }
repeat   /Lineto /lineto load def 1  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul
add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 0 TeXcolorgray
515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj161} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray
1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha -124.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -124.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 33 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833
2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -124.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -1 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -124.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 33 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -124.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 -1 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -124.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 55 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@xMax known { /N@xMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@xMin known { /N@xMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@yMax known { /N@yMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@yMin known { /N@yMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@zMax known { /N@zMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@zMin known { /N@zMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 180.  def grestore  end
 1833 2454 a 1833
2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@xMax known { /N@xMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.71527 4.30554 0.0 180.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1809 2472
a Fb(x)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454
a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 1833 2454 a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@yMax known { /N@yMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833
2454 a
tx@Dict begin { 5.0 5.2616 4.30554 1.94444 0.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1811 2464 a Fb(y)1833 2454 y
tx@Dict begin  PutEnd  end
 1833
2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 90.  def grestore  end
 1833 2454
a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@zMax known { /N@zMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.0903 4.30554 0.0 90.  Uput UUput } PutCoor PutBegin
 end
 1833 2454 a 1812
2472 a Fb(z)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833
2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha -124.  def /Beta 20.  def /Sin1 Beta
sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def
/Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1
Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /D {} def mark  lorenzXYZall
counttomark dup dup cvi eq not { exch pop } if /m exch def /n m 3 div
cvi def n { tx@3DPlotDict begin saveCoor ConvertTo2D x2D 4.41013 mul
y2D 4.41013 mul end m 1 sub 1 roll m 1 sub 1 roll /m m 3 sub def }
repeat   /Lineto /lineto load def 1  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul
add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 0 TeXcolorgray
515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj162} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray
1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha -128.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -128.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 33 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833
2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -128.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -1 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -128.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 33 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -128.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 -1 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -128.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 55 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@xMax known { /N@xMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@xMin known { /N@xMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@yMax known { /N@yMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@yMin known { /N@yMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@zMax known { /N@zMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@zMin known { /N@zMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 180.  def grestore  end
 1833 2454 a 1833
2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@xMax known { /N@xMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.71527 4.30554 0.0 180.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1809 2472
a Fb(x)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454
a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 1833 2454 a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@yMax known { /N@yMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833
2454 a
tx@Dict begin { 5.0 5.2616 4.30554 1.94444 0.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1811 2464 a Fb(y)1833 2454 y
tx@Dict begin  PutEnd  end
 1833
2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 90.  def grestore  end
 1833 2454
a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@zMax known { /N@zMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.0903 4.30554 0.0 90.  Uput UUput } PutCoor PutBegin
 end
 1833 2454 a 1812
2472 a Fb(z)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833
2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha -128.  def /Beta 20.  def /Sin1 Beta
sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def
/Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1
Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /D {} def mark  lorenzXYZall
counttomark dup dup cvi eq not { exch pop } if /m exch def /n m 3 div
cvi def n { tx@3DPlotDict begin saveCoor ConvertTo2D x2D 4.41013 mul
y2D 4.41013 mul end m 1 sub 1 roll m 1 sub 1 roll /m m 3 sub def }
repeat   /Lineto /lineto load def 1  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul
add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 0 TeXcolorgray
515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj163} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray
1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha -132.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -132.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 33 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833
2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -132.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -1 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -132.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 33 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -132.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 -1 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -132.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 55 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@xMax known { /N@xMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@xMin known { /N@xMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@yMax known { /N@yMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@yMin known { /N@yMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@zMax known { /N@zMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@zMin known { /N@zMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 180.  def grestore  end
 1833 2454 a 1833
2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@xMax known { /N@xMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.71527 4.30554 0.0 180.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1809 2472
a Fb(x)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454
a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 1833 2454 a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@yMax known { /N@yMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833
2454 a
tx@Dict begin { 5.0 5.2616 4.30554 1.94444 0.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1811 2464 a Fb(y)1833 2454 y
tx@Dict begin  PutEnd  end
 1833
2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 90.  def grestore  end
 1833 2454
a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@zMax known { /N@zMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.0903 4.30554 0.0 90.  Uput UUput } PutCoor PutBegin
 end
 1833 2454 a 1812
2472 a Fb(z)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833
2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha -132.  def /Beta 20.  def /Sin1 Beta
sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def
/Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1
Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /D {} def mark  lorenzXYZall
counttomark dup dup cvi eq not { exch pop } if /m exch def /n m 3 div
cvi def n { tx@3DPlotDict begin saveCoor ConvertTo2D x2D 4.41013 mul
y2D 4.41013 mul end m 1 sub 1 roll m 1 sub 1 roll /m m 3 sub def }
repeat   /Lineto /lineto load def 1  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul
add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 0 TeXcolorgray
515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj164} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray
1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha -136.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -136.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 33 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833
2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -136.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -1 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -136.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 33 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -136.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 -1 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -136.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 55 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@xMax known { /N@xMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@xMin known { /N@xMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@yMax known { /N@yMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@yMin known { /N@yMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@zMax known { /N@zMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@zMin known { /N@zMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 180.  def grestore  end
 1833 2454 a 1833
2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@xMax known { /N@xMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.71527 4.30554 0.0 180.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1809 2472
a Fb(x)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454
a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 1833 2454 a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@yMax known { /N@yMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833
2454 a
tx@Dict begin { 5.0 5.2616 4.30554 1.94444 0.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1811 2464 a Fb(y)1833 2454 y
tx@Dict begin  PutEnd  end
 1833
2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 90.  def grestore  end
 1833 2454
a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@zMax known { /N@zMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.0903 4.30554 0.0 90.  Uput UUput } PutCoor PutBegin
 end
 1833 2454 a 1812
2472 a Fb(z)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833
2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha -136.  def /Beta 20.  def /Sin1 Beta
sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def
/Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1
Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /D {} def mark  lorenzXYZall
counttomark dup dup cvi eq not { exch pop } if /m exch def /n m 3 div
cvi def n { tx@3DPlotDict begin saveCoor ConvertTo2D x2D 4.41013 mul
y2D 4.41013 mul end m 1 sub 1 roll m 1 sub 1 roll /m m 3 sub def }
repeat   /Lineto /lineto load def 1  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul
add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 0 TeXcolorgray
515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj165} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray
1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha -140.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -140.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 33 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833
2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -140.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -1 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -140.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 33 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -140.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 -1 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -140.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 55 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@xMax known { /N@xMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@xMin known { /N@xMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@yMax known { /N@yMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@yMin known { /N@yMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@zMax known { /N@zMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@zMin known { /N@zMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 180.  def grestore  end
 1833 2454 a 1833
2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@xMax known { /N@xMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.71527 4.30554 0.0 180.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1809 2472
a Fb(x)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454
a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 1833 2454 a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@yMax known { /N@yMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833
2454 a
tx@Dict begin { 5.0 5.2616 4.30554 1.94444 0.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1811 2464 a Fb(y)1833 2454 y
tx@Dict begin  PutEnd  end
 1833
2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 90.  def grestore  end
 1833 2454
a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@zMax known { /N@zMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.0903 4.30554 0.0 90.  Uput UUput } PutCoor PutBegin
 end
 1833 2454 a 1812
2472 a Fb(z)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833
2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha -140.  def /Beta 20.  def /Sin1 Beta
sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def
/Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1
Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /D {} def mark  lorenzXYZall
counttomark dup dup cvi eq not { exch pop } if /m exch def /n m 3 div
cvi def n { tx@3DPlotDict begin saveCoor ConvertTo2D x2D 4.41013 mul
y2D 4.41013 mul end m 1 sub 1 roll m 1 sub 1 roll /m m 3 sub def }
repeat   /Lineto /lineto load def 1  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul
add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 0 TeXcolorgray
515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj166} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray
1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha -144.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -144.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 33 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833
2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -144.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -1 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -144.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 33 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -144.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 -1 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -144.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 55 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@xMax known { /N@xMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@xMin known { /N@xMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@yMax known { /N@yMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@yMin known { /N@yMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@zMax known { /N@zMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@zMin known { /N@zMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 180.  def grestore  end
 1833 2454 a 1833
2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@xMax known { /N@xMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.71527 4.30554 0.0 180.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1809 2472
a Fb(x)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454
a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 1833 2454 a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@yMax known { /N@yMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833
2454 a
tx@Dict begin { 5.0 5.2616 4.30554 1.94444 0.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1811 2464 a Fb(y)1833 2454 y
tx@Dict begin  PutEnd  end
 1833
2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 90.  def grestore  end
 1833 2454
a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@zMax known { /N@zMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.0903 4.30554 0.0 90.  Uput UUput } PutCoor PutBegin
 end
 1833 2454 a 1812
2472 a Fb(z)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833
2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha -144.  def /Beta 20.  def /Sin1 Beta
sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def
/Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1
Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /D {} def mark  lorenzXYZall
counttomark dup dup cvi eq not { exch pop } if /m exch def /n m 3 div
cvi def n { tx@3DPlotDict begin saveCoor ConvertTo2D x2D 4.41013 mul
y2D 4.41013 mul end m 1 sub 1 roll m 1 sub 1 roll /m m 3 sub def }
repeat   /Lineto /lineto load def 1  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul
add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 0 TeXcolorgray
515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj167} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray
1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha -148.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -148.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 33 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833
2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -148.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -1 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -148.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 33 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -148.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 -1 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -148.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 55 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@xMax known { /N@xMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@xMin known { /N@xMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@yMax known { /N@yMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@yMin known { /N@yMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@zMax known { /N@zMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@zMin known { /N@zMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 180.  def grestore  end
 1833 2454 a 1833
2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@xMax known { /N@xMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.71527 4.30554 0.0 180.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1809 2472
a Fb(x)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454
a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 1833 2454 a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@yMax known { /N@yMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833
2454 a
tx@Dict begin { 5.0 5.2616 4.30554 1.94444 0.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1811 2464 a Fb(y)1833 2454 y
tx@Dict begin  PutEnd  end
 1833
2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 90.  def grestore  end
 1833 2454
a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@zMax known { /N@zMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.0903 4.30554 0.0 90.  Uput UUput } PutCoor PutBegin
 end
 1833 2454 a 1812
2472 a Fb(z)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833
2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha -148.  def /Beta 20.  def /Sin1 Beta
sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def
/Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1
Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /D {} def mark  lorenzXYZall
counttomark dup dup cvi eq not { exch pop } if /m exch def /n m 3 div
cvi def n { tx@3DPlotDict begin saveCoor ConvertTo2D x2D 4.41013 mul
y2D 4.41013 mul end m 1 sub 1 roll m 1 sub 1 roll /m m 3 sub def }
repeat   /Lineto /lineto load def 1  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul
add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 0 TeXcolorgray
515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj168} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray
1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha -152.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -152.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 33 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833
2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -152.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -1 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -152.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 33 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -152.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 -1 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -152.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 55 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@xMax known { /N@xMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@xMin known { /N@xMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@yMax known { /N@yMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@yMin known { /N@yMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@zMax known { /N@zMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@zMin known { /N@zMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 180.  def grestore  end
 1833 2454 a 1833
2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@xMax known { /N@xMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.71527 4.30554 0.0 180.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1809 2472
a Fb(x)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454
a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 1833 2454 a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@yMax known { /N@yMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833
2454 a
tx@Dict begin { 5.0 5.2616 4.30554 1.94444 0.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1811 2464 a Fb(y)1833 2454 y
tx@Dict begin  PutEnd  end
 1833
2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 90.  def grestore  end
 1833 2454
a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@zMax known { /N@zMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.0903 4.30554 0.0 90.  Uput UUput } PutCoor PutBegin
 end
 1833 2454 a 1812
2472 a Fb(z)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833
2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha -152.  def /Beta 20.  def /Sin1 Beta
sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def
/Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1
Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /D {} def mark  lorenzXYZall
counttomark dup dup cvi eq not { exch pop } if /m exch def /n m 3 div
cvi def n { tx@3DPlotDict begin saveCoor ConvertTo2D x2D 4.41013 mul
y2D 4.41013 mul end m 1 sub 1 roll m 1 sub 1 roll /m m 3 sub def }
repeat   /Lineto /lineto load def 1  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul
add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 0 TeXcolorgray
515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj169} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray
1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha -156.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -156.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 33 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833
2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -156.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -1 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -156.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 33 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -156.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 -1 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -156.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 55 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@xMax known { /N@xMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@xMin known { /N@xMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@yMax known { /N@yMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@yMin known { /N@yMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@zMax known { /N@zMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@zMin known { /N@zMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 180.  def grestore  end
 1833 2454 a 1833
2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@xMax known { /N@xMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.71527 4.30554 0.0 180.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1809 2472
a Fb(x)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454
a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 1833 2454 a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@yMax known { /N@yMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833
2454 a
tx@Dict begin { 5.0 5.2616 4.30554 1.94444 0.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1811 2464 a Fb(y)1833 2454 y
tx@Dict begin  PutEnd  end
 1833
2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 90.  def grestore  end
 1833 2454
a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@zMax known { /N@zMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.0903 4.30554 0.0 90.  Uput UUput } PutCoor PutBegin
 end
 1833 2454 a 1812
2472 a Fb(z)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833
2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha -156.  def /Beta 20.  def /Sin1 Beta
sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def
/Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1
Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /D {} def mark  lorenzXYZall
counttomark dup dup cvi eq not { exch pop } if /m exch def /n m 3 div
cvi def n { tx@3DPlotDict begin saveCoor ConvertTo2D x2D 4.41013 mul
y2D 4.41013 mul end m 1 sub 1 roll m 1 sub 1 roll /m m 3 sub def }
repeat   /Lineto /lineto load def 1  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul
add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 0 TeXcolorgray
515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj170} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray
1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha -160.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -160.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 33 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833
2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -160.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -1 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -160.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 33 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -160.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 -1 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -160.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 55 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@xMax known { /N@xMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@xMin known { /N@xMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@yMax known { /N@yMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@yMin known { /N@yMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@zMax known { /N@zMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@zMin known { /N@zMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 180.  def grestore  end
 1833 2454 a 1833
2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@xMax known { /N@xMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.71527 4.30554 0.0 180.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1809 2472
a Fb(x)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454
a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 1833 2454 a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@yMax known { /N@yMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833
2454 a
tx@Dict begin { 5.0 5.2616 4.30554 1.94444 0.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1811 2464 a Fb(y)1833 2454 y
tx@Dict begin  PutEnd  end
 1833
2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 90.  def grestore  end
 1833 2454
a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@zMax known { /N@zMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.0903 4.30554 0.0 90.  Uput UUput } PutCoor PutBegin
 end
 1833 2454 a 1812
2472 a Fb(z)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833
2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha -160.  def /Beta 20.  def /Sin1 Beta
sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def
/Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1
Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /D {} def mark  lorenzXYZall
counttomark dup dup cvi eq not { exch pop } if /m exch def /n m 3 div
cvi def n { tx@3DPlotDict begin saveCoor ConvertTo2D x2D 4.41013 mul
y2D 4.41013 mul end m 1 sub 1 roll m 1 sub 1 roll /m m 3 sub def }
repeat   /Lineto /lineto load def 1  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul
add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 0 TeXcolorgray
515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj171} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray
1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha -164.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -164.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 33 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833
2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -164.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -1 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -164.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 33 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -164.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 -1 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -164.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 55 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@xMax known { /N@xMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@xMin known { /N@xMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@yMax known { /N@yMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@yMin known { /N@yMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@zMax known { /N@zMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@zMin known { /N@zMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 180.  def grestore  end
 1833 2454 a 1833
2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@xMax known { /N@xMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.71527 4.30554 0.0 180.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1809 2472
a Fb(x)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454
a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 1833 2454 a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@yMax known { /N@yMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833
2454 a
tx@Dict begin { 5.0 5.2616 4.30554 1.94444 0.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1811 2464 a Fb(y)1833 2454 y
tx@Dict begin  PutEnd  end
 1833
2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 90.  def grestore  end
 1833 2454
a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@zMax known { /N@zMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.0903 4.30554 0.0 90.  Uput UUput } PutCoor PutBegin
 end
 1833 2454 a 1812
2472 a Fb(z)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833
2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha -164.  def /Beta 20.  def /Sin1 Beta
sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def
/Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1
Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /D {} def mark  lorenzXYZall
counttomark dup dup cvi eq not { exch pop } if /m exch def /n m 3 div
cvi def n { tx@3DPlotDict begin saveCoor ConvertTo2D x2D 4.41013 mul
y2D 4.41013 mul end m 1 sub 1 roll m 1 sub 1 roll /m m 3 sub def }
repeat   /Lineto /lineto load def 1  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul
add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 0 TeXcolorgray
515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj172} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray
1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha -168.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -168.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 33 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833
2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -168.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -1 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -168.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 33 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -168.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 -1 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -168.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 55 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@xMax known { /N@xMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@xMin known { /N@xMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@yMax known { /N@yMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@yMin known { /N@yMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@zMax known { /N@zMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@zMin known { /N@zMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 180.  def grestore  end
 1833 2454 a 1833
2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@xMax known { /N@xMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.71527 4.30554 0.0 180.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1809 2472
a Fb(x)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454
a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 1833 2454 a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@yMax known { /N@yMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833
2454 a
tx@Dict begin { 5.0 5.2616 4.30554 1.94444 0.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1811 2464 a Fb(y)1833 2454 y
tx@Dict begin  PutEnd  end
 1833
2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 90.  def grestore  end
 1833 2454
a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@zMax known { /N@zMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.0903 4.30554 0.0 90.  Uput UUput } PutCoor PutBegin
 end
 1833 2454 a 1812
2472 a Fb(z)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833
2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha -168.  def /Beta 20.  def /Sin1 Beta
sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def
/Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1
Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /D {} def mark  lorenzXYZall
counttomark dup dup cvi eq not { exch pop } if /m exch def /n m 3 div
cvi def n { tx@3DPlotDict begin saveCoor ConvertTo2D x2D 4.41013 mul
y2D 4.41013 mul end m 1 sub 1 roll m 1 sub 1 roll /m m 3 sub def }
repeat   /Lineto /lineto load def 1  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul
add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 0 TeXcolorgray
515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj173} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray
1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha -172.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -172.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 33 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833
2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -172.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -1 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -172.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 33 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -172.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 -1 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -172.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 55 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@xMax known { /N@xMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@xMin known { /N@xMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@yMax known { /N@yMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@yMin known { /N@yMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@zMax known { /N@zMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@zMin known { /N@zMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 180.  def grestore  end
 1833 2454 a 1833
2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@xMax known { /N@xMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.71527 4.30554 0.0 180.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1809 2472
a Fb(x)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454
a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 1833 2454 a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@yMax known { /N@yMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833
2454 a
tx@Dict begin { 5.0 5.2616 4.30554 1.94444 0.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1811 2464 a Fb(y)1833 2454 y
tx@Dict begin  PutEnd  end
 1833
2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 90.  def grestore  end
 1833 2454
a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@zMax known { /N@zMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.0903 4.30554 0.0 90.  Uput UUput } PutCoor PutBegin
 end
 1833 2454 a 1812
2472 a Fb(z)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833
2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha -172.  def /Beta 20.  def /Sin1 Beta
sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def
/Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1
Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /D {} def mark  lorenzXYZall
counttomark dup dup cvi eq not { exch pop } if /m exch def /n m 3 div
cvi def n { tx@3DPlotDict begin saveCoor ConvertTo2D x2D 4.41013 mul
y2D 4.41013 mul end m 1 sub 1 roll m 1 sub 1 roll /m m 3 sub def }
repeat   /Lineto /lineto load def 1  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul
add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 0 TeXcolorgray
515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj174} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray
1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha -176.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -176.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 33 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833
2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -176.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -1 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -176.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 33 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -176.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 -1 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -176.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 55 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@xMax known { /N@xMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@xMin known { /N@xMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@yMax known { /N@yMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@yMin known { /N@yMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@zMax known { /N@zMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@zMin known { /N@zMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 180.  def grestore  end
 1833 2454 a 1833
2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@xMax known { /N@xMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.71527 4.30554 0.0 180.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1809 2472
a Fb(x)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454
a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 1833 2454 a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@yMax known { /N@yMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833
2454 a
tx@Dict begin { 5.0 5.2616 4.30554 1.94444 0.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1811 2464 a Fb(y)1833 2454 y
tx@Dict begin  PutEnd  end
 1833
2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 90.  def grestore  end
 1833 2454
a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@zMax known { /N@zMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.0903 4.30554 0.0 90.  Uput UUput } PutCoor PutBegin
 end
 1833 2454 a 1812
2472 a Fb(z)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833
2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha -176.  def /Beta 20.  def /Sin1 Beta
sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def
/Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1
Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /D {} def mark  lorenzXYZall
counttomark dup dup cvi eq not { exch pop } if /m exch def /n m 3 div
cvi def n { tx@3DPlotDict begin saveCoor ConvertTo2D x2D 4.41013 mul
y2D 4.41013 mul end m 1 sub 1 roll m 1 sub 1 roll /m m 3 sub def }
repeat   /Lineto /lineto load def 1  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul
add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 0 TeXcolorgray
515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj175} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray
1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha -180.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -180.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 33 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833
2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -180.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -1 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -180.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 33 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -180.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 -1 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -180.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 55 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@xMax known { /N@xMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@xMin known { /N@xMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@yMax known { /N@yMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@yMin known { /N@yMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@zMax known { /N@zMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@zMin known { /N@zMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 180.  def grestore  end
 1833 2454 a 1833
2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@xMax known { /N@xMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.71527 4.30554 0.0 180.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1809 2472
a Fb(x)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454
a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 1833 2454 a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@yMax known { /N@yMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833
2454 a
tx@Dict begin { 5.0 5.2616 4.30554 1.94444 0.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1811 2464 a Fb(y)1833 2454 y
tx@Dict begin  PutEnd  end
 1833
2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 90.  def grestore  end
 1833 2454
a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@zMax known { /N@zMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.0903 4.30554 0.0 90.  Uput UUput } PutCoor PutBegin
 end
 1833 2454 a 1812
2472 a Fb(z)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833
2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha -180.  def /Beta 20.  def /Sin1 Beta
sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def
/Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1
Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /D {} def mark  lorenzXYZall
counttomark dup dup cvi eq not { exch pop } if /m exch def /n m 3 div
cvi def n { tx@3DPlotDict begin saveCoor ConvertTo2D x2D 4.41013 mul
y2D 4.41013 mul end m 1 sub 1 roll m 1 sub 1 roll /m m 3 sub def }
repeat   /Lineto /lineto load def 1  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul
add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 0 TeXcolorgray
515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj176} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray
1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha -184.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -184.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 33 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833
2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -184.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -1 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -184.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 33 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -184.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 -1 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -184.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 55 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@xMax known { /N@xMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@xMin known { /N@xMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@yMax known { /N@yMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@yMin known { /N@yMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@zMax known { /N@zMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@zMin known { /N@zMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 180.  def grestore  end
 1833 2454 a 1833
2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@xMax known { /N@xMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.71527 4.30554 0.0 180.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1809 2472
a Fb(x)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454
a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 1833 2454 a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@yMax known { /N@yMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833
2454 a
tx@Dict begin { 5.0 5.2616 4.30554 1.94444 0.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1811 2464 a Fb(y)1833 2454 y
tx@Dict begin  PutEnd  end
 1833
2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 90.  def grestore  end
 1833 2454
a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@zMax known { /N@zMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.0903 4.30554 0.0 90.  Uput UUput } PutCoor PutBegin
 end
 1833 2454 a 1812
2472 a Fb(z)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833
2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha -184.  def /Beta 20.  def /Sin1 Beta
sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def
/Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1
Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /D {} def mark  lorenzXYZall
counttomark dup dup cvi eq not { exch pop } if /m exch def /n m 3 div
cvi def n { tx@3DPlotDict begin saveCoor ConvertTo2D x2D 4.41013 mul
y2D 4.41013 mul end m 1 sub 1 roll m 1 sub 1 roll /m m 3 sub def }
repeat   /Lineto /lineto load def 1  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul
add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 0 TeXcolorgray
515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj177} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray
1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha -188.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -188.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 33 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833
2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -188.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -1 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -188.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 33 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -188.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 -1 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -188.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 55 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@xMax known { /N@xMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@xMin known { /N@xMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@yMax known { /N@yMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@yMin known { /N@yMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@zMax known { /N@zMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@zMin known { /N@zMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 180.  def grestore  end
 1833 2454 a 1833
2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@xMax known { /N@xMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.71527 4.30554 0.0 180.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1809 2472
a Fb(x)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454
a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 1833 2454 a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@yMax known { /N@yMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833
2454 a
tx@Dict begin { 5.0 5.2616 4.30554 1.94444 0.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1811 2464 a Fb(y)1833 2454 y
tx@Dict begin  PutEnd  end
 1833
2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 90.  def grestore  end
 1833 2454
a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@zMax known { /N@zMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.0903 4.30554 0.0 90.  Uput UUput } PutCoor PutBegin
 end
 1833 2454 a 1812
2472 a Fb(z)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833
2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha -188.  def /Beta 20.  def /Sin1 Beta
sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def
/Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1
Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /D {} def mark  lorenzXYZall
counttomark dup dup cvi eq not { exch pop } if /m exch def /n m 3 div
cvi def n { tx@3DPlotDict begin saveCoor ConvertTo2D x2D 4.41013 mul
y2D 4.41013 mul end m 1 sub 1 roll m 1 sub 1 roll /m m 3 sub def }
repeat   /Lineto /lineto load def 1  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul
add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 0 TeXcolorgray
515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj178} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray
1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha -192.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -192.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 33 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833
2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -192.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -1 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -192.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 33 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -192.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 -1 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -192.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 55 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@xMax known { /N@xMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@xMin known { /N@xMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@yMax known { /N@yMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@yMin known { /N@yMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@zMax known { /N@zMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@zMin known { /N@zMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 180.  def grestore  end
 1833 2454 a 1833
2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@xMax known { /N@xMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.71527 4.30554 0.0 180.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1809 2472
a Fb(x)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454
a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 1833 2454 a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@yMax known { /N@yMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833
2454 a
tx@Dict begin { 5.0 5.2616 4.30554 1.94444 0.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1811 2464 a Fb(y)1833 2454 y
tx@Dict begin  PutEnd  end
 1833
2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 90.  def grestore  end
 1833 2454
a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@zMax known { /N@zMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.0903 4.30554 0.0 90.  Uput UUput } PutCoor PutBegin
 end
 1833 2454 a 1812
2472 a Fb(z)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833
2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha -192.  def /Beta 20.  def /Sin1 Beta
sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def
/Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1
Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /D {} def mark  lorenzXYZall
counttomark dup dup cvi eq not { exch pop } if /m exch def /n m 3 div
cvi def n { tx@3DPlotDict begin saveCoor ConvertTo2D x2D 4.41013 mul
y2D 4.41013 mul end m 1 sub 1 roll m 1 sub 1 roll /m m 3 sub def }
repeat   /Lineto /lineto load def 1  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul
add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 0 TeXcolorgray
515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj179} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray
1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha -196.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -196.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 33 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833
2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -196.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -1 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -196.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 33 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -196.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 -1 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -196.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 55 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@xMax known { /N@xMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@xMin known { /N@xMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@yMax known { /N@yMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@yMin known { /N@yMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@zMax known { /N@zMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@zMin known { /N@zMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 180.  def grestore  end
 1833 2454 a 1833
2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@xMax known { /N@xMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.71527 4.30554 0.0 180.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1809 2472
a Fb(x)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454
a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 1833 2454 a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@yMax known { /N@yMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833
2454 a
tx@Dict begin { 5.0 5.2616 4.30554 1.94444 0.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1811 2464 a Fb(y)1833 2454 y
tx@Dict begin  PutEnd  end
 1833
2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 90.  def grestore  end
 1833 2454
a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@zMax known { /N@zMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.0903 4.30554 0.0 90.  Uput UUput } PutCoor PutBegin
 end
 1833 2454 a 1812
2472 a Fb(z)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833
2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha -196.  def /Beta 20.  def /Sin1 Beta
sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def
/Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1
Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /D {} def mark  lorenzXYZall
counttomark dup dup cvi eq not { exch pop } if /m exch def /n m 3 div
cvi def n { tx@3DPlotDict begin saveCoor ConvertTo2D x2D 4.41013 mul
y2D 4.41013 mul end m 1 sub 1 roll m 1 sub 1 roll /m m 3 sub def }
repeat   /Lineto /lineto load def 1  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul
add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 0 TeXcolorgray
515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj180} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray
1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha -200.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -200.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 33 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833
2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -200.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -1 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -200.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 33 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -200.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 -1 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -200.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 55 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@xMax known { /N@xMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@xMin known { /N@xMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@yMax known { /N@yMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@yMin known { /N@yMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@zMax known { /N@zMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@zMin known { /N@zMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 180.  def grestore  end
 1833 2454 a 1833
2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@xMax known { /N@xMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.71527 4.30554 0.0 180.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1809 2472
a Fb(x)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454
a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 1833 2454 a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@yMax known { /N@yMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833
2454 a
tx@Dict begin { 5.0 5.2616 4.30554 1.94444 0.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1811 2464 a Fb(y)1833 2454 y
tx@Dict begin  PutEnd  end
 1833
2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 90.  def grestore  end
 1833 2454
a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@zMax known { /N@zMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.0903 4.30554 0.0 90.  Uput UUput } PutCoor PutBegin
 end
 1833 2454 a 1812
2472 a Fb(z)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833
2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha -200.  def /Beta 20.  def /Sin1 Beta
sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def
/Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1
Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /D {} def mark  lorenzXYZall
counttomark dup dup cvi eq not { exch pop } if /m exch def /n m 3 div
cvi def n { tx@3DPlotDict begin saveCoor ConvertTo2D x2D 4.41013 mul
y2D 4.41013 mul end m 1 sub 1 roll m 1 sub 1 roll /m m 3 sub def }
repeat   /Lineto /lineto load def 1  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul
add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 0 TeXcolorgray
515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj181} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray
1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha -204.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -204.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 33 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833
2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -204.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -1 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -204.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 33 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -204.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 -1 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -204.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 55 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@xMax known { /N@xMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@xMin known { /N@xMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@yMax known { /N@yMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@yMin known { /N@yMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@zMax known { /N@zMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@zMin known { /N@zMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 180.  def grestore  end
 1833 2454 a 1833
2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@xMax known { /N@xMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.71527 4.30554 0.0 180.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1809 2472
a Fb(x)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454
a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 1833 2454 a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@yMax known { /N@yMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833
2454 a
tx@Dict begin { 5.0 5.2616 4.30554 1.94444 0.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1811 2464 a Fb(y)1833 2454 y
tx@Dict begin  PutEnd  end
 1833
2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 90.  def grestore  end
 1833 2454
a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@zMax known { /N@zMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.0903 4.30554 0.0 90.  Uput UUput } PutCoor PutBegin
 end
 1833 2454 a 1812
2472 a Fb(z)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833
2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha -204.  def /Beta 20.  def /Sin1 Beta
sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def
/Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1
Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /D {} def mark  lorenzXYZall
counttomark dup dup cvi eq not { exch pop } if /m exch def /n m 3 div
cvi def n { tx@3DPlotDict begin saveCoor ConvertTo2D x2D 4.41013 mul
y2D 4.41013 mul end m 1 sub 1 roll m 1 sub 1 roll /m m 3 sub def }
repeat   /Lineto /lineto load def 1  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul
add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 0 TeXcolorgray
515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj182} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray
1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha -208.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -208.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 33 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833
2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -208.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -1 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -208.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 33 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -208.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 -1 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -208.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 55 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@xMax known { /N@xMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@xMin known { /N@xMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@yMax known { /N@yMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@yMin known { /N@yMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@zMax known { /N@zMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@zMin known { /N@zMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 180.  def grestore  end
 1833 2454 a 1833
2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@xMax known { /N@xMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.71527 4.30554 0.0 180.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1809 2472
a Fb(x)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454
a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 1833 2454 a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@yMax known { /N@yMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833
2454 a
tx@Dict begin { 5.0 5.2616 4.30554 1.94444 0.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1811 2464 a Fb(y)1833 2454 y
tx@Dict begin  PutEnd  end
 1833
2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 90.  def grestore  end
 1833 2454
a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@zMax known { /N@zMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.0903 4.30554 0.0 90.  Uput UUput } PutCoor PutBegin
 end
 1833 2454 a 1812
2472 a Fb(z)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833
2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha -208.  def /Beta 20.  def /Sin1 Beta
sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def
/Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1
Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /D {} def mark  lorenzXYZall
counttomark dup dup cvi eq not { exch pop } if /m exch def /n m 3 div
cvi def n { tx@3DPlotDict begin saveCoor ConvertTo2D x2D 4.41013 mul
y2D 4.41013 mul end m 1 sub 1 roll m 1 sub 1 roll /m m 3 sub def }
repeat   /Lineto /lineto load def 1  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul
add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 0 TeXcolorgray
515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj183} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray
1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha -212.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -212.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 33 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833
2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -212.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -1 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -212.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 33 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -212.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 -1 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -212.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 55 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@xMax known { /N@xMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@xMin known { /N@xMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@yMax known { /N@yMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@yMin known { /N@yMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@zMax known { /N@zMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@zMin known { /N@zMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 180.  def grestore  end
 1833 2454 a 1833
2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@xMax known { /N@xMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.71527 4.30554 0.0 180.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1809 2472
a Fb(x)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454
a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 1833 2454 a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@yMax known { /N@yMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833
2454 a
tx@Dict begin { 5.0 5.2616 4.30554 1.94444 0.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1811 2464 a Fb(y)1833 2454 y
tx@Dict begin  PutEnd  end
 1833
2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 90.  def grestore  end
 1833 2454
a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@zMax known { /N@zMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.0903 4.30554 0.0 90.  Uput UUput } PutCoor PutBegin
 end
 1833 2454 a 1812
2472 a Fb(z)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833
2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha -212.  def /Beta 20.  def /Sin1 Beta
sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def
/Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1
Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /D {} def mark  lorenzXYZall
counttomark dup dup cvi eq not { exch pop } if /m exch def /n m 3 div
cvi def n { tx@3DPlotDict begin saveCoor ConvertTo2D x2D 4.41013 mul
y2D 4.41013 mul end m 1 sub 1 roll m 1 sub 1 roll /m m 3 sub def }
repeat   /Lineto /lineto load def 1  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul
add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 0 TeXcolorgray
515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj184} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray
1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha -216.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -216.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 33 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833
2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -216.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -1 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -216.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 33 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -216.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 -1 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -216.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 55 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@xMax known { /N@xMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@xMin known { /N@xMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@yMax known { /N@yMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@yMin known { /N@yMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@zMax known { /N@zMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@zMin known { /N@zMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 180.  def grestore  end
 1833 2454 a 1833
2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@xMax known { /N@xMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.71527 4.30554 0.0 180.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1809 2472
a Fb(x)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454
a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 1833 2454 a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@yMax known { /N@yMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833
2454 a
tx@Dict begin { 5.0 5.2616 4.30554 1.94444 0.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1811 2464 a Fb(y)1833 2454 y
tx@Dict begin  PutEnd  end
 1833
2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 90.  def grestore  end
 1833 2454
a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@zMax known { /N@zMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.0903 4.30554 0.0 90.  Uput UUput } PutCoor PutBegin
 end
 1833 2454 a 1812
2472 a Fb(z)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833
2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha -216.  def /Beta 20.  def /Sin1 Beta
sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def
/Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1
Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /D {} def mark  lorenzXYZall
counttomark dup dup cvi eq not { exch pop } if /m exch def /n m 3 div
cvi def n { tx@3DPlotDict begin saveCoor ConvertTo2D x2D 4.41013 mul
y2D 4.41013 mul end m 1 sub 1 roll m 1 sub 1 roll /m m 3 sub def }
repeat   /Lineto /lineto load def 1  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul
add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 0 TeXcolorgray
515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj185} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray
1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha -220.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -220.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 33 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833
2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -220.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -1 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -220.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 33 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -220.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 -1 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -220.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 55 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@xMax known { /N@xMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@xMin known { /N@xMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@yMax known { /N@yMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@yMin known { /N@yMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@zMax known { /N@zMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@zMin known { /N@zMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 180.  def grestore  end
 1833 2454 a 1833
2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@xMax known { /N@xMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.71527 4.30554 0.0 180.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1809 2472
a Fb(x)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454
a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 1833 2454 a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@yMax known { /N@yMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833
2454 a
tx@Dict begin { 5.0 5.2616 4.30554 1.94444 0.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1811 2464 a Fb(y)1833 2454 y
tx@Dict begin  PutEnd  end
 1833
2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 90.  def grestore  end
 1833 2454
a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@zMax known { /N@zMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.0903 4.30554 0.0 90.  Uput UUput } PutCoor PutBegin
 end
 1833 2454 a 1812
2472 a Fb(z)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833
2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha -220.  def /Beta 20.  def /Sin1 Beta
sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def
/Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1
Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /D {} def mark  lorenzXYZall
counttomark dup dup cvi eq not { exch pop } if /m exch def /n m 3 div
cvi def n { tx@3DPlotDict begin saveCoor ConvertTo2D x2D 4.41013 mul
y2D 4.41013 mul end m 1 sub 1 roll m 1 sub 1 roll /m m 3 sub def }
repeat   /Lineto /lineto load def 1  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul
add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 0 TeXcolorgray
515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj186} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray
1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha -224.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -224.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 33 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833
2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -224.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -1 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -224.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 33 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -224.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 -1 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -224.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 55 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@xMax known { /N@xMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@xMin known { /N@xMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@yMax known { /N@yMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@yMin known { /N@yMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@zMax known { /N@zMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@zMin known { /N@zMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 180.  def grestore  end
 1833 2454 a 1833
2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@xMax known { /N@xMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.71527 4.30554 0.0 180.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1809 2472
a Fb(x)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454
a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 1833 2454 a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@yMax known { /N@yMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833
2454 a
tx@Dict begin { 5.0 5.2616 4.30554 1.94444 0.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1811 2464 a Fb(y)1833 2454 y
tx@Dict begin  PutEnd  end
 1833
2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 90.  def grestore  end
 1833 2454
a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@zMax known { /N@zMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.0903 4.30554 0.0 90.  Uput UUput } PutCoor PutBegin
 end
 1833 2454 a 1812
2472 a Fb(z)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833
2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha -224.  def /Beta 20.  def /Sin1 Beta
sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def
/Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1
Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /D {} def mark  lorenzXYZall
counttomark dup dup cvi eq not { exch pop } if /m exch def /n m 3 div
cvi def n { tx@3DPlotDict begin saveCoor ConvertTo2D x2D 4.41013 mul
y2D 4.41013 mul end m 1 sub 1 roll m 1 sub 1 roll /m m 3 sub def }
repeat   /Lineto /lineto load def 1  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul
add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 0 TeXcolorgray
515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj187} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray
1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha -228.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -228.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 33 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833
2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -228.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -1 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -228.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 33 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -228.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 -1 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -228.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 55 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@xMax known { /N@xMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@xMin known { /N@xMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@yMax known { /N@yMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@yMin known { /N@yMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@zMax known { /N@zMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@zMin known { /N@zMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 180.  def grestore  end
 1833 2454 a 1833
2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@xMax known { /N@xMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.71527 4.30554 0.0 180.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1809 2472
a Fb(x)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454
a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 1833 2454 a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@yMax known { /N@yMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833
2454 a
tx@Dict begin { 5.0 5.2616 4.30554 1.94444 0.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1811 2464 a Fb(y)1833 2454 y
tx@Dict begin  PutEnd  end
 1833
2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 90.  def grestore  end
 1833 2454
a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@zMax known { /N@zMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.0903 4.30554 0.0 90.  Uput UUput } PutCoor PutBegin
 end
 1833 2454 a 1812
2472 a Fb(z)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833
2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha -228.  def /Beta 20.  def /Sin1 Beta
sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def
/Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1
Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /D {} def mark  lorenzXYZall
counttomark dup dup cvi eq not { exch pop } if /m exch def /n m 3 div
cvi def n { tx@3DPlotDict begin saveCoor ConvertTo2D x2D 4.41013 mul
y2D 4.41013 mul end m 1 sub 1 roll m 1 sub 1 roll /m m 3 sub def }
repeat   /Lineto /lineto load def 1  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul
add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 0 TeXcolorgray
515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj188} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray
1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha -232.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -232.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 33 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833
2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -232.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -1 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -232.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 33 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -232.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 -1 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -232.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 55 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@xMax known { /N@xMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@xMin known { /N@xMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@yMax known { /N@yMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@yMin known { /N@yMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@zMax known { /N@zMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@zMin known { /N@zMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 180.  def grestore  end
 1833 2454 a 1833
2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@xMax known { /N@xMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.71527 4.30554 0.0 180.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1809 2472
a Fb(x)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454
a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 1833 2454 a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@yMax known { /N@yMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833
2454 a
tx@Dict begin { 5.0 5.2616 4.30554 1.94444 0.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1811 2464 a Fb(y)1833 2454 y
tx@Dict begin  PutEnd  end
 1833
2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 90.  def grestore  end
 1833 2454
a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@zMax known { /N@zMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.0903 4.30554 0.0 90.  Uput UUput } PutCoor PutBegin
 end
 1833 2454 a 1812
2472 a Fb(z)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833
2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha -232.  def /Beta 20.  def /Sin1 Beta
sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def
/Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1
Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /D {} def mark  lorenzXYZall
counttomark dup dup cvi eq not { exch pop } if /m exch def /n m 3 div
cvi def n { tx@3DPlotDict begin saveCoor ConvertTo2D x2D 4.41013 mul
y2D 4.41013 mul end m 1 sub 1 roll m 1 sub 1 roll /m m 3 sub def }
repeat   /Lineto /lineto load def 1  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul
add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 0 TeXcolorgray
515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj189} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray
1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha -236.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -236.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 33 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833
2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -236.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -1 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -236.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 33 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -236.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 -1 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -236.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 55 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@xMax known { /N@xMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@xMin known { /N@xMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@yMax known { /N@yMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@yMin known { /N@yMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@zMax known { /N@zMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@zMin known { /N@zMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 180.  def grestore  end
 1833 2454 a 1833
2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@xMax known { /N@xMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.71527 4.30554 0.0 180.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1809 2472
a Fb(x)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454
a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 1833 2454 a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@yMax known { /N@yMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833
2454 a
tx@Dict begin { 5.0 5.2616 4.30554 1.94444 0.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1811 2464 a Fb(y)1833 2454 y
tx@Dict begin  PutEnd  end
 1833
2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 90.  def grestore  end
 1833 2454
a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@zMax known { /N@zMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.0903 4.30554 0.0 90.  Uput UUput } PutCoor PutBegin
 end
 1833 2454 a 1812
2472 a Fb(z)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833
2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha -236.  def /Beta 20.  def /Sin1 Beta
sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def
/Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1
Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /D {} def mark  lorenzXYZall
counttomark dup dup cvi eq not { exch pop } if /m exch def /n m 3 div
cvi def n { tx@3DPlotDict begin saveCoor ConvertTo2D x2D 4.41013 mul
y2D 4.41013 mul end m 1 sub 1 roll m 1 sub 1 roll /m m 3 sub def }
repeat   /Lineto /lineto load def 1  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul
add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 0 TeXcolorgray
515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj190} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 0 TeXcolorgray
1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha -240.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -240.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 33 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@xMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833
2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -240.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -1 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -240.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 33 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@yMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -240.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 -1 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMin 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a 1833 2454 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha -240.  def
/Beta 20.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 55 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   4.41013 mul exch 4.41013 mul exch  } false /N@zMax 10
{InitPnode } /NodeScale {} def NewNode end  end
 1833 2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@xMax known { /N@xMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@xMin known { /N@xMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@yMax known { /N@yMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@yMin known { /N@yMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt
{ .setstrokeconstantalpha }{ .setopacityalpha } ifelse  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave  0  setgray w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  fill grestore grestore 0 h a sub moveto
  EndArrow  } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict
/N@zMax known { /N@zMax load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@zMin known { /N@zMin load GetCenter } { 0 0 }
ifelse end   /Lineto /lineto load def 1  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 180.  def grestore  end
 1833 2454 a 1833
2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@xMax known { /N@xMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.71527 4.30554 0.0 180.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1809 2472
a Fb(x)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454
a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 1833 2454 a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@yMax known { /N@yMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833
2454 a
tx@Dict begin { 5.0 5.2616 4.30554 1.94444 0.  Uput UUput } PutCoor
PutBegin  end
 1833 2454 a 1811 2464 a Fb(y)1833 2454 y
tx@Dict begin  PutEnd  end
 1833
2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  gsave STV CP T /ps@refangle 90.  def grestore  end
 1833 2454
a 1833 2454 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@zMax known { /N@zMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1833 2454 a 1833 2454 a
tx@Dict begin { 5.0 5.0903 4.30554 0.0 90.  Uput UUput } PutCoor PutBegin
 end
 1833 2454 a 1812
2472 a Fb(z)1833 2454 y
tx@Dict begin  PutEnd  end
 1833 2454 a 1833 2454 a
tx@Dict begin  PutEnd  end
 1833
2454 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /RotX 0.  def /RotY 0.  def /RotZ 0.
 def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.
 def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz )
def /RotSet (set ) def /Alpha -240.  def /Beta 20.  def /Sin1 Beta
sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def
/Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1
Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict
tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation false
def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /D {} def mark  lorenzXYZall
counttomark dup dup cvi eq not { exch pop } if /m exch def /n m 3 div
cvi def n { tx@3DPlotDict begin saveCoor ConvertTo2D x2D 4.41013 mul
y2D 4.41013 mul end m 1 sub 1 roll m 1 sub 1 roll /m m 3 sub def }
repeat   /Lineto /lineto load def 1  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul
add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 0 TeXcolorgray
515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj191}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj0}>>/MK
<</TP 1/I {pbs@obj0}/IF<</S/A/FB true>>>>/T (0.0)/ANN pdfmark end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj192} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj0} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj1} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930
a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj193}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj192}>>/MK
<</TP 1/I {pbs@obj192}/IF<</S/A/FB true>>>>/T (0.1)/ANN pdfmark end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj194} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj0} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj1} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj2} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj195}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj194}>>/MK
<</TP 1/I {pbs@obj194}/IF<</S/A/FB true>>>>/T (0.2)/ANN pdfmark end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj196} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj0} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj1} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj2} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj3} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
grestore
 515 2930
a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440
a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj197}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj196}>>/MK
<</TP 1/I {pbs@obj196}/IF<</S/A/FB true>>>>/T (0.3)/ANN pdfmark end
 515 2930 a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj198} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930
a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj0} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj1} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj2} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj3} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj4} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
grestore
 515 2930
a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440
a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj199}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj198}>>/MK
<</TP 1/I {pbs@obj198}/IF<</S/A/FB true>>>>/T (0.4)/ANN pdfmark end
 515 2930 a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj200} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930
a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj0} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj1} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj2} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj3} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj4} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj5} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj201}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj200}>>/MK
<</TP 1/I {pbs@obj200}/IF<</S/A/FB true>>>>/T (0.5)/ANN pdfmark end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj202} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj0} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj1} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj2} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj3} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj4} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj5} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj6} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930
a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj203}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj202}>>/MK
<</TP 1/I {pbs@obj202}/IF<</S/A/FB true>>>>/T (0.6)/ANN pdfmark end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj204} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj0} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj1} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj2} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj3} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj4} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj5} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj6} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj7} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj205}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj204}>>/MK
<</TP 1/I {pbs@obj204}/IF<</S/A/FB true>>>>/T (0.7)/ANN pdfmark end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj206} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj0} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj1} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj2} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj3} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj4} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj5} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj6} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj7} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj8} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
grestore
 515 2930
a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440
a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj207}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj206}>>/MK
<</TP 1/I {pbs@obj206}/IF<</S/A/FB true>>>>/T (0.8)/ANN pdfmark end
 515 2930 a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj208} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930
a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj0} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj1} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj2} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj3} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj4} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj5} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj6} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj7} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj8} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj9} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
grestore
 515 2930
a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440
a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj209}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj208}>>/MK
<</TP 1/I {pbs@obj208}/IF<</S/A/FB true>>>>/T (0.9)/ANN pdfmark end
 515 2930 a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj210} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930
a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj0} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj1} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj2} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj3} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj4} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj5} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj6} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj7} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj8} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj9} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj10} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj211}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj210}>>/MK
<</TP 1/I {pbs@obj210}/IF<</S/A/FB true>>>>/T (0.10)/ANN pdfmark end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj212} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj0} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj1} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj2} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj3} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj4} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj5} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj6} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj7} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj8} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj9} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj10} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj11} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930
a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj213}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj212}>>/MK
<</TP 1/I {pbs@obj212}/IF<</S/A/FB true>>>>/T (0.11)/ANN pdfmark end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj214} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj0} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj1} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj2} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj3} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj4} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj5} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj6} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj7} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj8} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj9} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj10} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj11} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj12} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj215}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj214}>>/MK
<</TP 1/I {pbs@obj214}/IF<</S/A/FB true>>>>/T (0.12)/ANN pdfmark end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj216} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj0} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj1} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj2} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj3} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj4} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj5} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj6} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj7} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj8} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj9} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj10} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj11} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj12} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj13} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
grestore
 515 2930
a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440
a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj217}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj216}>>/MK
<</TP 1/I {pbs@obj216}/IF<</S/A/FB true>>>>/T (0.13)/ANN pdfmark end
 515 2930 a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj218} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930
a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj0} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj1} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj2} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj3} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj4} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj5} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj6} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj7} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj8} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj9} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj10} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj11} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj12} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj13} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj14} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
grestore
 515 2930
a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440
a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj219}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj218}>>/MK
<</TP 1/I {pbs@obj218}/IF<</S/A/FB true>>>>/T (0.14)/ANN pdfmark end
 515 2930 a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj220} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930
a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj0} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj1} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj2} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj3} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj4} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj5} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj6} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj7} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj8} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj9} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj10} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj11} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj12} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj13} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj14} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj15} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj221}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj220}>>/MK
<</TP 1/I {pbs@obj220}/IF<</S/A/FB true>>>>/T (0.15)/ANN pdfmark end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj222} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj0} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj1} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj2} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj3} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj4} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj5} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj6} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj7} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj8} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj9} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj10} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj11} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj12} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj13} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj14} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj15} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj16} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930
a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj223}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj222}>>/MK
<</TP 1/I {pbs@obj222}/IF<</S/A/FB true>>>>/T (0.16)/ANN pdfmark end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj224} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj0} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj1} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj2} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj3} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj4} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj5} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj6} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj7} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj8} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj9} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj10} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj11} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj12} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj13} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj14} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj15} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj16} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj17} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj225}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj224}>>/MK
<</TP 1/I {pbs@obj224}/IF<</S/A/FB true>>>>/T (0.17)/ANN pdfmark end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj226} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj0} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj1} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj2} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj3} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj4} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj5} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj6} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj7} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj8} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj9} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj10} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj11} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj12} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj13} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj14} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj15} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj16} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj17} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj18} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
grestore
 515 2930
a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440
a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj227}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj226}>>/MK
<</TP 1/I {pbs@obj226}/IF<</S/A/FB true>>>>/T (0.18)/ANN pdfmark end
 515 2930 a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj228} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930
a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj0} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj1} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj2} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj3} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj4} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj5} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj6} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj7} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj8} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj9} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj10} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj11} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj12} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj13} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj14} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj15} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj16} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj17} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj18} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj19} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
grestore
 515 2930
a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440
a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj229}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj228}>>/MK
<</TP 1/I {pbs@obj228}/IF<</S/A/FB true>>>>/T (0.19)/ANN pdfmark end
 515 2930 a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj230} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930
a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj0} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj1} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj2} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj3} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj4} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj5} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj6} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj7} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj8} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj9} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj10} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj11} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj12} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj13} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj14} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj15} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj16} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj17} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj18} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj19} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj20} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj231}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj230}>>/MK
<</TP 1/I {pbs@obj230}/IF<</S/A/FB true>>>>/T (0.20)/ANN pdfmark end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj232} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj0} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj1} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj2} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj3} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj4} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj5} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj6} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj7} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj8} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj9} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj10} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj11} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj12} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj13} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj14} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj15} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj16} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj17} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj18} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj19} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj20} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj21} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930
a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj233}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj232}>>/MK
<</TP 1/I {pbs@obj232}/IF<</S/A/FB true>>>>/T (0.21)/ANN pdfmark end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj234} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj0} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj1} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj2} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj3} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj4} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj5} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj6} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj7} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj8} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj9} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj10} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj11} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj12} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj13} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj14} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj15} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj16} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj17} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj18} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj19} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj20} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj21} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj22} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj235}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj234}>>/MK
<</TP 1/I {pbs@obj234}/IF<</S/A/FB true>>>>/T (0.22)/ANN pdfmark end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj236} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj0} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj1} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj2} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj3} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj4} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj5} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj6} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj7} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj8} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj9} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj10} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj11} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj12} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj13} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj14} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj15} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj16} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj17} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj18} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj19} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj20} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj21} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj22} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj23} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
grestore
 515 2930
a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440
a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj237}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj236}>>/MK
<</TP 1/I {pbs@obj236}/IF<</S/A/FB true>>>>/T (0.23)/ANN pdfmark end
 515 2930 a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj238} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930
a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj0} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj1} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj2} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj3} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj4} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj5} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj6} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj7} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj8} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj9} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj10} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj11} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj12} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj13} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj14} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj15} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj16} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj17} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj18} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj19} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj20} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj21} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj22} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj23} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj24} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
grestore
 515 2930
a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440
a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj239}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj238}>>/MK
<</TP 1/I {pbs@obj238}/IF<</S/A/FB true>>>>/T (0.24)/ANN pdfmark end
 515 2930 a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj240} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930
a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj0} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj1} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj2} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj3} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj4} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj5} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj6} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj7} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj8} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj9} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj10} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj11} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj12} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj13} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj14} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj15} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj16} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj17} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj18} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj19} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj20} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj21} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj22} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj23} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj24} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj25} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj241}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj240}>>/MK
<</TP 1/I {pbs@obj240}/IF<</S/A/FB true>>>>/T (0.25)/ANN pdfmark end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj242} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj0} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj1} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj2} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj3} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj4} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj5} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj6} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj7} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj8} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj9} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj10} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj11} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj12} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj13} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj14} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj15} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj16} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj17} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj18} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj19} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj20} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj21} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj22} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj23} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj24} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj25} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj26} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930
a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj243}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj242}>>/MK
<</TP 1/I {pbs@obj242}/IF<</S/A/FB true>>>>/T (0.26)/ANN pdfmark end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj244} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj0} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj1} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj2} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj3} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj4} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj5} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj6} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj7} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj8} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj9} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj10} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj11} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj12} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj13} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj14} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj15} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj16} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj17} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj18} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj19} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj20} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj21} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj22} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj23} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj24} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj25} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj26} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj27} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj245}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj244}>>/MK
<</TP 1/I {pbs@obj244}/IF<</S/A/FB true>>>>/T (0.27)/ANN pdfmark end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj246} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj0} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj1} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj2} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj3} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj4} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj5} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj6} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj7} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj8} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj9} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj10} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj11} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj12} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj13} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj14} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj15} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj16} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj17} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj18} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj19} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj20} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj21} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj22} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj23} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj24} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj25} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj26} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj27} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj28} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
grestore
 515 2930
a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440
a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj247}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj246}>>/MK
<</TP 1/I {pbs@obj246}/IF<</S/A/FB true>>>>/T (0.28)/ANN pdfmark end
 515 2930 a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj248} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930
a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj0} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj1} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj2} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj3} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj4} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj5} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj6} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj7} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj8} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj9} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj10} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj11} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj12} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj13} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj14} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj15} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj16} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj17} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj18} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj19} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj20} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj21} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj22} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj23} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj24} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj25} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj26} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj27} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj28} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj29} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
grestore
 515 2930
a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440
a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj249}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj248}>>/MK
<</TP 1/I {pbs@obj248}/IF<</S/A/FB true>>>>/T (0.29)/ANN pdfmark end
 515 2930 a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj250} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930
a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj0} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj1} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj2} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj3} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj4} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj5} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj6} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj7} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj8} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj9} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj10} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj11} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj12} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj13} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj14} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj15} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj16} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj17} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj18} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj19} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj20} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj21} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj22} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj23} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj24} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj25} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj26} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj27} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj28} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj29} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj30} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj251}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj250}>>/MK
<</TP 1/I {pbs@obj250}/IF<</S/A/FB true>>>>/T (0.30)/ANN pdfmark end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj252} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj0} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj1} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj2} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj3} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj4} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj5} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj6} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj7} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj8} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj9} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj10} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj11} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj12} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj13} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj14} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj15} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj16} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj17} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj18} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj19} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj20} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj21} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj22} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj23} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj24} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj25} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj26} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj27} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj28} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj29} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj30} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj31} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930
a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj253}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj252}>>/MK
<</TP 1/I {pbs@obj252}/IF<</S/A/FB true>>>>/T (0.31)/ANN pdfmark end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj254} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj0} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj1} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj2} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj3} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj4} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj5} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj6} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj7} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj8} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj9} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj10} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj11} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj12} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj13} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj14} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj15} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj16} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj17} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj18} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj19} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj20} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj21} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj22} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj23} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj24} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj25} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj26} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj27} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj28} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj29} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj30} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj31} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj32} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj255}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj254}>>/MK
<</TP 1/I {pbs@obj254}/IF<</S/A/FB true>>>>/T (0.32)/ANN pdfmark end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj256} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj0} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj1} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj2} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj3} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj4} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj5} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj6} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj7} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj8} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj9} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj10} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj11} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj12} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj13} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj14} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj15} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj16} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj17} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj18} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj19} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj20} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj21} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj22} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj23} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj24} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj25} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj26} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj27} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj28} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj29} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj30} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj31} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj32} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj33} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
grestore
 515 2930
a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440
a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj257}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj256}>>/MK
<</TP 1/I {pbs@obj256}/IF<</S/A/FB true>>>>/T (0.33)/ANN pdfmark end
 515 2930 a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj258} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930
a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj0} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj1} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj2} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj3} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj4} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj5} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj6} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj7} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj8} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj9} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj10} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj11} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj12} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj13} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj14} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj15} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj16} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj17} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj18} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj19} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj20} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj21} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj22} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj23} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj24} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj25} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj26} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj27} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj28} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj29} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj30} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj31} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj32} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj33} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj34} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
grestore
 515 2930
a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440
a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj259}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj258}>>/MK
<</TP 1/I {pbs@obj258}/IF<</S/A/FB true>>>>/T (0.34)/ANN pdfmark end
 515 2930 a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj260} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930
a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj0} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj1} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj2} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj3} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj4} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj5} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj6} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj7} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj8} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj9} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj10} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj11} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj12} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj13} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj14} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj15} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj16} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj17} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj18} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj19} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj20} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj21} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj22} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj23} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj24} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj25} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj26} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj27} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj28} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj29} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj30} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj31} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj32} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj33} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj34} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj35} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj261}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj260}>>/MK
<</TP 1/I {pbs@obj260}/IF<</S/A/FB true>>>>/T (0.35)/ANN pdfmark end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj262} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj0} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj1} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj2} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj3} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj4} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj5} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj6} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj7} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj8} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj9} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj10} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj11} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj12} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj13} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj14} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj15} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj16} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj17} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj18} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj19} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj20} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj21} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj22} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj23} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj24} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj25} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj26} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj27} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj28} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj29} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj30} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj31} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj32} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj33} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj34} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj35} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj36} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930
a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj263}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj262}>>/MK
<</TP 1/I {pbs@obj262}/IF<</S/A/FB true>>>>/T (0.36)/ANN pdfmark end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj264} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj0} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj1} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj2} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj3} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj4} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj5} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj6} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj7} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj8} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj9} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj10} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj11} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj12} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj13} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj14} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj15} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj16} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj17} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj18} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj19} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj20} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj21} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj22} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj23} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj24} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj25} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj26} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj27} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj28} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj29} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj30} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj31} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj32} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj33} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj34} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj35} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj36} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj37} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj265}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj264}>>/MK
<</TP 1/I {pbs@obj264}/IF<</S/A/FB true>>>>/T (0.37)/ANN pdfmark end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj266} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj0} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj1} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj2} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj3} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj4} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj5} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj6} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj7} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj8} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj9} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj10} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj11} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj12} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj13} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj14} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj15} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj16} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj17} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj18} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj19} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj20} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj21} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj22} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj23} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj24} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj25} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj26} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj27} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj28} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj29} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj30} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj31} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj32} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj33} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj34} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj35} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj36} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj37} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj38} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
grestore
 515 2930
a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440
a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj267}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj266}>>/MK
<</TP 1/I {pbs@obj266}/IF<</S/A/FB true>>>>/T (0.38)/ANN pdfmark end
 515 2930 a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj268} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930
a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj0} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj1} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj2} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj3} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj4} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj5} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj6} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj7} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj8} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj9} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj10} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj11} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj12} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj13} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj14} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj15} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj16} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj17} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj18} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj19} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj20} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj21} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj22} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj23} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj24} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj25} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj26} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj27} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj28} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj29} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj30} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj31} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj32} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj33} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj34} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj35} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj36} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj37} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj38} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj39} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
grestore
 515 2930
a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440
a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj269}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj268}>>/MK
<</TP 1/I {pbs@obj268}/IF<</S/A/FB true>>>>/T (0.39)/ANN pdfmark end
 515 2930 a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj270} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930
a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj0} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj1} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj2} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj3} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj4} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj5} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj6} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj7} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj8} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj9} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj10} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj11} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj12} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj13} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj14} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj15} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj16} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj17} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj18} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj19} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj20} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj21} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj22} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj23} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj24} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj25} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj26} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj27} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj28} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj29} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj30} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj31} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj32} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj33} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj34} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj35} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj36} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj37} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj38} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj39} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj40} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj271}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj270}>>/MK
<</TP 1/I {pbs@obj270}/IF<</S/A/FB true>>>>/T (0.40)/ANN pdfmark end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj272} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj0} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj1} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj2} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj3} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj4} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj5} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj6} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj7} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj8} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj9} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj10} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj11} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj12} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj13} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj14} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj15} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj16} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj17} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj18} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj19} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj20} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj21} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj22} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj23} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj24} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj25} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj26} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj27} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj28} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj29} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj30} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj31} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj32} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj33} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj34} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj35} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj36} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj37} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj38} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj39} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj40} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj41} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930
a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj273}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj272}>>/MK
<</TP 1/I {pbs@obj272}/IF<</S/A/FB true>>>>/T (0.41)/ANN pdfmark end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj274} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj0} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj1} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj2} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj3} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj4} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj5} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj6} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj7} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj8} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj9} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj10} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj11} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj12} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj13} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj14} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj15} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj16} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj17} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj18} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj19} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj20} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj21} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj22} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj23} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj24} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj25} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj26} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj27} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj28} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj29} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj30} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj31} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj32} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj33} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj34} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj35} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj36} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj37} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj38} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj39} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj40} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj41} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj42} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj275}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj274}>>/MK
<</TP 1/I {pbs@obj274}/IF<</S/A/FB true>>>>/T (0.42)/ANN pdfmark end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj276} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj0} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj1} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj2} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj3} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj4} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj5} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj6} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj7} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj8} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj9} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj10} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj11} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj12} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj13} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj14} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj15} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj16} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj17} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj18} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj19} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj20} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj21} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj22} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj23} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj24} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj25} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj26} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj27} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj28} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj29} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj30} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj31} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj32} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj33} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj34} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj35} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj36} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj37} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj38} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj39} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj40} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj41} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj42} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj43} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
grestore
 515 2930
a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440
a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj277}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj276}>>/MK
<</TP 1/I {pbs@obj276}/IF<</S/A/FB true>>>>/T (0.43)/ANN pdfmark end
 515 2930 a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj278} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930
a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj0} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj1} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj2} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj3} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj4} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj5} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj6} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj7} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj8} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj9} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj10} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj11} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj12} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj13} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj14} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj15} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj16} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj17} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj18} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj19} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj20} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj21} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj22} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj23} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj24} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj25} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj26} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj27} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj28} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj29} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj30} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj31} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj32} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj33} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj34} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj35} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj36} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj37} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj38} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj39} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj40} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj41} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj42} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj43} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj44} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
grestore
 515 2930
a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440
a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj279}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj278}>>/MK
<</TP 1/I {pbs@obj278}/IF<</S/A/FB true>>>>/T (0.44)/ANN pdfmark end
 515 2930 a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj280} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930
a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj0} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj1} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj2} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj3} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj4} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj5} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj6} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj7} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj8} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj9} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj10} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj11} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj12} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj13} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj14} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj15} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj16} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj17} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj18} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj19} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj20} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj21} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj22} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj23} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj24} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj25} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj26} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj27} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj28} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj29} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj30} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj31} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj32} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj33} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj34} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj35} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj36} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj37} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj38} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj39} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj40} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj41} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj42} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj43} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj44} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj45} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj281}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj280}>>/MK
<</TP 1/I {pbs@obj280}/IF<</S/A/FB true>>>>/T (0.45)/ANN pdfmark end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj282} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj0} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj1} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj2} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj3} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj4} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj5} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj6} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj7} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj8} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj9} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj10} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj11} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj12} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj13} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj14} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj15} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj16} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj17} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj18} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj19} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj20} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj21} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj22} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj23} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj24} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj25} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj26} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj27} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj28} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj29} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj30} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj31} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj32} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj33} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj34} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj35} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj36} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj37} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj38} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj39} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj40} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj41} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj42} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj43} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj44} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj45} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj46} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930
a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj283}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj282}>>/MK
<</TP 1/I {pbs@obj282}/IF<</S/A/FB true>>>>/T (0.46)/ANN pdfmark end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj284} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj0} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj1} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj2} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj3} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj4} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj5} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj6} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj7} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj8} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj9} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj10} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj11} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj12} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj13} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj14} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj15} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj16} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj17} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj18} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj19} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj20} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj21} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj22} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj23} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj24} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj25} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj26} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj27} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj28} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj29} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj30} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj31} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj32} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj33} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj34} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj35} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj36} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj37} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj38} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj39} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj40} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj41} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj42} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj43} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj44} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj45} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj46} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj47} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj285}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj284}>>/MK
<</TP 1/I {pbs@obj284}/IF<</S/A/FB true>>>>/T (0.47)/ANN pdfmark end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj286} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj0} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj1} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj2} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj3} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj4} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj5} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj6} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj7} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj8} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj9} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj10} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj11} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj12} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj13} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj14} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj15} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj16} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj17} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj18} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj19} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj20} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj21} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj22} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj23} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj24} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj25} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj26} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj27} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj28} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj29} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj30} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj31} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj32} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj33} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj34} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj35} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj36} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj37} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj38} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj39} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj40} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj41} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj42} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj43} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj44} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj45} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj46} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj47} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj48} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
grestore
 515 2930
a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440
a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj287}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj286}>>/MK
<</TP 1/I {pbs@obj286}/IF<</S/A/FB true>>>>/T (0.48)/ANN pdfmark end
 515 2930 a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj288} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930
a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj0} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj1} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj2} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj3} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj4} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj5} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj6} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj7} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj8} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj9} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj10} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj11} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj12} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj13} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj14} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj15} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj16} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj17} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj18} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj19} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj20} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj21} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj22} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj23} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj24} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj25} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj26} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj27} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj28} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj29} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj30} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj31} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj32} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj33} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj34} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj35} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj36} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj37} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj38} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj39} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj40} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj41} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj42} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj43} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj44} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj45} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj46} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj47} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj48} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj49} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
grestore
 515 2930
a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440
a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj289}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj288}>>/MK
<</TP 1/I {pbs@obj288}/IF<</S/A/FB true>>>>/T (0.49)/ANN pdfmark end
 515 2930 a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj290} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930
a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj0} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj1} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj2} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj3} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj4} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj5} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj6} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj7} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj8} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj9} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj10} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj11} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj12} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj13} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj14} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj15} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj16} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj17} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj18} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj19} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj20} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj21} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj22} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj23} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj24} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj25} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj26} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj27} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj28} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj29} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj30} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj31} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj32} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj33} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj34} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj35} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj36} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj37} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj38} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj39} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj40} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj41} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj42} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj43} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj44} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj45} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj46} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj47} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj48} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj49} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj50} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj291}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj290}>>/MK
<</TP 1/I {pbs@obj290}/IF<</S/A/FB true>>>>/T (0.50)/ANN pdfmark end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj292} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj0} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj1} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj2} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj3} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj4} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj5} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj6} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj7} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj8} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj9} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj10} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj11} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj12} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj13} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj14} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj15} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj16} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj17} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj18} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj19} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj20} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj21} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj22} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj23} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj24} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj25} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj26} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj27} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj28} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj29} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj30} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj31} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj32} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj33} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj34} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj35} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj36} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj37} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj38} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj39} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj40} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj41} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj42} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj43} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj44} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj45} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj46} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj47} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj48} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj49} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj50} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj51} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930
a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj293}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj292}>>/MK
<</TP 1/I {pbs@obj292}/IF<</S/A/FB true>>>>/T (0.51)/ANN pdfmark end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj294} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj0} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj1} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj2} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj3} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj4} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj5} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj6} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj7} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj8} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj9} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj10} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj11} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj12} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj13} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj14} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj15} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj16} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj17} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj18} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj19} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj20} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj21} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj22} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj23} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj24} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj25} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj26} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj27} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj28} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj29} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj30} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj31} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj32} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj33} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj34} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj35} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj36} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj37} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj38} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj39} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj40} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj41} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj42} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj43} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj44} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj45} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj46} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj47} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj48} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj49} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj50} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj51} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj52} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj295}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj294}>>/MK
<</TP 1/I {pbs@obj294}/IF<</S/A/FB true>>>>/T (0.52)/ANN pdfmark end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj296} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj0} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj1} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj2} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj3} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj4} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj5} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj6} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj7} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj8} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj9} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj10} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj11} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj12} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj13} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj14} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj15} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj16} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj17} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj18} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj19} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj20} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj21} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj22} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj23} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj24} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj25} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj26} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj27} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj28} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj29} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj30} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj31} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj32} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj33} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj34} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj35} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj36} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj37} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj38} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj39} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj40} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj41} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj42} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj43} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj44} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj45} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj46} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj47} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj48} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj49} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj50} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj51} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj52} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj53} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
grestore
 515 2930
a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440
a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj297}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj296}>>/MK
<</TP 1/I {pbs@obj296}/IF<</S/A/FB true>>>>/T (0.53)/ANN pdfmark end
 515 2930 a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj298} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930
a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj0} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj1} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj2} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj3} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj4} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj5} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj6} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj7} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj8} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj9} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj10} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj11} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj12} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj13} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj14} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj15} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj16} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj17} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj18} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj19} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj20} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj21} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj22} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj23} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj24} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj25} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj26} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj27} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj28} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj29} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj30} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj31} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj32} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj33} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj34} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj35} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj36} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj37} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj38} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj39} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj40} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj41} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj42} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj43} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj44} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj45} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj46} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj47} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj48} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj49} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj50} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj51} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj52} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj53} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj54} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
grestore
 515 2930
a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440
a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj299}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj298}>>/MK
<</TP 1/I {pbs@obj298}/IF<</S/A/FB true>>>>/T (0.54)/ANN pdfmark end
 515 2930 a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj300} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930
a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj0} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj1} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj2} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj3} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj4} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj5} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj6} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj7} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj8} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj9} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj10} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj11} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj12} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj13} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj14} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj15} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj16} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj17} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj18} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj19} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj20} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj21} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj22} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj23} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj24} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj25} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj26} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj27} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj28} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj29} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj30} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj31} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj32} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj33} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj34} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj35} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj36} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj37} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj38} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj39} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj40} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj41} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj42} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj43} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj44} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj45} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj46} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj47} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj48} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj49} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj50} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj51} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj52} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj53} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj54} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj55} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj301}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj300}>>/MK
<</TP 1/I {pbs@obj300}/IF<</S/A/FB true>>>>/T (0.55)/ANN pdfmark end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj302} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj0} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj1} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj2} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj3} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj4} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj5} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj6} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj7} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj8} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj9} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj10} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj11} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj12} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj13} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj14} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj15} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj16} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj17} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj18} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj19} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj20} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj21} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj22} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj23} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj24} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj25} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj26} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj27} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj28} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj29} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj30} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj31} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj32} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj33} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj34} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj35} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj36} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj37} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj38} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj39} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj40} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj41} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj42} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj43} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj44} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj45} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj46} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj47} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj48} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj49} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj50} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj51} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj52} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj53} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj54} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj55} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj56} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930
a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj303}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj302}>>/MK
<</TP 1/I {pbs@obj302}/IF<</S/A/FB true>>>>/T (0.56)/ANN pdfmark end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj304} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj0} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj1} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj2} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj3} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj4} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj5} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj6} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj7} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj8} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj9} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj10} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj11} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj12} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj13} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj14} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj15} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj16} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj17} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj18} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj19} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj20} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj21} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj22} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj23} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj24} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj25} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj26} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj27} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj28} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj29} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj30} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj31} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj32} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj33} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj34} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj35} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj36} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj37} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj38} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj39} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj40} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj41} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj42} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj43} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj44} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj45} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj46} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj47} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj48} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj49} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj50} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj51} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj52} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj53} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj54} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj55} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj56} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj57} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj305}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj304}>>/MK
<</TP 1/I {pbs@obj304}/IF<</S/A/FB true>>>>/T (0.57)/ANN pdfmark end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj306} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj0} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj1} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj2} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj3} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj4} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj5} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj6} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj7} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj8} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj9} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj10} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj11} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj12} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj13} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj14} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj15} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj16} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj17} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj18} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj19} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj20} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj21} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj22} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj23} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj24} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj25} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj26} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj27} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj28} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj29} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj30} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj31} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj32} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj33} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj34} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj35} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj36} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj37} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj38} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj39} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj40} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj41} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj42} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj43} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj44} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj45} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj46} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj47} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj48} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj49} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj50} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj51} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj52} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj53} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj54} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj55} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj56} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj57} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj58} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
grestore
 515 2930
a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440
a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj307}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj306}>>/MK
<</TP 1/I {pbs@obj306}/IF<</S/A/FB true>>>>/T (0.58)/ANN pdfmark end
 515 2930 a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj308} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930
a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj0} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj1} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj2} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj3} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj4} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj5} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj6} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj7} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj8} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj9} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj10} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj11} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj12} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj13} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj14} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj15} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj16} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj17} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj18} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj19} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj20} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj21} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj22} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj23} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj24} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj25} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj26} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj27} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj28} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj29} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj30} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj31} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj32} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj33} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj34} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj35} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj36} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj37} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj38} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj39} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj40} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj41} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj42} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj43} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj44} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj45} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj46} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj47} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj48} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj49} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj50} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj51} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj52} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj53} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj54} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj55} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj56} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj57} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj58} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj59} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
grestore
 515 2930
a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440
a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj309}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj308}>>/MK
<</TP 1/I {pbs@obj308}/IF<</S/A/FB true>>>>/T (0.59)/ANN pdfmark end
 515 2930 a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj310} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930
a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj0} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj1} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj2} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj3} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj4} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj5} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj6} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj7} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj8} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj9} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj10} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj11} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj12} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj13} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj14} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj15} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj16} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj17} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj18} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj19} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj20} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj21} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj22} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj23} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj24} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj25} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj26} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj27} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj28} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj29} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj30} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj31} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj32} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj33} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj34} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj35} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj36} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj37} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj38} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj39} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj40} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj41} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj42} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj43} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj44} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj45} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj46} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj47} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj48} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj49} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj50} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj51} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj52} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj53} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj54} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj55} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj56} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj57} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj58} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj59} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj60} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj311}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj310}>>/MK
<</TP 1/I {pbs@obj310}/IF<</S/A/FB true>>>>/T (0.60)/ANN pdfmark end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj312} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj0} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj1} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj2} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj3} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj4} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj5} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj6} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj7} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj8} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj9} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj10} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj11} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj12} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj13} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj14} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj15} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj16} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj17} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj18} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj19} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj20} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj21} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj22} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj23} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj24} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj25} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj26} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj27} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj28} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj29} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj30} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj31} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj32} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj33} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj34} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj35} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj36} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj37} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj38} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj39} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj40} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj41} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj42} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj43} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj44} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj45} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj46} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj47} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj48} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj49} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj50} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj51} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj52} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj53} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj54} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj55} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj56} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj57} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj58} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj59} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj60} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj61} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930
a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj313}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj312}>>/MK
<</TP 1/I {pbs@obj312}/IF<</S/A/FB true>>>>/T (0.61)/ANN pdfmark end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj314} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj0} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj1} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj2} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj3} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj4} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj5} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj6} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj7} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj8} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj9} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj10} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj11} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj12} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj13} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj14} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj15} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj16} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj17} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj18} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj19} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj20} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj21} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj22} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj23} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj24} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj25} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj26} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj27} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj28} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj29} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj30} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj31} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj32} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj33} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj34} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj35} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj36} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj37} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj38} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj39} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj40} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj41} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj42} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj43} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj44} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj45} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj46} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj47} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj48} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj49} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj50} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj51} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj52} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj53} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj54} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj55} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj56} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj57} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj58} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj59} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj60} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj61} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj62} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj315}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj314}>>/MK
<</TP 1/I {pbs@obj314}/IF<</S/A/FB true>>>>/T (0.62)/ANN pdfmark end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj316} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj0} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj1} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj2} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj3} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj4} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj5} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj6} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj7} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj8} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj9} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj10} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj11} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj12} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj13} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj14} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj15} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj16} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj17} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj18} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj19} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj20} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj21} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj22} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj23} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj24} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj25} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj26} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj27} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj28} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj29} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj30} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj31} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj32} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj33} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj34} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj35} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj36} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj37} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj38} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj39} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj40} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj41} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj42} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj43} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj44} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj45} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj46} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj47} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj48} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj49} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj50} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj51} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj52} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj53} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj54} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj55} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj56} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj57} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj58} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj59} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj60} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj61} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj62} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj63} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
grestore
 515 2930
a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440
a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj317}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj316}>>/MK
<</TP 1/I {pbs@obj316}/IF<</S/A/FB true>>>>/T (0.63)/ANN pdfmark end
 515 2930 a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj318} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930
a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj0} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj1} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj2} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj3} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj4} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj5} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj6} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj7} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj8} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj9} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj10} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj11} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj12} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj13} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj14} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj15} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj16} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj17} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj18} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj19} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj20} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj21} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj22} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj23} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj24} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj25} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj26} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj27} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj28} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj29} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj30} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj31} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj32} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj33} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj34} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj35} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj36} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj37} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj38} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj39} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj40} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj41} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj42} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj43} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj44} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj45} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj46} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj47} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj48} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj49} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj50} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj51} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj52} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj53} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj54} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj55} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj56} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj57} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj58} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj59} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj60} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj61} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj62} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj63} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj64} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
grestore
 515 2930
a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440
a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj319}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj318}>>/MK
<</TP 1/I {pbs@obj318}/IF<</S/A/FB true>>>>/T (0.64)/ANN pdfmark end
 515 2930 a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj320} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930
a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj0} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj1} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj2} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj3} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj4} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj5} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj6} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj7} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj8} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj9} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj10} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj11} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj12} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj13} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj14} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj15} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj16} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj17} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj18} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj19} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj20} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj21} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj22} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj23} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj24} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj25} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj26} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj27} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj28} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj29} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj30} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj31} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj32} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj33} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj34} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj35} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj36} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj37} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj38} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj39} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj40} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj41} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj42} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj43} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj44} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj45} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj46} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj47} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj48} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj49} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj50} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj51} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj52} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj53} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj54} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj55} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj56} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj57} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj58} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj59} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj60} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj61} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj62} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj63} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj64} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj65} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj321}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj320}>>/MK
<</TP 1/I {pbs@obj320}/IF<</S/A/FB true>>>>/T (0.65)/ANN pdfmark end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj322} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj0} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj1} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj2} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj3} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj4} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj5} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj6} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj7} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj8} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj9} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj10} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj11} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj12} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj13} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj14} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj15} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj16} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj17} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj18} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj19} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj20} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj21} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj22} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj23} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj24} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj25} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj26} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj27} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj28} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj29} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj30} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj31} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj32} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj33} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj34} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj35} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj36} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj37} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj38} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj39} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj40} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj41} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj42} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj43} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj44} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj45} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj46} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj47} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj48} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj49} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj50} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj51} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj52} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj53} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj54} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj55} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj56} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj57} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj58} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj59} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj60} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj61} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj62} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj63} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj64} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj65} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj66} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930
a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj323}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj322}>>/MK
<</TP 1/I {pbs@obj322}/IF<</S/A/FB true>>>>/T (0.66)/ANN pdfmark end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj324} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj0} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj1} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj2} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj3} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj4} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj5} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj6} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj7} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj8} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj9} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj10} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj11} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj12} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj13} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj14} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj15} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj16} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj17} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj18} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj19} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj20} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj21} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj22} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj23} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj24} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj25} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj26} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj27} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj28} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj29} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj30} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj31} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj32} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj33} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj34} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj35} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj36} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj37} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj38} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj39} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj40} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj41} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj42} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj43} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj44} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj45} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj46} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj47} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj48} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj49} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj50} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj51} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj52} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj53} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj54} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj55} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj56} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj57} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj58} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj59} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj60} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj61} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj62} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj63} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj64} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj65} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj66} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj67} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj325}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj324}>>/MK
<</TP 1/I {pbs@obj324}/IF<</S/A/FB true>>>>/T (0.67)/ANN pdfmark end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj326} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj0} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj1} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj2} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj3} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj4} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj5} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj6} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj7} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj8} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj9} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj10} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj11} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj12} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj13} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj14} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj15} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj16} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj17} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj18} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj19} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj20} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj21} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj22} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj23} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj24} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj25} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj26} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj27} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj28} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj29} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj30} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj31} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj32} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj33} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj34} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj35} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj36} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj37} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj38} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj39} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj40} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj41} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj42} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj43} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj44} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj45} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj46} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj47} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj48} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj49} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj50} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj51} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj52} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj53} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj54} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj55} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj56} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj57} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj58} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj59} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj60} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj61} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj62} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj63} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj64} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj65} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj66} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj67} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj68} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
grestore
 515 2930
a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440
a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj327}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj326}>>/MK
<</TP 1/I {pbs@obj326}/IF<</S/A/FB true>>>>/T (0.68)/ANN pdfmark end
 515 2930 a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj328} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930
a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj0} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj1} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj2} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj3} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj4} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj5} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj6} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj7} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj8} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj9} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj10} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj11} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj12} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj13} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj14} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj15} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj16} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj17} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj18} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj19} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj20} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj21} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj22} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj23} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj24} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj25} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj26} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj27} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj28} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj29} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj30} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj31} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj32} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj33} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj34} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj35} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj36} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj37} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj38} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj39} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj40} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj41} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj42} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj43} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj44} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj45} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj46} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj47} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj48} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj49} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj50} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj51} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj52} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj53} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj54} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj55} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj56} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj57} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj58} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj59} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj60} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj61} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj62} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj63} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj64} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj65} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj66} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj67} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj68} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj69} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
grestore
 515 2930
a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440
a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj329}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj328}>>/MK
<</TP 1/I {pbs@obj328}/IF<</S/A/FB true>>>>/T (0.69)/ANN pdfmark end
 515 2930 a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj330} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930
a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj0} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj1} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj2} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj3} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj4} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj5} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj6} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj7} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj8} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj9} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj10} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj11} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj12} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj13} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj14} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj15} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj16} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj17} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj18} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj19} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj20} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj21} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj22} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj23} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj24} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj25} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj26} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj27} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj28} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj29} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj30} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj31} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj32} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj33} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj34} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj35} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj36} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj37} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj38} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj39} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj40} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj41} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj42} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj43} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj44} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj45} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj46} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj47} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj48} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj49} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj50} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj51} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj52} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj53} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj54} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj55} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj56} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj57} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj58} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj59} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj60} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj61} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj62} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj63} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj64} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj65} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj66} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj67} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj68} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj69} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj70} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj331}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj330}>>/MK
<</TP 1/I {pbs@obj330}/IF<</S/A/FB true>>>>/T (0.70)/ANN pdfmark end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj332} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj0} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj1} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj2} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj3} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj4} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj5} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj6} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj7} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj8} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj9} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj10} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj11} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj12} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj13} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj14} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj15} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj16} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj17} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj18} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj19} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj20} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj21} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj22} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj23} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj24} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj25} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj26} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj27} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj28} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj29} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj30} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj31} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj32} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj33} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj34} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj35} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj36} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj37} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj38} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj39} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj40} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj41} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj42} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj43} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj44} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj45} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj46} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj47} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj48} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj49} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj50} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj51} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj52} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj53} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj54} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj55} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj56} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj57} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj58} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj59} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj60} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj61} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj62} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj63} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj64} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj65} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj66} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj67} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj68} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj69} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj70} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj71} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930
a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj333}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj332}>>/MK
<</TP 1/I {pbs@obj332}/IF<</S/A/FB true>>>>/T (0.71)/ANN pdfmark end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj334} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj0} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj1} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj2} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj3} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj4} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj5} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj6} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj7} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj8} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj9} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj10} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj11} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj12} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj13} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj14} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj15} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj16} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj17} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj18} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj19} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj20} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj21} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj22} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj23} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj24} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj25} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj26} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj27} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj28} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj29} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj30} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj31} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj32} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj33} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj34} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj35} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj36} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj37} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj38} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj39} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj40} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj41} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj42} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj43} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj44} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj45} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj46} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj47} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj48} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj49} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj50} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj51} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj52} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj53} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj54} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj55} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj56} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj57} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj58} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj59} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj60} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj61} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj62} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj63} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj64} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj65} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj66} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj67} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj68} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj69} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj70} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj71} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj72} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj335}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj334}>>/MK
<</TP 1/I {pbs@obj334}/IF<</S/A/FB true>>>>/T (0.72)/ANN pdfmark end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj336} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj0} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj1} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj2} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj3} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj4} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj5} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj6} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj7} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj8} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj9} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj10} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj11} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj12} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj13} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj14} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj15} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj16} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj17} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj18} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj19} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj20} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj21} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj22} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj23} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj24} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj25} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj26} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj27} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj28} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj29} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj30} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj31} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj32} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj33} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj34} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj35} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj36} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj37} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj38} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj39} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj40} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj41} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj42} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj43} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj44} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj45} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj46} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj47} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj48} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj49} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj50} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj51} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj52} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj53} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj54} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj55} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj56} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj57} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj58} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj59} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj60} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj61} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj62} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj63} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj64} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj65} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj66} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj67} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj68} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj69} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj70} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj71} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj72} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj73} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
grestore
 515 2930
a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440
a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj337}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj336}>>/MK
<</TP 1/I {pbs@obj336}/IF<</S/A/FB true>>>>/T (0.73)/ANN pdfmark end
 515 2930 a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj338} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930
a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj0} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj1} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj2} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj3} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj4} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj5} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj6} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj7} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj8} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj9} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj10} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj11} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj12} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj13} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj14} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj15} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj16} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj17} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj18} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj19} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj20} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj21} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj22} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj23} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj24} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj25} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj26} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj27} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj28} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj29} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj30} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj31} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj32} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj33} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj34} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj35} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj36} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj37} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj38} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj39} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj40} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj41} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj42} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj43} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj44} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj45} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj46} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj47} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj48} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj49} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj50} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj51} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj52} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj53} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj54} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj55} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj56} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj57} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj58} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj59} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj60} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj61} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj62} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj63} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj64} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj65} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj66} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj67} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj68} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj69} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj70} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj71} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj72} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj73} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj74} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
grestore
 515 2930
a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440
a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj339}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj338}>>/MK
<</TP 1/I {pbs@obj338}/IF<</S/A/FB true>>>>/T (0.74)/ANN pdfmark end
 515 2930 a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj340} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930
a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj0} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj1} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj2} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj3} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj4} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj5} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj6} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj7} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj8} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj9} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj10} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj11} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj12} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj13} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj14} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj15} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj16} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj17} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj18} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj19} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj20} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj21} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj22} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj23} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj24} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj25} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj26} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj27} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj28} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj29} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj30} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj31} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj32} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj33} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj34} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj35} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj36} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj37} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj38} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj39} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj40} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj41} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj42} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj43} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj44} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj45} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj46} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj47} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj48} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj49} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj50} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj51} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj52} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj53} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj54} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj55} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj56} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj57} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj58} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj59} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj60} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj61} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj62} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj63} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj64} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj65} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj66} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj67} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj68} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj69} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj70} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj71} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj72} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj73} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj74} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj75} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj341}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj340}>>/MK
<</TP 1/I {pbs@obj340}/IF<</S/A/FB true>>>>/T (0.75)/ANN pdfmark end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj342} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj0} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj1} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj2} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj3} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj4} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj5} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj6} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj7} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj8} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj9} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj10} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj11} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj12} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj13} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj14} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj15} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj16} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj17} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj18} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj19} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj20} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj21} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj22} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj23} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj24} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj25} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj26} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj27} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj28} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj29} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj30} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj31} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj32} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj33} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj34} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj35} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj36} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj37} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj38} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj39} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj40} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj41} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj42} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj43} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj44} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj45} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj46} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj47} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj48} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj49} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj50} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj51} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj52} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj53} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj54} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj55} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj56} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj57} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj58} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj59} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj60} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj61} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj62} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj63} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj64} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj65} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj66} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj67} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj68} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj69} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj70} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj71} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj72} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj73} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj74} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj75} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj76} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930
a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj343}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj342}>>/MK
<</TP 1/I {pbs@obj342}/IF<</S/A/FB true>>>>/T (0.76)/ANN pdfmark end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj344} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj0} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj1} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj2} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj3} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj4} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj5} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj6} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj7} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj8} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj9} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj10} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj11} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj12} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj13} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj14} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj15} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj16} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj17} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj18} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj19} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj20} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj21} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj22} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj23} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj24} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj25} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj26} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj27} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj28} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj29} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj30} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj31} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj32} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj33} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj34} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj35} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj36} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj37} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj38} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj39} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj40} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj41} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj42} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj43} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj44} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj45} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj46} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj47} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj48} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj49} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj50} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj51} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj52} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj53} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj54} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj55} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj56} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj57} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj58} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj59} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj60} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj61} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj62} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj63} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj64} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj65} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj66} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj67} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj68} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj69} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj70} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj71} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj72} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj73} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj74} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj75} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj76} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj77} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj345}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj344}>>/MK
<</TP 1/I {pbs@obj344}/IF<</S/A/FB true>>>>/T (0.77)/ANN pdfmark end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj346} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj0} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj1} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj2} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj3} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj4} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj5} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj6} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj7} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj8} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj9} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj10} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj11} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj12} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj13} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj14} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj15} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj16} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj17} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj18} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj19} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj20} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj21} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj22} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj23} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj24} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj25} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj26} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj27} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj28} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj29} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj30} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj31} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj32} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj33} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj34} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj35} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj36} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj37} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj38} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj39} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj40} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj41} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj42} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj43} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj44} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj45} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj46} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj47} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj48} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj49} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj50} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj51} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj52} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj53} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj54} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj55} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj56} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj57} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj58} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj59} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj60} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj61} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj62} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj63} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj64} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj65} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj66} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj67} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj68} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj69} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj70} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj71} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj72} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj73} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj74} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj75} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj76} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj77} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj78} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
grestore
 515 2930
a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440
a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj347}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj346}>>/MK
<</TP 1/I {pbs@obj346}/IF<</S/A/FB true>>>>/T (0.78)/ANN pdfmark end
 515 2930 a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj348} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930
a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj0} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj1} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj2} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj3} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj4} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj5} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj6} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj7} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj8} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj9} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj10} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj11} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj12} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj13} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj14} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj15} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj16} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj17} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj18} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj19} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj20} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj21} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj22} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj23} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj24} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj25} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj26} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj27} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj28} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj29} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj30} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj31} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj32} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj33} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj34} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj35} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj36} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj37} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj38} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj39} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj40} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj41} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj42} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj43} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj44} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj45} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj46} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj47} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj48} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj49} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj50} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj51} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj52} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj53} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj54} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj55} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj56} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj57} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj58} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj59} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj60} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj61} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj62} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj63} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj64} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj65} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj66} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj67} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj68} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj69} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj70} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj71} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj72} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj73} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj74} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj75} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj76} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj77} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj78} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj79} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
grestore
 515 2930
a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440
a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj349}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj348}>>/MK
<</TP 1/I {pbs@obj348}/IF<</S/A/FB true>>>>/T (0.79)/ANN pdfmark end
 515 2930 a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj350} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930
a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj0} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj1} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj2} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj3} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj4} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj5} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj6} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj7} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj8} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj9} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj10} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj11} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj12} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj13} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj14} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj15} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj16} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj17} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj18} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj19} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj20} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj21} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj22} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj23} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj24} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj25} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj26} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj27} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj28} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj29} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj30} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj31} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj32} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj33} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj34} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj35} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj36} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj37} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj38} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj39} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj40} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj41} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj42} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj43} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj44} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj45} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj46} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj47} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj48} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj49} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj50} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj51} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj52} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj53} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj54} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj55} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj56} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj57} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj58} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj59} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj60} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj61} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj62} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj63} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj64} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj65} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj66} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj67} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj68} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj69} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj70} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj71} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj72} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj73} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj74} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj75} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj76} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj77} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj78} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj79} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj80} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj351}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj350}>>/MK
<</TP 1/I {pbs@obj350}/IF<</S/A/FB true>>>>/T (0.80)/ANN pdfmark end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj352} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj0} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj1} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj2} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj3} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj4} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj5} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj6} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj7} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj8} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj9} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj10} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj11} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj12} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj13} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj14} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj15} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj16} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj17} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj18} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj19} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj20} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj21} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj22} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj23} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj24} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj25} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj26} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj27} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj28} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj29} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj30} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj31} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj32} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj33} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj34} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj35} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj36} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj37} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj38} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj39} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj40} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj41} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj42} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj43} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj44} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj45} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj46} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj47} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj48} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj49} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj50} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj51} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj52} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj53} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj54} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj55} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj56} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj57} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj58} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj59} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj60} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj61} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj62} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj63} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj64} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj65} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj66} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj67} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj68} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj69} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj70} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj71} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj72} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj73} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj74} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj75} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj76} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj77} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj78} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj79} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj80} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj81} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930
a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj353}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj352}>>/MK
<</TP 1/I {pbs@obj352}/IF<</S/A/FB true>>>>/T (0.81)/ANN pdfmark end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj354} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj0} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj1} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj2} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj3} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj4} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj5} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj6} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj7} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj8} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj9} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj10} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj11} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj12} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj13} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj14} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj15} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj16} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj17} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj18} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj19} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj20} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj21} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj22} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj23} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj24} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj25} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj26} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj27} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj28} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj29} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj30} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj31} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj32} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj33} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj34} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj35} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj36} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj37} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj38} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj39} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj40} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj41} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj42} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj43} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj44} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj45} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj46} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj47} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj48} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj49} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj50} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj51} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj52} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj53} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj54} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj55} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj56} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj57} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj58} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj59} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj60} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj61} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj62} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj63} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj64} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj65} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj66} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj67} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj68} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj69} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj70} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj71} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj72} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj73} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj74} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj75} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj76} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj77} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj78} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj79} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj80} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj81} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj82} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj355}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj354}>>/MK
<</TP 1/I {pbs@obj354}/IF<</S/A/FB true>>>>/T (0.82)/ANN pdfmark end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj356} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj0} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj1} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj2} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj3} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj4} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj5} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj6} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj7} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj8} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj9} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj10} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj11} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj12} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj13} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj14} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj15} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj16} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj17} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj18} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj19} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj20} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj21} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj22} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj23} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj24} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj25} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj26} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj27} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj28} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj29} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj30} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj31} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj32} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj33} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj34} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj35} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj36} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj37} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj38} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj39} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj40} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj41} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj42} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj43} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj44} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj45} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj46} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj47} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj48} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj49} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj50} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj51} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj52} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj53} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj54} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj55} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj56} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj57} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj58} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj59} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj60} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj61} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj62} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj63} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj64} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj65} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj66} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj67} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj68} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj69} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj70} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj71} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj72} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj73} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj74} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj75} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj76} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj77} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj78} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj79} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj80} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj81} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj82} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj83} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
grestore
 515 2930
a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440
a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj357}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj356}>>/MK
<</TP 1/I {pbs@obj356}/IF<</S/A/FB true>>>>/T (0.83)/ANN pdfmark end
 515 2930 a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj358} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930
a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj0} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj1} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj2} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj3} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj4} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj5} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj6} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj7} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj8} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj9} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj10} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj11} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj12} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj13} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj14} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj15} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj16} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj17} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj18} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj19} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj20} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj21} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj22} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj23} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj24} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj25} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj26} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj27} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj28} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj29} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj30} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj31} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj32} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj33} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj34} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj35} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj36} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj37} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj38} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj39} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj40} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj41} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj42} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj43} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj44} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj45} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj46} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj47} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj48} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj49} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj50} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj51} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj52} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj53} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj54} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj55} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj56} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj57} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj58} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj59} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj60} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj61} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj62} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj63} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj64} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj65} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj66} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj67} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj68} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj69} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj70} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj71} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj72} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj73} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj74} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj75} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj76} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj77} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj78} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj79} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj80} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj81} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj82} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj83} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj84} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
grestore
 515 2930
a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440
a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj359}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj358}>>/MK
<</TP 1/I {pbs@obj358}/IF<</S/A/FB true>>>>/T (0.84)/ANN pdfmark end
 515 2930 a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj360} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930
a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj0} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj1} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj2} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj3} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj4} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj5} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj6} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj7} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj8} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj9} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj10} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj11} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj12} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj13} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj14} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj15} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj16} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj17} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj18} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj19} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj20} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj21} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj22} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj23} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj24} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj25} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj26} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj27} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj28} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj29} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj30} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj31} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj32} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj33} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj34} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj35} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj36} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj37} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj38} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj39} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj40} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj41} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj42} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj43} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj44} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj45} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj46} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj47} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj48} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj49} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj50} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj51} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj52} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj53} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj54} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj55} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj56} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj57} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj58} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj59} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj60} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj61} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj62} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj63} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj64} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj65} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj66} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj67} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj68} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj69} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj70} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj71} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj72} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj73} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj74} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj75} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj76} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj77} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj78} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj79} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj80} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj81} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj82} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj83} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj84} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj85} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj361}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj360}>>/MK
<</TP 1/I {pbs@obj360}/IF<</S/A/FB true>>>>/T (0.85)/ANN pdfmark end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj362} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj0} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj1} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj2} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj3} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj4} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj5} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj6} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj7} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj8} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj9} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj10} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj11} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj12} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj13} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj14} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj15} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj16} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj17} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj18} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj19} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj20} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj21} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj22} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj23} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj24} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj25} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj26} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj27} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj28} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj29} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj30} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj31} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj32} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj33} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj34} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj35} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj36} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj37} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj38} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj39} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj40} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj41} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj42} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj43} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj44} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj45} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj46} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj47} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj48} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj49} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj50} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj51} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj52} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj53} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj54} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj55} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj56} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj57} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj58} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj59} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj60} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj61} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj62} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj63} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj64} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj65} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj66} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj67} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj68} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj69} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj70} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj71} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj72} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj73} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj74} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj75} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj76} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj77} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj78} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj79} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj80} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj81} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj82} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj83} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj84} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj85} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj86} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930
a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj363}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj362}>>/MK
<</TP 1/I {pbs@obj362}/IF<</S/A/FB true>>>>/T (0.86)/ANN pdfmark end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj364} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj0} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj1} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj2} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj3} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj4} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj5} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj6} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj7} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj8} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj9} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj10} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj11} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj12} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj13} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj14} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj15} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj16} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj17} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj18} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj19} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj20} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj21} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj22} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj23} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj24} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj25} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj26} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj27} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj28} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj29} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj30} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj31} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj32} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj33} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj34} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj35} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj36} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj37} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj38} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj39} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj40} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj41} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj42} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj43} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj44} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj45} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj46} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj47} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj48} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj49} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj50} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj51} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj52} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj53} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj54} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj55} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj56} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj57} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj58} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj59} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj60} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj61} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj62} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj63} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj64} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj65} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj66} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj67} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj68} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj69} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj70} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj71} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj72} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj73} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj74} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj75} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj76} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj77} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj78} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj79} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj80} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj81} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj82} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj83} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj84} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj85} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj86} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj87} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj365}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj364}>>/MK
<</TP 1/I {pbs@obj364}/IF<</S/A/FB true>>>>/T (0.87)/ANN pdfmark end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj366} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj0} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj1} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj2} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj3} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj4} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj5} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj6} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj7} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj8} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj9} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj10} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj11} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj12} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj13} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj14} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj15} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj16} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj17} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj18} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj19} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj20} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj21} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj22} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj23} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj24} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj25} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj26} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj27} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj28} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj29} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj30} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj31} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj32} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj33} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj34} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj35} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj36} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj37} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj38} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj39} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj40} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj41} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj42} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj43} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj44} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj45} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj46} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj47} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj48} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj49} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj50} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj51} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj52} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj53} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj54} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj55} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj56} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj57} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj58} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj59} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj60} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj61} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj62} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj63} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj64} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj65} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj66} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj67} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj68} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj69} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj70} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj71} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj72} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj73} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj74} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj75} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj76} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj77} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj78} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj79} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj80} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj81} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj82} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj83} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj84} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj85} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj86} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj87} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj88} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
grestore
 515 2930
a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440
a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj367}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj366}>>/MK
<</TP 1/I {pbs@obj366}/IF<</S/A/FB true>>>>/T (0.88)/ANN pdfmark end
 515 2930 a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj368} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930
a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj0} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj1} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj2} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj3} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj4} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj5} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj6} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj7} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj8} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj9} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj10} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj11} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj12} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj13} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj14} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj15} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj16} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj17} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj18} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj19} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj20} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj21} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj22} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj23} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj24} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj25} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj26} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj27} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj28} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj29} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj30} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj31} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj32} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj33} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj34} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj35} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj36} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj37} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj38} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj39} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj40} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj41} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj42} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj43} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj44} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj45} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj46} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj47} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj48} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj49} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj50} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj51} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj52} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj53} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj54} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj55} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj56} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj57} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj58} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj59} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj60} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj61} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj62} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj63} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj64} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj65} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj66} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj67} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj68} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj69} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj70} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj71} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj72} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj73} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj74} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj75} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj76} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj77} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj78} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj79} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj80} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj81} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj82} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj83} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj84} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj85} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj86} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj87} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj88} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj89} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
grestore
 515 2930
a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440
a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj369}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj368}>>/MK
<</TP 1/I {pbs@obj368}/IF<</S/A/FB true>>>>/T (0.89)/ANN pdfmark end
 515 2930 a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj370} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930
a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj0} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj1} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj2} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj3} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj4} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj5} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj6} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj7} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj8} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj9} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj10} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj11} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj12} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj13} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj14} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj15} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj16} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj17} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj18} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj19} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj20} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj21} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj22} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj23} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj24} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj25} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj26} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj27} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj28} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj29} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj30} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj31} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj32} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj33} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj34} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj35} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj36} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj37} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj38} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj39} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj40} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj41} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj42} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj43} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj44} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj45} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj46} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj47} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj48} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj49} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj50} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj51} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj52} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj53} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj54} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj55} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj56} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj57} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj58} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj59} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj60} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj61} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj62} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj63} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj64} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj65} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj66} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj67} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj68} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj69} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj70} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj71} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj72} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj73} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj74} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj75} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj76} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj77} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj78} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj79} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj80} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj81} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj82} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj83} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj84} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj85} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj86} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj87} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj88} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj89} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj90} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj371}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj370}>>/MK
<</TP 1/I {pbs@obj370}/IF<</S/A/FB true>>>>/T (0.90)/ANN pdfmark end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj372} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj0} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj1} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj2} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj3} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj4} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj5} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj6} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj7} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj8} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj9} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj10} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj11} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj12} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj13} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj14} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj15} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj16} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj17} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj18} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj19} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj20} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj21} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj22} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj23} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj24} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj25} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj26} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj27} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj28} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj29} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj30} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj31} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj32} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj33} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj34} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj35} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj36} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj37} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj38} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj39} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj40} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj41} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj42} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj43} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj44} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj45} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj46} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj47} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj48} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj49} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj50} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj51} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj52} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj53} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj54} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj55} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj56} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj57} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj58} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj59} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj60} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj61} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj62} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj63} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj64} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj65} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj66} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj67} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj68} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj69} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj70} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj71} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj72} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj73} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj74} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj75} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj76} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj77} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj78} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj79} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj80} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj81} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj82} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj83} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj84} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj85} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj86} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj87} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj88} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj89} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj90} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj91} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930
a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj373}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj372}>>/MK
<</TP 1/I {pbs@obj372}/IF<</S/A/FB true>>>>/T (0.91)/ANN pdfmark end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj374} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj0} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj1} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj2} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj3} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj4} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj5} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj6} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj7} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj8} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj9} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj10} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj11} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj12} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj13} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj14} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj15} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj16} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj17} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj18} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj19} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj20} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj21} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj22} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj23} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj24} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj25} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj26} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj27} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj28} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj29} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj30} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj31} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj32} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj33} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj34} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj35} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj36} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj37} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj38} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj39} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj40} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj41} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj42} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj43} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj44} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj45} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj46} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj47} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj48} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj49} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj50} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj51} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj52} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj53} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj54} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj55} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj56} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj57} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj58} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj59} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj60} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj61} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj62} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj63} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj64} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj65} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj66} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj67} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj68} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj69} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj70} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj71} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj72} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj73} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj74} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj75} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj76} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj77} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj78} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj79} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj80} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj81} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj82} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj83} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj84} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj85} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj86} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj87} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj88} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj89} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj90} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj91} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj92} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj375}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj374}>>/MK
<</TP 1/I {pbs@obj374}/IF<</S/A/FB true>>>>/T (0.92)/ANN pdfmark end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj376} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj0} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj1} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj2} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj3} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj4} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj5} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj6} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj7} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj8} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj9} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj10} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj11} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj12} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj13} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj14} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj15} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj16} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj17} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj18} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj19} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj20} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj21} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj22} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj23} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj24} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj25} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj26} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj27} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj28} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj29} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj30} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj31} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj32} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj33} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj34} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj35} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj36} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj37} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj38} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj39} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj40} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj41} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj42} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj43} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj44} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj45} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj46} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj47} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj48} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj49} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj50} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj51} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj52} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj53} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj54} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj55} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj56} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj57} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj58} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj59} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj60} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj61} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj62} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj63} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj64} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj65} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj66} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj67} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj68} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj69} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj70} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj71} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj72} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj73} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj74} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj75} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj76} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj77} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj78} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj79} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj80} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj81} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj82} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj83} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj84} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj85} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj86} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj87} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj88} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj89} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj90} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj91} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj92} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj93} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
grestore
 515 2930
a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440
a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj377}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj376}>>/MK
<</TP 1/I {pbs@obj376}/IF<</S/A/FB true>>>>/T (0.93)/ANN pdfmark end
 515 2930 a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj378} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930
a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj0} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj1} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj2} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj3} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj4} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj5} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj6} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj7} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj8} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj9} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj10} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj11} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj12} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj13} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj14} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj15} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj16} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj17} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj18} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj19} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj20} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj21} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj22} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj23} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj24} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj25} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj26} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj27} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj28} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj29} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj30} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj31} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj32} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj33} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj34} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj35} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj36} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj37} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj38} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj39} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj40} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj41} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj42} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj43} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj44} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj45} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj46} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj47} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj48} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj49} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj50} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj51} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj52} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj53} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj54} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj55} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj56} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj57} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj58} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj59} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj60} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj61} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj62} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj63} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj64} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj65} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj66} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj67} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj68} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj69} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj70} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj71} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj72} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj73} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj74} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj75} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj76} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj77} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj78} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj79} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj80} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj81} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj82} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj83} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj84} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj85} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj86} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj87} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj88} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj89} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj90} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj91} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj92} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj93} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj94} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
grestore
 515 2930
a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440
a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj379}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj378}>>/MK
<</TP 1/I {pbs@obj378}/IF<</S/A/FB true>>>>/T (0.94)/ANN pdfmark end
 515 2930 a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj380} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930
a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj0} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj1} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj2} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj3} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj4} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj5} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj6} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj7} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj8} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj9} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj10} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj11} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj12} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj13} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj14} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj15} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj16} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj17} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj18} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj19} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj20} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj21} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj22} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj23} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj24} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj25} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj26} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj27} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj28} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj29} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj30} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj31} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj32} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj33} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj34} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj35} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj36} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj37} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj38} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj39} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj40} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj41} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj42} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj43} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj44} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj45} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj46} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj47} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj48} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj49} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj50} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj51} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj52} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj53} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj54} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj55} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj56} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj57} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj58} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj59} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj60} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj61} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj62} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj63} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj64} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj65} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj66} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj67} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj68} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj69} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj70} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj71} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj72} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj73} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj74} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj75} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj76} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj77} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj78} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj79} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj80} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj81} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj82} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj83} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj84} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj85} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj86} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj87} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj88} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj89} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj90} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj91} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj92} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj93} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj94} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj95} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj381}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj380}>>/MK
<</TP 1/I {pbs@obj380}/IF<</S/A/FB true>>>>/T (0.95)/ANN pdfmark end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj382} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj0} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj1} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj2} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj3} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj4} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj5} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj6} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj7} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj8} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj9} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj10} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj11} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj12} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj13} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj14} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj15} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj16} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj17} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj18} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj19} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj20} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj21} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj22} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj23} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj24} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj25} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj26} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj27} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj28} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj29} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj30} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj31} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj32} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj33} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj34} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj35} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj36} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj37} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj38} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj39} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj40} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj41} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj42} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj43} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj44} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj45} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj46} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj47} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj48} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj49} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj50} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj51} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj52} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj53} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj54} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj55} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj56} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj57} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj58} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj59} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj60} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj61} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj62} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj63} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj64} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj65} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj66} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj67} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj68} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj69} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj70} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj71} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj72} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj73} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj74} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj75} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj76} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj77} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj78} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj79} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj80} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj81} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj82} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj83} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj84} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj85} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj86} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj87} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj88} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj89} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj90} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj91} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj92} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj93} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj94} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj95} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj96} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930
a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj383}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj382}>>/MK
<</TP 1/I {pbs@obj382}/IF<</S/A/FB true>>>>/T (0.96)/ANN pdfmark end
 515 2930 a 515 2930
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj384} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj0} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj1} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj2} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj3} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj4} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj5} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj6} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj7} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj8} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj9} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj10} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj11} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj12} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj13} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj14} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj15} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj16} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj17} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj18} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj19} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj20} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj21} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj22} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj23} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj24} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj25} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj26} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj27} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj28} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj29} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj30} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj31} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj32} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj33} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj34} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj35} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj36} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj37} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj38} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj39} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj40} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj41} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj42} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj43} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj44} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj45} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj46} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj47} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj48} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj49} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj50} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj51} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj52} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj53} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj54} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj55} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj56} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj57} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj58} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj59} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj60} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj61} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj62} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj63} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj64} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj65} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj66} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj67} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj68} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj69} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj70} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj71} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj72} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj73} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj74} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj75} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj76} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj77} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj78} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj79} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj80} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj81} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj82} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj83} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj84} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj85} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj86} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj87} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj88} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj89} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj90} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj91} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj92} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj93} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj94} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj95} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj96} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj97} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj385}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj384}>>/MK
<</TP 1/I {pbs@obj384}/IF<</S/A/FB true>>>>/T (0.97)/ANN pdfmark end
 515 2930
a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj386} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930 a 515 2930 a
gsave
 515 2930 a 515 2930
a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj0} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj1} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj2} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj3} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj4} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj5} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj6} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj7} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj8} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj9} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj10} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj11} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj12} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj13} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj14} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj15} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj16} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj17} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj18} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj19} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj20} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj21} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj22} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj23} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj24} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj25} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj26} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj27} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj28} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj29} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj30} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj31} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj32} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj33} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj34} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj35} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj36} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj37} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj38} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj39} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj40} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj41} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj42} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj43} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj44} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj45} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj46} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj47} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj48} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj49} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj50} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj51} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj52} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj53} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj54} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj55} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj56} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj57} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj58} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj59} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj60} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj61} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj62} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj63} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj64} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj65} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj66} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj67} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj68} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj69} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj70} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj71} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj72} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj73} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj74} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj75} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj76} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj77} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj78} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj79} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj80} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj81} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj82} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj83} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj84} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj85} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj86} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj87} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj88} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj89} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj90} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj91} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj92} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj93} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj94} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj95} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj96} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj97} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj98} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
grestore
 515 2930
a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440
a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj387}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj386}>>/MK
<</TP 1/I {pbs@obj386}/IF<</S/A/FB true>>>>/T (0.98)/ANN pdfmark end
 515 2930 a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj388} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930
a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj0} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj1} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj2} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj3} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj4} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj5} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj6} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj7} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj8} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj9} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj10} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj11} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj12} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj13} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj14} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj15} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj16} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj17} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj18} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj19} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj20} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj21} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj22} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj23} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj24} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj25} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj26} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj27} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj28} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj29} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj30} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj31} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj32} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj33} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj34} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj35} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj36} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj37} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj38} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj39} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj40} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj41} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj42} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj43} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj44} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj45} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj46} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj47} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj48} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj49} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj50} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj51} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj52} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj53} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj54} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj55} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj56} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj57} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj58} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj59} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj60} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj61} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj62} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj63} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj64} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj65} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj66} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj67} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj68} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj69} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj70} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj71} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj72} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj73} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj74} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj75} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj76} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj77} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj78} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj79} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj80} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj81} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj82} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj83} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj84} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj85} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj86} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj87} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj88} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj89} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj90} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj91} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj92} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj93} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj94} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj95} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj96} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj97} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj98} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj99} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
grestore
 515 2930
a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440
a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj389}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj388}>>/MK
<</TP 1/I {pbs@obj388}/IF<</S/A/FB true>>>>/T (0.99)/ANN pdfmark end
 515 2930 a 515 2930 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 19653496 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 20809584 65536 div 72.27 div DVImag mul Resolution mul
add}ifelse}{0 65536 div 72.27 div DVImag mul VResolution mul add}ifelse
translate mark /_objdef {pbs@obj390} /BBox [isls{landplus90{19653496
65536 div 72.27 div DVImag mul VResolution mul neg 20809584 65536 div
72.27 div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul
VResolution mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul
neg 0 19653496 65536 div 72.27 div DVImag mul VResolution mul 20809584
65536 div 72.27 div DVImag mul Resolution mul neg}ifelse}{0 19653496
65536 div 72.27 div DVImag mul VResolution mul 20809584 65536 div 72.27
div DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul neg}ifelse]/BP pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if
exch neg exch neg translate}?pdfmark end
 515 2930
a 515 2930 a
gsave
 515 2930 a 515 2930 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj0} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj1} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj2} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj3} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj4} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj5} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj6} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj7} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj8} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj9} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj10} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj11} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj12} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj13} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj14} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj15} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj16} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj17} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj18} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj19} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj20} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj21} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj22} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj23} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj24} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj25} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj26} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj27} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj28} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj29} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj30} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj31} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj32} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj33} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj34} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj35} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj36} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj37} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj38} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj39} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj40} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj41} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj42} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj43} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj44} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj45} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj46} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj47} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj48} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj49} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj50} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj51} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj52} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj53} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj54} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj55} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj56} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj57} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj58} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj59} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj60} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj61} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj62} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj63} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj64} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj65} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj66} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj67} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj68} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj69} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj70} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj71} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj72} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj73} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj74} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj75} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj76} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj77} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj78} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj79} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj80} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj81} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj82} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj83} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj84} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj85} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj86} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj87} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj88} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj89} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj90} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj91} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj92} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj93} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj94} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj95} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj96} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj97} /SP pdfmark grestore
end
 515 2930 a 515 2930
a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj98} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj99} /SP pdfmark grestore
end
 515 2930 a 515 2930 a
 SDict begin gsave currentpoint translate isls{90 landplus90 not{neg}if
rotate}if 1 1 div dup neg scale mark {pbs@obj100} /SP pdfmark grestore
end
 515 2930
a 515 2930 a
grestore
 515 2930 a 515 2930 a
 SDict begin mark /EP pdfmark grestore end
 515 2930 a 515 2930
a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj391}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj390}>>/MK
<</TP 1/I {pbs@obj390}/IF<</S/A/FB true>>>>/T (0.100)/ANN pdfmark end
 515 2930
a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930
a
 SDict begin mark /_objdef {pbs@obj392}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj101}>>/MK
<</TP 1/I {pbs@obj101}/IF<</S/A/FB true>>>>/T (0.101)/ANN pdfmark end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440
a 515 2930 a
 SDict begin mark /_objdef {pbs@obj393}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj102}>>/MK
<</TP 1/I {pbs@obj102}/IF<</S/A/FB true>>>>/T (0.102)/ANN pdfmark end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440
a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj394}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj103}>>/MK
<</TP 1/I {pbs@obj103}/IF<</S/A/FB true>>>>/T (0.103)/ANN pdfmark end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930
a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj395}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj104}>>/MK
<</TP 1/I {pbs@obj104}/IF<</S/A/FB true>>>>/T (0.104)/ANN pdfmark end
 515 2930 a 515 2930
a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj396}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj105}>>/MK
<</TP 1/I {pbs@obj105}/IF<</S/A/FB true>>>>/T (0.105)/ANN pdfmark end
 515 2930
a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930
a
 SDict begin mark /_objdef {pbs@obj397}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj106}>>/MK
<</TP 1/I {pbs@obj106}/IF<</S/A/FB true>>>>/T (0.106)/ANN pdfmark end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440
a 515 2930 a
 SDict begin mark /_objdef {pbs@obj398}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj107}>>/MK
<</TP 1/I {pbs@obj107}/IF<</S/A/FB true>>>>/T (0.107)/ANN pdfmark end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440
a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj399}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj108}>>/MK
<</TP 1/I {pbs@obj108}/IF<</S/A/FB true>>>>/T (0.108)/ANN pdfmark end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930
a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj400}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj109}>>/MK
<</TP 1/I {pbs@obj109}/IF<</S/A/FB true>>>>/T (0.109)/ANN pdfmark end
 515 2930 a 515 2930
a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj401}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj110}>>/MK
<</TP 1/I {pbs@obj110}/IF<</S/A/FB true>>>>/T (0.110)/ANN pdfmark end
 515 2930
a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930
a
 SDict begin mark /_objdef {pbs@obj402}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj111}>>/MK
<</TP 1/I {pbs@obj111}/IF<</S/A/FB true>>>>/T (0.111)/ANN pdfmark end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440
a 515 2930 a
 SDict begin mark /_objdef {pbs@obj403}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj112}>>/MK
<</TP 1/I {pbs@obj112}/IF<</S/A/FB true>>>>/T (0.112)/ANN pdfmark end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440
a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj404}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj113}>>/MK
<</TP 1/I {pbs@obj113}/IF<</S/A/FB true>>>>/T (0.113)/ANN pdfmark end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930
a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj405}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj114}>>/MK
<</TP 1/I {pbs@obj114}/IF<</S/A/FB true>>>>/T (0.114)/ANN pdfmark end
 515 2930 a 515 2930
a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj406}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj115}>>/MK
<</TP 1/I {pbs@obj115}/IF<</S/A/FB true>>>>/T (0.115)/ANN pdfmark end
 515 2930
a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930
a
 SDict begin mark /_objdef {pbs@obj407}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj116}>>/MK
<</TP 1/I {pbs@obj116}/IF<</S/A/FB true>>>>/T (0.116)/ANN pdfmark end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440
a 515 2930 a
 SDict begin mark /_objdef {pbs@obj408}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj117}>>/MK
<</TP 1/I {pbs@obj117}/IF<</S/A/FB true>>>>/T (0.117)/ANN pdfmark end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440
a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj409}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj118}>>/MK
<</TP 1/I {pbs@obj118}/IF<</S/A/FB true>>>>/T (0.118)/ANN pdfmark end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930
a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj410}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj119}>>/MK
<</TP 1/I {pbs@obj119}/IF<</S/A/FB true>>>>/T (0.119)/ANN pdfmark end
 515 2930 a 515 2930
a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj411}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj120}>>/MK
<</TP 1/I {pbs@obj120}/IF<</S/A/FB true>>>>/T (0.120)/ANN pdfmark end
 515 2930
a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930
a
 SDict begin mark /_objdef {pbs@obj412}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj121}>>/MK
<</TP 1/I {pbs@obj121}/IF<</S/A/FB true>>>>/T (0.121)/ANN pdfmark end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440
a 515 2930 a
 SDict begin mark /_objdef {pbs@obj413}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj122}>>/MK
<</TP 1/I {pbs@obj122}/IF<</S/A/FB true>>>>/T (0.122)/ANN pdfmark end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440
a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj414}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj123}>>/MK
<</TP 1/I {pbs@obj123}/IF<</S/A/FB true>>>>/T (0.123)/ANN pdfmark end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930
a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj415}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj124}>>/MK
<</TP 1/I {pbs@obj124}/IF<</S/A/FB true>>>>/T (0.124)/ANN pdfmark end
 515 2930 a 515 2930
a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj416}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj125}>>/MK
<</TP 1/I {pbs@obj125}/IF<</S/A/FB true>>>>/T (0.125)/ANN pdfmark end
 515 2930
a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930
a
 SDict begin mark /_objdef {pbs@obj417}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj126}>>/MK
<</TP 1/I {pbs@obj126}/IF<</S/A/FB true>>>>/T (0.126)/ANN pdfmark end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440
a 515 2930 a
 SDict begin mark /_objdef {pbs@obj418}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj127}>>/MK
<</TP 1/I {pbs@obj127}/IF<</S/A/FB true>>>>/T (0.127)/ANN pdfmark end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440
a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj419}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj128}>>/MK
<</TP 1/I {pbs@obj128}/IF<</S/A/FB true>>>>/T (0.128)/ANN pdfmark end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930
a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj420}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj129}>>/MK
<</TP 1/I {pbs@obj129}/IF<</S/A/FB true>>>>/T (0.129)/ANN pdfmark end
 515 2930 a 515 2930
a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj421}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj130}>>/MK
<</TP 1/I {pbs@obj130}/IF<</S/A/FB true>>>>/T (0.130)/ANN pdfmark end
 515 2930
a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930
a
 SDict begin mark /_objdef {pbs@obj422}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj131}>>/MK
<</TP 1/I {pbs@obj131}/IF<</S/A/FB true>>>>/T (0.131)/ANN pdfmark end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440
a 515 2930 a
 SDict begin mark /_objdef {pbs@obj423}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj132}>>/MK
<</TP 1/I {pbs@obj132}/IF<</S/A/FB true>>>>/T (0.132)/ANN pdfmark end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440
a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj424}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj133}>>/MK
<</TP 1/I {pbs@obj133}/IF<</S/A/FB true>>>>/T (0.133)/ANN pdfmark end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930
a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj425}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj134}>>/MK
<</TP 1/I {pbs@obj134}/IF<</S/A/FB true>>>>/T (0.134)/ANN pdfmark end
 515 2930 a 515 2930
a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj426}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj135}>>/MK
<</TP 1/I {pbs@obj135}/IF<</S/A/FB true>>>>/T (0.135)/ANN pdfmark end
 515 2930
a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930
a
 SDict begin mark /_objdef {pbs@obj427}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj136}>>/MK
<</TP 1/I {pbs@obj136}/IF<</S/A/FB true>>>>/T (0.136)/ANN pdfmark end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440
a 515 2930 a
 SDict begin mark /_objdef {pbs@obj428}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj137}>>/MK
<</TP 1/I {pbs@obj137}/IF<</S/A/FB true>>>>/T (0.137)/ANN pdfmark end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440
a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj429}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj138}>>/MK
<</TP 1/I {pbs@obj138}/IF<</S/A/FB true>>>>/T (0.138)/ANN pdfmark end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930
a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj430}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj139}>>/MK
<</TP 1/I {pbs@obj139}/IF<</S/A/FB true>>>>/T (0.139)/ANN pdfmark end
 515 2930 a 515 2930
a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj431}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj140}>>/MK
<</TP 1/I {pbs@obj140}/IF<</S/A/FB true>>>>/T (0.140)/ANN pdfmark end
 515 2930
a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930
a
 SDict begin mark /_objdef {pbs@obj432}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj141}>>/MK
<</TP 1/I {pbs@obj141}/IF<</S/A/FB true>>>>/T (0.141)/ANN pdfmark end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440
a 515 2930 a
 SDict begin mark /_objdef {pbs@obj433}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj142}>>/MK
<</TP 1/I {pbs@obj142}/IF<</S/A/FB true>>>>/T (0.142)/ANN pdfmark end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440
a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj434}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj143}>>/MK
<</TP 1/I {pbs@obj143}/IF<</S/A/FB true>>>>/T (0.143)/ANN pdfmark end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930
a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj435}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj144}>>/MK
<</TP 1/I {pbs@obj144}/IF<</S/A/FB true>>>>/T (0.144)/ANN pdfmark end
 515 2930 a 515 2930
a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj436}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj145}>>/MK
<</TP 1/I {pbs@obj145}/IF<</S/A/FB true>>>>/T (0.145)/ANN pdfmark end
 515 2930
a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930
a
 SDict begin mark /_objdef {pbs@obj437}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj146}>>/MK
<</TP 1/I {pbs@obj146}/IF<</S/A/FB true>>>>/T (0.146)/ANN pdfmark end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440
a 515 2930 a
 SDict begin mark /_objdef {pbs@obj438}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj147}>>/MK
<</TP 1/I {pbs@obj147}/IF<</S/A/FB true>>>>/T (0.147)/ANN pdfmark end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440
a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj439}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj148}>>/MK
<</TP 1/I {pbs@obj148}/IF<</S/A/FB true>>>>/T (0.148)/ANN pdfmark end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930
a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj440}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj149}>>/MK
<</TP 1/I {pbs@obj149}/IF<</S/A/FB true>>>>/T (0.149)/ANN pdfmark end
 515 2930 a 515 2930
a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj441}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj150}>>/MK
<</TP 1/I {pbs@obj150}/IF<</S/A/FB true>>>>/T (0.150)/ANN pdfmark end
 515 2930
a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930
a
 SDict begin mark /_objdef {pbs@obj442}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj151}>>/MK
<</TP 1/I {pbs@obj151}/IF<</S/A/FB true>>>>/T (0.151)/ANN pdfmark end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440
a 515 2930 a
 SDict begin mark /_objdef {pbs@obj443}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj152}>>/MK
<</TP 1/I {pbs@obj152}/IF<</S/A/FB true>>>>/T (0.152)/ANN pdfmark end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440
a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj444}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj153}>>/MK
<</TP 1/I {pbs@obj153}/IF<</S/A/FB true>>>>/T (0.153)/ANN pdfmark end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930
a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj445}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj154}>>/MK
<</TP 1/I {pbs@obj154}/IF<</S/A/FB true>>>>/T (0.154)/ANN pdfmark end
 515 2930 a 515 2930
a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj446}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj155}>>/MK
<</TP 1/I {pbs@obj155}/IF<</S/A/FB true>>>>/T (0.155)/ANN pdfmark end
 515 2930
a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930
a
 SDict begin mark /_objdef {pbs@obj447}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj156}>>/MK
<</TP 1/I {pbs@obj156}/IF<</S/A/FB true>>>>/T (0.156)/ANN pdfmark end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440
a 515 2930 a
 SDict begin mark /_objdef {pbs@obj448}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj157}>>/MK
<</TP 1/I {pbs@obj157}/IF<</S/A/FB true>>>>/T (0.157)/ANN pdfmark end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440
a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj449}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj158}>>/MK
<</TP 1/I {pbs@obj158}/IF<</S/A/FB true>>>>/T (0.158)/ANN pdfmark end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930
a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj450}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj159}>>/MK
<</TP 1/I {pbs@obj159}/IF<</S/A/FB true>>>>/T (0.159)/ANN pdfmark end
 515 2930 a 515 2930
a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj451}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj160}>>/MK
<</TP 1/I {pbs@obj160}/IF<</S/A/FB true>>>>/T (0.160)/ANN pdfmark end
 515 2930
a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930
a
 SDict begin mark /_objdef {pbs@obj452}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj161}>>/MK
<</TP 1/I {pbs@obj161}/IF<</S/A/FB true>>>>/T (0.161)/ANN pdfmark end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440
a 515 2930 a
 SDict begin mark /_objdef {pbs@obj453}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj162}>>/MK
<</TP 1/I {pbs@obj162}/IF<</S/A/FB true>>>>/T (0.162)/ANN pdfmark end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440
a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj454}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj163}>>/MK
<</TP 1/I {pbs@obj163}/IF<</S/A/FB true>>>>/T (0.163)/ANN pdfmark end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930
a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj455}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj164}>>/MK
<</TP 1/I {pbs@obj164}/IF<</S/A/FB true>>>>/T (0.164)/ANN pdfmark end
 515 2930 a 515 2930
a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj456}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj165}>>/MK
<</TP 1/I {pbs@obj165}/IF<</S/A/FB true>>>>/T (0.165)/ANN pdfmark end
 515 2930
a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930
a
 SDict begin mark /_objdef {pbs@obj457}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj166}>>/MK
<</TP 1/I {pbs@obj166}/IF<</S/A/FB true>>>>/T (0.166)/ANN pdfmark end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440
a 515 2930 a
 SDict begin mark /_objdef {pbs@obj458}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj167}>>/MK
<</TP 1/I {pbs@obj167}/IF<</S/A/FB true>>>>/T (0.167)/ANN pdfmark end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440
a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj459}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj168}>>/MK
<</TP 1/I {pbs@obj168}/IF<</S/A/FB true>>>>/T (0.168)/ANN pdfmark end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930
a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj460}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj169}>>/MK
<</TP 1/I {pbs@obj169}/IF<</S/A/FB true>>>>/T (0.169)/ANN pdfmark end
 515 2930 a 515 2930
a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj461}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj170}>>/MK
<</TP 1/I {pbs@obj170}/IF<</S/A/FB true>>>>/T (0.170)/ANN pdfmark end
 515 2930
a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930
a
 SDict begin mark /_objdef {pbs@obj462}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj171}>>/MK
<</TP 1/I {pbs@obj171}/IF<</S/A/FB true>>>>/T (0.171)/ANN pdfmark end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440
a 515 2930 a
 SDict begin mark /_objdef {pbs@obj463}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj172}>>/MK
<</TP 1/I {pbs@obj172}/IF<</S/A/FB true>>>>/T (0.172)/ANN pdfmark end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440
a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj464}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj173}>>/MK
<</TP 1/I {pbs@obj173}/IF<</S/A/FB true>>>>/T (0.173)/ANN pdfmark end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930
a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj465}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj174}>>/MK
<</TP 1/I {pbs@obj174}/IF<</S/A/FB true>>>>/T (0.174)/ANN pdfmark end
 515 2930 a 515 2930
a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj466}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj175}>>/MK
<</TP 1/I {pbs@obj175}/IF<</S/A/FB true>>>>/T (0.175)/ANN pdfmark end
 515 2930
a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930
a
 SDict begin mark /_objdef {pbs@obj467}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj176}>>/MK
<</TP 1/I {pbs@obj176}/IF<</S/A/FB true>>>>/T (0.176)/ANN pdfmark end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440
a 515 2930 a
 SDict begin mark /_objdef {pbs@obj468}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj177}>>/MK
<</TP 1/I {pbs@obj177}/IF<</S/A/FB true>>>>/T (0.177)/ANN pdfmark end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440
a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj469}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj178}>>/MK
<</TP 1/I {pbs@obj178}/IF<</S/A/FB true>>>>/T (0.178)/ANN pdfmark end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930
a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj470}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj179}>>/MK
<</TP 1/I {pbs@obj179}/IF<</S/A/FB true>>>>/T (0.179)/ANN pdfmark end
 515 2930 a 515 2930
a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj471}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj180}>>/MK
<</TP 1/I {pbs@obj180}/IF<</S/A/FB true>>>>/T (0.180)/ANN pdfmark end
 515 2930
a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930
a
 SDict begin mark /_objdef {pbs@obj472}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj181}>>/MK
<</TP 1/I {pbs@obj181}/IF<</S/A/FB true>>>>/T (0.181)/ANN pdfmark end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440
a 515 2930 a
 SDict begin mark /_objdef {pbs@obj473}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj182}>>/MK
<</TP 1/I {pbs@obj182}/IF<</S/A/FB true>>>>/T (0.182)/ANN pdfmark end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440
a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj474}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj183}>>/MK
<</TP 1/I {pbs@obj183}/IF<</S/A/FB true>>>>/T (0.183)/ANN pdfmark end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930
a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj475}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj184}>>/MK
<</TP 1/I {pbs@obj184}/IF<</S/A/FB true>>>>/T (0.184)/ANN pdfmark end
 515 2930 a 515 2930
a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj476}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj185}>>/MK
<</TP 1/I {pbs@obj185}/IF<</S/A/FB true>>>>/T (0.185)/ANN pdfmark end
 515 2930
a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930
a
 SDict begin mark /_objdef {pbs@obj477}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj186}>>/MK
<</TP 1/I {pbs@obj186}/IF<</S/A/FB true>>>>/T (0.186)/ANN pdfmark end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440
a 515 2930 a
 SDict begin mark /_objdef {pbs@obj478}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj187}>>/MK
<</TP 1/I {pbs@obj187}/IF<</S/A/FB true>>>>/T (0.187)/ANN pdfmark end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440
a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj479}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj188}>>/MK
<</TP 1/I {pbs@obj188}/IF<</S/A/FB true>>>>/T (0.188)/ANN pdfmark end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930
a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj480}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj189}>>/MK
<</TP 1/I {pbs@obj189}/IF<</S/A/FB true>>>>/T (0.189)/ANN pdfmark end
 515 2930 a 515 2930
a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj481}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/BS <</W 0>>/AP <</N {pbs@obj190}>>/MK
<</TP 1/I {pbs@obj190}/IF<</S/A/FB true>>>>/T (0.190)/ANN pdfmark end
 515 2930
a 515 2930 a
 SDict begin mark /_objdef {pbs@obj482} /type/stream /OBJ pdfmark end
 515 2930 a 515 2930 a
 SDict begin mark {pbs@obj482}(app.focusRect=false;var a0_idx;var a0_fr;var a0_wid;var a0_btnPauseLeft,a0_btnPlayLeft,a0_btnPauseRight,a0_btnPlayRight;var a0_playsRight,a0_isPaused,a0_playing;var a0_int;var a0_pause,a0_playRight,a0_playLeft,a0_playBwd,a0_playFwd;var a0_fps,a0_spd;var a0_setFps;var a0_seekFrame,a0_gotoNext,a0_gotoPrev;var a0_stopFirst,a0_stopLast;var a0_playPauseBwd,a0_playPauseFwd;var a0_stepBwd,a0_stepFwd;var a0_spdIncr,a0_spdDecr,a0_spdReset;var curdoc=this;if(!a0_fr){a0_fr=new Array();a0_wid=this.getField('anm0');for(var i=0;i<=190;i++){a0_fr[i]=this.getField('0.'+i).buttonGetIcon();}a0_btnPauseLeft=this.getField('0.PauseLeft');a0_btnPlayLeft=this.getField('0.PlayLeft');a0_btnPauseRight=this.getField('0.PauseRight');a0_btnPlayRight=this.getField('0.PlayRight');a0_playsRight=true;a0_isPaused=false;a0_playing=false;a0_fps=10;a0_spd=1;a0_setFps=function(f){a0_fps=(f==0?1e-6:f);if(a0_playing){if(a0_playsRight){a0_playRight();}else{a0_playLeft();}}};a0_seekFrame=function(f){if(f>190||f<0){return -1;}a0_idx=f;a0_wid.buttonSetIcon(a0_fr[f]);curdoc.dirty=false;return 0;};a0_stopFirst=function(){a0_pause(true);a0_seekFrame(0);};a0_stopLast=function(){a0_pause(true);a0_seekFrame(190);};a0_gotoNext=function(){if(a0_seekFrame(a0_idx+1)<0){a0_stopLast();}};a0_gotoPrev=function(){if(a0_seekFrame(a0_idx-1)<0){a0_stopFirst();}};a0_pause=function(stop){try{app.clearInterval(a0_int);}catch(e){}a0_playing=false;a0_isPaused=!stop;a0_btnPauseLeft.display=display.hidden;a0_btnPlayLeft.display=display.visible;a0_btnPauseRight.display=display.hidden;a0_btnPlayRight.display=display.visible;curdoc.dirty=false;};a0_playRight=function(){var tmp_int;try{tmp_int=app.setInterval('a0_gotoNext()',1000/a0_fps/a0_spd);}catch(e){}try{app.clearInterval(a0_int);}catch(e){}a0_int=tmp_int;a0_playsRight=true;a0_playing=true;a0_isPaused=false;a0_btnPauseLeft.display=display.visible;a0_btnPlayLeft.display=display.hidden;a0_btnPauseRight.display=display.visible;a0_btnPlayRight.display=display.hidden;curdoc.dirty=false;};a0_playLeft=function(){var tmp_int;try{tmp_int=app.setInterval('a0_gotoPrev()',1000/a0_fps/a0_spd);}catch(e){}try{app.clearInterval(a0_int);}catch(e){}a0_int=tmp_int;a0_playsRight=false;a0_playing=true;a0_isPaused=false;a0_btnPauseLeft.display=display.visible;a0_btnPlayLeft.display=display.hidden;a0_btnPauseRight.display=display.visible;a0_btnPlayRight.display=display.hidden;curdoc.dirty=false;};a0_playPauseBwd=function(){if(a0_playing){a0_pause();}else{a0_playBwd();}};a0_playPauseFwd=function(){if(a0_playing){a0_pause();}else{a0_playFwd();}};a0_spdIncr=function(){a0_spd*=1.1;a0_setFps(a0_fps);};a0_spdDecr=function(){a0_spd/=1.1;a0_setFps(a0_fps);};a0_spdReset=function(){a0_spd=1;a0_setFps(a0_fps);};a0_stepBwd=function(){if(!a0_playing){a0_seekFrame(a0_idx-1);a0_isPaused=true;}};a0_stepFwd=function(){if(!a0_playing){a0_seekFrame(a0_idx+1);a0_isPaused=true;}};a0_playBwd=function(){if(a0_idx==0){a0_stopLast();}a0_playLeft();};a0_playFwd=function(){if(a0_idx==190){a0_stopFirst();}a0_playRight();};a0_seekFrame(190);})/PUT pdfmark mark {pbs@obj482}<<>>/PUT pdfmark end
 515 2930 a
 SDict begin mark /_objdef {pbs@obj483} /type/stream /OBJ pdfmark end
 515 2930
a 515 2930 a
 SDict begin mark {pbs@obj483}(if(a0_playing){a0_pause(true);}if(!a0_isPaused)a0_playsRight=true;if(!a0_isPaused&&a0_idx!=190)a0_seekFrame(190);)/PUT pdfmark mark {pbs@obj483}<<>>/PUT pdfmark end
 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 550 2894 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 550 2894
a 515 2930 a
 SDict begin mark /_objdef {pbs@obj484}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Screen/F 2/AA <</PV <</S/JavaScript/JS {pbs@obj482}>>/PO
<</S/JavaScript/JS {pbs@obj482}>>/PI <</S/JavaScript/JS {pbs@obj483}>>/PC
<</S/JavaScript/JS {pbs@obj483}>>>>/ANN pdfmark end
 515 2930 a 515 2930 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 515 2930 a 3151 440
a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 3151 440 a 515 2930 a
 SDict begin mark /_objdef {pbs@obj485}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/FT/Btn/Ff 65536/F 4/BS <</W 0>>/H/N/T (anm0)/Contents
(animation by animate, v. 2022/09/15)/AA <</PV <</S/JavaScript/JS {pbs@obj482}>>/PO
<</S/JavaScript/JS {pbs@obj482}>>/PI <</S/JavaScript/JS {pbs@obj483}>>/PC
<</S/JavaScript/JS {pbs@obj483}>>/D <</S/JavaScript/JS (try{if(a0_playing){a0_pause();}}catch(e){})>>/U
<</S/JavaScript/JS (try{if(event.shift)a0_playsRight=!a0_playsRight;var
doplay=true;if(a0_idx==190&&a0_playsRight){a0_stopFirst();}if(a0_idx==0&&!a0_playsRight){a0_stopLast();}if(doplay){if(a0_playsRight){a0_playRight();}else{a0_playLeft();}}}catch(e){})>>>>/AP
<</N {pbs@obj190}>>/MK <</TP 1/I {pbs@obj190}/IF<</S/A/FB true>>>>/ANN
pdfmark end
 515 2930 a 1277 3061 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 986726 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 986726 65536 div 72.27 div DVImag mul Resolution mul add}ifelse}{0
65536 div 72.27 div DVImag mul VResolution mul add}ifelse translate
mark /_objdef {pbs@obj486} /BBox [isls{landplus90{986726 65536 div
72.27 div DVImag mul VResolution mul neg 986726 65536 div 72.27 div
DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul neg 0 986726
65536 div 72.27 div DVImag mul VResolution mul 986726 65536 div 72.27
div DVImag mul Resolution mul neg}ifelse}{0 986726 65536 div 72.27
div DVImag mul VResolution mul 986726 65536 div 72.27 div DVImag mul
Resolution mul 0 65536 div 72.27 div DVImag mul VResolution mul neg}ifelse]/BP
pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if exch neg exch
neg translate}?pdfmark end
 1277 3061
a 1277 3061 a
gsave
 1277 3061 a 1277 3061 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 1277 3061 a @beginspecial
@setspecial
 save /bgfill {fill} bind def [-1 0 0 1 15 0] concat 0.5 setlinewidth
1 setlinecap 1 setlinejoin 6.5 1 moveto 1 1 1 6.5 2 arct 1 6.5 lineto
1 14 6.5 14 2 arct 6.5 14 lineto 14 14 14 6.5 2 arct 14 6.5 lineto
14 1 6.5 1 2 arct closepath 0 setgray stroke 1 setlinewidth 4.5 4.7
moveto 8.6 7.5 lineto 4.5 10.3 lineto stroke 0 setlinejoin 10.0 4.7
moveto 10.0 10.3 lineto stroke  restore
 
@endspecial 1277 3061 a
grestore
 1277 3061 a 1277
3061 a
 SDict begin mark /EP pdfmark grestore end
 1277 3061 a 1277 3061 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 1277 3061 a 1396 2942
a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 1396 2942 a 1277 3061 a
 SDict begin mark /_objdef {pbs@obj487}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 0/FT/Btn/Ff 65536/H/I/BS <</W 0>>/AP <</N
{pbs@obj486}>>/MK <</TP 1/I {pbs@obj486}/IF<</S/A/FB true>>>>/T (0.EndLeft)/AA
<</D <</S/JavaScript/JS (a0_stopFirst();)>>>>/ANN pdfmark end
 1277 3061 a 1396 3061 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 986726 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 986726 65536 div 72.27 div DVImag mul Resolution mul add}ifelse}{0
65536 div 72.27 div DVImag mul VResolution mul add}ifelse translate
mark /_objdef {pbs@obj488} /BBox [isls{landplus90{986726 65536 div
72.27 div DVImag mul VResolution mul neg 986726 65536 div 72.27 div
DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul neg 0 986726
65536 div 72.27 div DVImag mul VResolution mul 986726 65536 div 72.27
div DVImag mul Resolution mul neg}ifelse}{0 986726 65536 div 72.27
div DVImag mul VResolution mul 986726 65536 div 72.27 div DVImag mul
Resolution mul 0 65536 div 72.27 div DVImag mul VResolution mul neg}ifelse]/BP
pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if exch neg exch
neg translate}?pdfmark end
 1396
3061 a 1396 3061 a
gsave
 1396 3061 a 1396 3061 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 1396 3061
a @beginspecial @setspecial
 save /bgfill {fill} bind def [-1 0 0 1 15 0] concat 0.5 setlinewidth
1 setlinecap 1 setlinejoin 6.5 1 moveto 1 1 1 6.5 2 arct 1 6.5 lineto
1 14 6.5 14 2 arct 6.5 14 lineto 14 14 14 6.5 2 arct 14 6.5 lineto
14 1 6.5 1 2 arct closepath 0 setgray stroke 1 setlinewidth 5.5 4.7
moveto 9.6 7.5 lineto 5.5 10.3 lineto stroke  restore
 
@endspecial 1396 3061 a
grestore

1396 3061 a 1396 3061 a
 SDict begin mark /EP pdfmark grestore end
 1396 3061 a 1396 3061 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 1396
3061 a 1516 2942 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 1516 2942 a 1396 3061 a
 SDict begin mark /_objdef {pbs@obj489}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 0/FT/Btn/Ff 65536/H/I/BS <</W 0>>/AP <</N
{pbs@obj488}>>/MK <</TP 1/I {pbs@obj488}/IF<</S/A/FB true>>>>/T (0.StepLeft)/AA
<</D <</S/JavaScript/JS (a0_stepBwd();)>>>>/ANN pdfmark end
 1396 3061
a 1516 3061 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 986726 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 986726 65536 div 72.27 div DVImag mul Resolution mul add}ifelse}{0
65536 div 72.27 div DVImag mul VResolution mul add}ifelse translate
mark /_objdef {pbs@obj490} /BBox [isls{landplus90{986726 65536 div
72.27 div DVImag mul VResolution mul neg 986726 65536 div 72.27 div
DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul neg 0 986726
65536 div 72.27 div DVImag mul VResolution mul 986726 65536 div 72.27
div DVImag mul Resolution mul neg}ifelse}{0 986726 65536 div 72.27
div DVImag mul VResolution mul 986726 65536 div 72.27 div DVImag mul
Resolution mul 0 65536 div 72.27 div DVImag mul VResolution mul neg}ifelse]/BP
pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if exch neg exch
neg translate}?pdfmark end
 1516 3061 a 1516 3061 a
gsave
 1516 3061 a 1516
3061 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 1516 3061 a @beginspecial @setspecial
 save /bgfill {fill} bind def [-1 0 0 1 15 0] concat 0.5 setlinewidth
1 setlinecap 1 setlinejoin 0 1 moveto 14 1 14 6.5 2 arct 14 6.5 lineto
14 14 1 14 2 arct 0 14 lineto 0 setgray stroke 0 setlinecap 2 setlinewidth
2.2 4 moveto 2.2 11 lineto stroke  restore
 
@endspecial
1516 3061 a
grestore
 1516 3061 a 1516 3061 a
 SDict begin mark /EP pdfmark grestore end
 1516 3061 a 1516
3061 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 1516 3061 a 1636 2942 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 1636 2942 a 1516 3061
a
 SDict begin mark /_objdef {pbs@obj491}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/H/N/BS <</W 0>>/AP <</N
{pbs@obj490}>>/MK <</TP 1/I {pbs@obj490}/IF<</S/A/FB true>>>>/T (0.PauseLeft)/ANN
pdfmark end
 1516 3061 a 1516 3061 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 986726 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 986726 65536 div 72.27 div DVImag mul Resolution mul add}ifelse}{0
65536 div 72.27 div DVImag mul VResolution mul add}ifelse translate
mark /_objdef {pbs@obj492} /BBox [isls{landplus90{986726 65536 div
72.27 div DVImag mul VResolution mul neg 986726 65536 div 72.27 div
DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul neg 0 986726
65536 div 72.27 div DVImag mul VResolution mul 986726 65536 div 72.27
div DVImag mul Resolution mul neg}ifelse}{0 986726 65536 div 72.27
div DVImag mul VResolution mul 986726 65536 div 72.27 div DVImag mul
Resolution mul 0 65536 div 72.27 div DVImag mul VResolution mul neg}ifelse]/BP
pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if exch neg exch
neg translate}?pdfmark end
 1516 3061 a 1516 3061 a
gsave
 1516
3061 a 1516 3061 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 1516 3061 a @beginspecial @setspecial
 save /bgfill {fill} bind def [-1 0 0 1 15 0] concat 0.5 setlinewidth
1 setlinecap 1 setlinejoin 0 1 moveto 14 1 14 6.5 2 arct 14 6.5 lineto
14 14 1 14 2 arct 0 14 lineto 0 setgray stroke 0.1 setlinewidth 0 14
moveto 0 1 lineto stroke 1 setlinewidth 5 4 moveto 5 11 lineto 10 7.5
lineto closepath stroke  restore


@endspecial 1516 3061 a
grestore
 1516 3061 a 1516 3061 a
 SDict begin mark /EP pdfmark grestore end
 1516
3061 a 1516 3061 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 1516 3061 a 1636 2942 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 1636 2942
a 1516 3061 a
 SDict begin mark /_objdef {pbs@obj493}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 0/FT/Btn/Ff 65537/H/N/BS <</W 0>>/AP <</N
{pbs@obj492}>>/MK <</TP 1/I {pbs@obj492}/IF<</S/A/FB true>>>>/T (0.PlayLeft)/ANN
pdfmark end
 1516 3061 a 1516 3061 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 282168 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 345886 65536 div 72.27 div DVImag mul Resolution mul add}ifelse}{0
65536 div 72.27 div DVImag mul VResolution mul add}ifelse translate
mark /_objdef {pbs@obj494} /BBox [isls{landplus90{282168 65536 div
72.27 div DVImag mul VResolution mul neg 345886 65536 div 72.27 div
DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul neg 0 282168
65536 div 72.27 div DVImag mul VResolution mul 345886 65536 div 72.27
div DVImag mul Resolution mul neg}ifelse}{0 282168 65536 div 72.27
div DVImag mul VResolution mul 345886 65536 div 72.27 div DVImag mul
Resolution mul 0 65536 div 72.27 div DVImag mul VResolution mul neg}ifelse]/BP
pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if exch neg exch
neg translate}?pdfmark end
 1516 3061 a 1516
3061 a
gsave
 1516 3061 a 1516 3061 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 1516 3061 a
grestore
 1516 3061
a 1516 3061 a
 SDict begin mark /EP pdfmark grestore end
 1516 3061 a 1516 3061 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 1516 3061 a 1636
2942 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 1636 2942 a 1516 3061 a
 SDict begin mark /_objdef {pbs@obj495}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 0/FT/Btn/Ff 65536/H/I/BS <</W 0>>/AP <</N
{pbs@obj494}>>/MK <</TP 1/I {pbs@obj494}/IF<</S/A/FB true>>>>/T (0.PlayPauseLeft)/AA
<</D <</S/JavaScript/JS (a0_playPauseBwd();)>>>>/ANN pdfmark end
 1516 3061 a 1636 3061
a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 986726 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 986726 65536 div 72.27 div DVImag mul Resolution mul add}ifelse}{0
65536 div 72.27 div DVImag mul VResolution mul add}ifelse translate
mark /_objdef {pbs@obj496} /BBox [isls{landplus90{986726 65536 div
72.27 div DVImag mul VResolution mul neg 986726 65536 div 72.27 div
DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul neg 0 986726
65536 div 72.27 div DVImag mul VResolution mul 986726 65536 div 72.27
div DVImag mul Resolution mul neg}ifelse}{0 986726 65536 div 72.27
div DVImag mul VResolution mul 986726 65536 div 72.27 div DVImag mul
Resolution mul 0 65536 div 72.27 div DVImag mul VResolution mul neg}ifelse]/BP
pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if exch neg exch
neg translate}?pdfmark end
 1636 3061 a 1636 3061 a
gsave
 1636 3061 a 1636 3061 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 1636
3061 a @beginspecial @setspecial
 save /bgfill {fill} bind def 0.5 setlinewidth 1 setlinecap 1 setlinejoin
0 1 moveto 14 1 14 6.5 2 arct 14 6.5 lineto 14 14 1 14 2 arct 0 14
lineto 0 setgray stroke 0 setlinecap 2 setlinewidth 2.2 4 moveto 2.2
11 lineto stroke  restore
 
@endspecial 1636 3061
a
grestore
 1636 3061 a 1636 3061 a
 SDict begin mark /EP pdfmark grestore end
 1636 3061 a 1636 3061 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 1636
3061 a 1755 2942 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 1755 2942 a 1636 3061 a
 SDict begin mark /_objdef {pbs@obj497}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 2/FT/Btn/Ff 65537/H/N/BS <</W 0>>/AP <</N
{pbs@obj496}>>/MK <</TP 1/I {pbs@obj496}/IF<</S/A/FB true>>>>/T (0.PauseRight)/ANN
pdfmark end
 1636 3061
a 1636 3061 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 986726 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 986726 65536 div 72.27 div DVImag mul Resolution mul add}ifelse}{0
65536 div 72.27 div DVImag mul VResolution mul add}ifelse translate
mark /_objdef {pbs@obj498} /BBox [isls{landplus90{986726 65536 div
72.27 div DVImag mul VResolution mul neg 986726 65536 div 72.27 div
DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul neg 0 986726
65536 div 72.27 div DVImag mul VResolution mul 986726 65536 div 72.27
div DVImag mul Resolution mul neg}ifelse}{0 986726 65536 div 72.27
div DVImag mul VResolution mul 986726 65536 div 72.27 div DVImag mul
Resolution mul 0 65536 div 72.27 div DVImag mul VResolution mul neg}ifelse]/BP
pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if exch neg exch
neg translate}?pdfmark end
 1636 3061 a 1636 3061 a
gsave
 1636 3061 a 1636
3061 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 1636 3061 a @beginspecial @setspecial
 save /bgfill {fill} bind def 0.5 setlinewidth 1 setlinecap 1 setlinejoin
0 1 moveto 14 1 14 6.5 2 arct 14 6.5 lineto 14 14 1 14 2 arct 0 14
lineto 0 setgray stroke 0.1 setlinewidth 0 14 moveto 0 1 lineto stroke
1 setlinewidth 5 4 moveto 5 11 lineto 10 7.5 lineto closepath stroke
 restore
 
@endspecial
1636 3061 a
grestore
 1636 3061 a 1636 3061 a
 SDict begin mark /EP pdfmark grestore end
 1636 3061 a 1636
3061 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 1636 3061 a 1755 2942 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 1755 2942 a 1636 3061
a
 SDict begin mark /_objdef {pbs@obj499}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 0/FT/Btn/Ff 65537/H/N/BS <</W 0>>/AP <</N
{pbs@obj498}>>/MK <</TP 1/I {pbs@obj498}/IF<</S/A/FB true>>>>/T (0.PlayRight)/ANN
pdfmark end
 1636 3061 a 1636 3061 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 1636 3061 a 1755 2942 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 1755
2942 a 1636 3061 a
 SDict begin mark /_objdef {pbs@obj500}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 0/FT/Btn/Ff 65536/H/I/BS <</W 0>>/AP <</N
{pbs@obj494}>>/MK <</TP 1/I {pbs@obj494}/IF<</S/A/FB true>>>>/T (0.PlayPauseRight)/AA
<</D <</S/JavaScript/JS (a0_playPauseFwd();)>>>>/ANN pdfmark end
 1636 3061 a 1755 3061 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 986726 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 986726 65536 div 72.27 div DVImag mul Resolution mul add}ifelse}{0
65536 div 72.27 div DVImag mul VResolution mul add}ifelse translate
mark /_objdef {pbs@obj501} /BBox [isls{landplus90{986726 65536 div
72.27 div DVImag mul VResolution mul neg 986726 65536 div 72.27 div
DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul neg 0 986726
65536 div 72.27 div DVImag mul VResolution mul 986726 65536 div 72.27
div DVImag mul Resolution mul neg}ifelse}{0 986726 65536 div 72.27
div DVImag mul VResolution mul 986726 65536 div 72.27 div DVImag mul
Resolution mul 0 65536 div 72.27 div DVImag mul VResolution mul neg}ifelse]/BP
pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if exch neg exch
neg translate}?pdfmark end
 1755 3061
a 1755 3061 a
gsave
 1755 3061 a 1755 3061 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 1755 3061 a @beginspecial
@setspecial
 save /bgfill {fill} bind def 0.5 setlinewidth 1 setlinecap 1 setlinejoin
6.5 1 moveto 1 1 1 6.5 2 arct 1 6.5 lineto 1 14 6.5 14 2 arct 6.5 14
lineto 14 14 14 6.5 2 arct 14 6.5 lineto 14 1 6.5 1 2 arct closepath
0 setgray stroke 1 setlinewidth 5.5 4.7 moveto 9.6 7.5 lineto 5.5 10.3
lineto stroke  restore
 
@endspecial 1755 3061 a
grestore
 1755 3061 a 1755
3061 a
 SDict begin mark /EP pdfmark grestore end
 1755 3061 a 1755 3061 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 1755 3061 a 1875 2942
a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 1875 2942 a 1755 3061 a
 SDict begin mark /_objdef {pbs@obj502}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 0/FT/Btn/Ff 65536/H/I/BS <</W 0>>/AP <</N
{pbs@obj501}>>/MK <</TP 1/I {pbs@obj501}/IF<</S/A/FB true>>>>/T (0.StepRight)/AA
<</D <</S/JavaScript/JS (a0_stepFwd();)>>>>/ANN pdfmark end
 1755 3061 a 1875 3061 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 986726 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 986726 65536 div 72.27 div DVImag mul Resolution mul add}ifelse}{0
65536 div 72.27 div DVImag mul VResolution mul add}ifelse translate
mark /_objdef {pbs@obj503} /BBox [isls{landplus90{986726 65536 div
72.27 div DVImag mul VResolution mul neg 986726 65536 div 72.27 div
DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul neg 0 986726
65536 div 72.27 div DVImag mul VResolution mul 986726 65536 div 72.27
div DVImag mul Resolution mul neg}ifelse}{0 986726 65536 div 72.27
div DVImag mul VResolution mul 986726 65536 div 72.27 div DVImag mul
Resolution mul 0 65536 div 72.27 div DVImag mul VResolution mul neg}ifelse]/BP
pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if exch neg exch
neg translate}?pdfmark end
 1875
3061 a 1875 3061 a
gsave
 1875 3061 a 1875 3061 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 1875 3061
a @beginspecial @setspecial
 save /bgfill {fill} bind def 0.5 setlinewidth 1 setlinecap 1 setlinejoin
6.5 1 moveto 1 1 1 6.5 2 arct 1 6.5 lineto 1 14 6.5 14 2 arct 6.5 14
lineto 14 14 14 6.5 2 arct 14 6.5 lineto 14 1 6.5 1 2 arct closepath
0 setgray stroke 1 setlinewidth 4.5 4.7 moveto 8.6 7.5 lineto 4.5 10.3
lineto stroke 0 setlinejoin 10.0 4.7 moveto 10.0 10.3 lineto stroke
 restore
 
@endspecial 1875 3061 a
grestore

1875 3061 a 1875 3061 a
 SDict begin mark /EP pdfmark grestore end
 1875 3061 a 1875 3061 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 1875
3061 a 1994 2942 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 1994 2942 a 1875 3061 a
 SDict begin mark /_objdef {pbs@obj504}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 0/FT/Btn/Ff 65536/H/I/BS <</W 0>>/AP <</N
{pbs@obj503}>>/MK <</TP 1/I {pbs@obj503}/IF<</S/A/FB true>>>>/T (0.EndRight)/AA
<</D <</S/JavaScript/JS (a0_stopLast();)>>>>/ANN pdfmark end
 1875 3061
a 2030 3061 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 986726 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 986726 65536 div 72.27 div DVImag mul Resolution mul add}ifelse}{0
65536 div 72.27 div DVImag mul VResolution mul add}ifelse translate
mark /_objdef {pbs@obj505} /BBox [isls{landplus90{986726 65536 div
72.27 div DVImag mul VResolution mul neg 986726 65536 div 72.27 div
DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul neg 0 986726
65536 div 72.27 div DVImag mul VResolution mul 986726 65536 div 72.27
div DVImag mul Resolution mul neg}ifelse}{0 986726 65536 div 72.27
div DVImag mul VResolution mul 986726 65536 div 72.27 div DVImag mul
Resolution mul 0 65536 div 72.27 div DVImag mul VResolution mul neg}ifelse]/BP
pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if exch neg exch
neg translate}?pdfmark end
 2030 3061 a 2030 3061 a
gsave
 2030 3061 a 2030
3061 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 2030 3061 a @beginspecial @setspecial
 save /bgfill {fill} bind def 0.5 setlinewidth 1 setlinecap 1 setlinejoin
6.5 1 moveto 1 1 1 6.5 2 arct 1 6.5 lineto 1 14 6.5 14 2 arct 6.5 14
lineto 14 14 14 6.5 2 arct 14 6.5 lineto 14 1 6.5 1 2 arct closepath
0 setgray stroke 1.0 setlinewidth 0 setlinecap 4.7 7.5 moveto 10.3
7.5 lineto stroke  restore
 
@endspecial
2030 3061 a
grestore
 2030 3061 a 2030 3061 a
 SDict begin mark /EP pdfmark grestore end
 2030 3061 a 2030
3061 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 2030 3061 a 2150 2942 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 2150 2942 a 2030 3061
a
 SDict begin mark /_objdef {pbs@obj506}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 0/FT/Btn/Ff 65536/H/I/BS <</W 0>>/AP <</N
{pbs@obj505}>>/MK <</TP 1/I {pbs@obj505}/IF<</S/A/FB true>>>>/T (0.Minus)/TU
(slower)/AA <</D <</S/JavaScript/JS (a0_spdDecr();)>>>>/ANN pdfmark
end
 2030 3061 a 2150 3061 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 986726 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 986726 65536 div 72.27 div DVImag mul Resolution mul add}ifelse}{0
65536 div 72.27 div DVImag mul VResolution mul add}ifelse translate
mark /_objdef {pbs@obj507} /BBox [isls{landplus90{986726 65536 div
72.27 div DVImag mul VResolution mul neg 986726 65536 div 72.27 div
DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul neg 0 986726
65536 div 72.27 div DVImag mul VResolution mul 986726 65536 div 72.27
div DVImag mul Resolution mul neg}ifelse}{0 986726 65536 div 72.27
div DVImag mul VResolution mul 986726 65536 div 72.27 div DVImag mul
Resolution mul 0 65536 div 72.27 div DVImag mul VResolution mul neg}ifelse]/BP
pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if exch neg exch
neg translate}?pdfmark end
 2150 3061 a 2150 3061 a
gsave
 2150
3061 a 2150 3061 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 2150 3061 a @beginspecial @setspecial
 save /bgfill {fill} bind def 0.5 setlinewidth 1 setlinecap 1 setlinejoin
6.5 1 moveto 1 1 1 6.5 2 arct 1 6.5 lineto 1 14 6.5 14 2 arct 6.5 14
lineto 14 14 14 6.5 2 arct 14 6.5 lineto 14 1 6.5 1 2 arct closepath
0 setgray stroke 1 setlinewidth 7.5 4.7 moveto 7.5 10.3 lineto stroke
0 setlinejoin 3.5 5 moveto 7 7.5 lineto 3.5 10 lineto closepath fill
11.5 5 moveto 8 7.5 lineto 11.5 10 lineto closepath fill 1 setlinewidth
2 setlinecap 3 7.5 moveto 3.5 7.5 lineto 12 7.5 moveto 11.5 7.5 lineto
stroke  restore


@endspecial 2150 3061 a
grestore
 2150 3061 a 2150 3061 a
 SDict begin mark /EP pdfmark grestore end
 2150
3061 a 2150 3061 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 2150 3061 a 2269 2942 a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 2269 2942
a 2150 3061 a
 SDict begin mark /_objdef {pbs@obj508}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 0/FT/Btn/Ff 65536/H/I/BS <</W 0>>/AP <</N
{pbs@obj507}>>/MK <</TP 1/I {pbs@obj507}/IF<</S/A/FB true>>>>/T (0.Reset)/TU
(default speed)/AA <</D <</S/JavaScript/JS (a0_spdReset();)>>>>/ANN
pdfmark end
 2150 3061 a 2269 3061 a
 SDict begin {gsave currentpoint initclip clippath pathbbox newpath
pop pop isls{landplus90{exch 986726 65536 div 72.27 div DVImag mul
VResolution mul add exch}{exch 0 65536 div 72.27 div DVImag mul VResolution
mul add exch 986726 65536 div 72.27 div DVImag mul Resolution mul add}ifelse}{0
65536 div 72.27 div DVImag mul VResolution mul add}ifelse translate
mark /_objdef {pbs@obj509} /BBox [isls{landplus90{986726 65536 div
72.27 div DVImag mul VResolution mul neg 986726 65536 div 72.27 div
DVImag mul Resolution mul 0 65536 div 72.27 div DVImag mul VResolution
mul 0}{0 65536 div 72.27 div DVImag mul VResolution mul neg 0 986726
65536 div 72.27 div DVImag mul VResolution mul 986726 65536 div 72.27
div DVImag mul Resolution mul neg}ifelse}{0 986726 65536 div 72.27
div DVImag mul VResolution mul 986726 65536 div 72.27 div DVImag mul
Resolution mul 0 65536 div 72.27 div DVImag mul VResolution mul neg}ifelse]/BP
pdfmark 1 -1 scale isls{90 landplus90{neg}if rotate}if exch neg exch
neg translate}?pdfmark end
 2269 3061 a 2269
3061 a
gsave
 2269 3061 a 2269 3061 a


currentpoint

currentpoint translate

1 1 scale

neg exch neg exch translate


 2269 3061 a @beginspecial
@setspecial
 save /bgfill {fill} bind def 0.5 setlinewidth 1 setlinecap 1 setlinejoin
6.5 1 moveto 1 1 1 6.5 2 arct 1 6.5 lineto 1 14 6.5 14 2 arct 6.5 14
lineto 14 14 14 6.5 2 arct 14 6.5 lineto 14 1 6.5 1 2 arct closepath
0 setgray stroke 1.0 setlinewidth 0 setlinecap 4.7 7.5 moveto 10.3
7.5 lineto 7.5 4.7 moveto 7.5 10.3 lineto stroke  restore
 
@endspecial 2269 3061 a
grestore
 2269 3061 a 2269
3061 a
 SDict begin mark /EP pdfmark grestore end
 2269 3061 a 2269 3061 a
 SDict begin currentpoint /pbs@lly exch def /pbs@llx exch def end
 2269 3061 a 2389 2942
a
 SDict begin currentpoint /pbs@ury exch def /pbs@urx exch def end
 2389 2942 a 2269 3061 a
 SDict begin mark /_objdef {pbs@obj510}/Rect [pbs@llx pbs@lly pbs@urx
pbs@ury]/Subtype/Widget/F 0/FT/Btn/Ff 65536/H/I/BS <</W 0>>/AP <</N
{pbs@obj509}>>/MK <</TP 1/I {pbs@obj509}/IF<</S/A/FB true>>>>/T (0.Plus)/TU
(faster)/AA <</D <</S/JavaScript/JS (a0_spdIncr();)>>>>/ANN pdfmark
end
 2269 3061 a 0 TeXcolorgray
1926 5255 a Fa(1)p 0 TeXcolorgray 0 0 a
 SDict begin mark /_objdef {pbs@obj512} /type/array /OBJ pdfmark end
 0 0 a 0 0 a
 SDict begin mark {pbs@obj512}0 [{pbs@obj510} {pbs@obj508} {pbs@obj506}
{pbs@obj504} {pbs@obj502} {pbs@obj500} {pbs@obj499} {pbs@obj497} {pbs@obj495}
{pbs@obj493} {pbs@obj491} {pbs@obj489} {pbs@obj487} {pbs@obj485} {pbs@obj481}
{pbs@obj480} {pbs@obj479} {pbs@obj478} {pbs@obj477} {pbs@obj476} {pbs@obj475}
{pbs@obj474} {pbs@obj473} {pbs@obj472} {pbs@obj471} {pbs@obj470} {pbs@obj469}
{pbs@obj468} {pbs@obj467} {pbs@obj466} {pbs@obj465} {pbs@obj464} {pbs@obj463}
{pbs@obj462} {pbs@obj461} {pbs@obj460} {pbs@obj459} {pbs@obj458} {pbs@obj457}
{pbs@obj456} {pbs@obj455} {pbs@obj454} {pbs@obj453} {pbs@obj452} {pbs@obj451}
{pbs@obj450} {pbs@obj449} {pbs@obj448} {pbs@obj447} {pbs@obj446} {pbs@obj445}
{pbs@obj444} {pbs@obj443} {pbs@obj442} {pbs@obj441} {pbs@obj440} {pbs@obj439}
{pbs@obj438} {pbs@obj437} {pbs@obj436} {pbs@obj435} {pbs@obj434} {pbs@obj433}
{pbs@obj432} {pbs@obj431} {pbs@obj430} {pbs@obj429} {pbs@obj428} {pbs@obj427}
{pbs@obj426} {pbs@obj425} {pbs@obj424} {pbs@obj423} {pbs@obj422} {pbs@obj421}
{pbs@obj420} {pbs@obj419} {pbs@obj418} {pbs@obj417} {pbs@obj416} {pbs@obj415}
{pbs@obj414} {pbs@obj413} {pbs@obj412} {pbs@obj411} {pbs@obj410} {pbs@obj409}
{pbs@obj408} {pbs@obj407} {pbs@obj406} {pbs@obj405} {pbs@obj404} {pbs@obj403}
{pbs@obj402} {pbs@obj401} {pbs@obj400} {pbs@obj399} {pbs@obj398} {pbs@obj397}
{pbs@obj396} {pbs@obj395} {pbs@obj394} {pbs@obj393} {pbs@obj392} {pbs@obj391}
{pbs@obj389} {pbs@obj387} {pbs@obj385} {pbs@obj383} {pbs@obj381} {pbs@obj379}
{pbs@obj377} {pbs@obj375} {pbs@obj373} {pbs@obj371} {pbs@obj369} {pbs@obj367}
{pbs@obj365} {pbs@obj363} {pbs@obj361} {pbs@obj359} {pbs@obj357} {pbs@obj355}
{pbs@obj353} {pbs@obj351} {pbs@obj349} {pbs@obj347} {pbs@obj345} {pbs@obj343}
{pbs@obj341} {pbs@obj339} {pbs@obj337} {pbs@obj335} {pbs@obj333} {pbs@obj331}
{pbs@obj329} {pbs@obj327} {pbs@obj325} {pbs@obj323} {pbs@obj321} {pbs@obj319}
{pbs@obj317} {pbs@obj315} {pbs@obj313} {pbs@obj311} {pbs@obj309} {pbs@obj307}
{pbs@obj305} {pbs@obj303} {pbs@obj301} {pbs@obj299} {pbs@obj297} {pbs@obj295}
{pbs@obj293} {pbs@obj291} {pbs@obj289} {pbs@obj287} {pbs@obj285} {pbs@obj283}
{pbs@obj281} {pbs@obj279} {pbs@obj277} {pbs@obj275} {pbs@obj273} {pbs@obj271}
{pbs@obj269} {pbs@obj267} {pbs@obj265} {pbs@obj263} {pbs@obj261} {pbs@obj259}
{pbs@obj257} {pbs@obj255} {pbs@obj253} {pbs@obj251} {pbs@obj249} {pbs@obj247}
{pbs@obj245} {pbs@obj243} {pbs@obj241} {pbs@obj239} {pbs@obj237} {pbs@obj235}
{pbs@obj233} {pbs@obj231} {pbs@obj229} {pbs@obj227} {pbs@obj225} {pbs@obj223}
{pbs@obj221} {pbs@obj219} {pbs@obj217} {pbs@obj215} {pbs@obj213} {pbs@obj211}
{pbs@obj209} {pbs@obj207} {pbs@obj205} {pbs@obj203} {pbs@obj201} {pbs@obj199}
{pbs@obj197} {pbs@obj195} {pbs@obj193} {pbs@obj191} ]/PUTINTERVAL pdfmark
end
 0
0 a 0 0 a
 SDict begin  mark {Catalog} <</AcroForm <</Fields {pbs@obj512}/NeedAppearances
false >>>> /PUT pdfmark end
 0 0 a 0 0 a
 SDict begin {Resolution 1200 gt VResolution 1200 gt or product (Ghostscript) search {pop pop pop true}{pop false}ifelse and {(\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@\ \ \ \ \ Warning:\ DVI\ resolution\ greater\ than\ 1200\ dpi!\ \ \ \ \ @@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ @@\n@@\ PDF\ Annotation\ appearances\ (buttons,\ animation\ frames)\ @@\n@@\ may\ be\ poorly\ scaled,\ clipped\ or\ invisible.\ \ \ \ \ \ \ \ \ \ \ \ @@\n@@\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ @@\n@@\ Dvips\ should\ be\ called\ either\ without\ option\ `-Ppdf':\ \ @@\n@@\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ @@\n@@\ \ \ dvips\ main\n@@\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ @@\n@@\ or\ with\ a\ different\ resolution\ setting,\ e.g.:\ \ \ \ \ \ \ \ \ \ @@\n@@\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ @@\n@@\ \ \ dvips\ -Ppdf\ -D1200\ main\n@@\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ @@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n)print} if} ?pdfmark end
 0 0 a
 SDict begin {product (Ghostscript) search {pop pop pop true}{pop false}ifelse revision 915 lt and {(\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@\ \ \ \ \ \ \ \ \ \ \ \ Warning:\ Ghostscript\ too\ old!\ \ \ \ \ \ \ \ \ \ \ \ @@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ @@\n@@\ Ghostscript\ version\ >=\ 9.15.\ required!\ \ \ \ \ \ \ \ \ \ \ \ \ \ @@\n@@\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ @@\n@@\ Various\ advanced\ PDF\ features\ such\ as\ Layers\ (OCGs)\ @@\n@@\ and\ animations\ may\ not\ work.\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ @@\n@@\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ @@\n@@\ Get\ current\ version\ from\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ @@\n@@\ http://www.ghostscript.com/download\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ @@\n@@\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ @@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n)print} if} ?pdfmark end
 eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
